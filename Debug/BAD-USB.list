
BAD-USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c24  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08007d30  08007d30  00017d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  08007d94  08007d94  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d94  08007d94  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  08007ef4  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  08007ef4  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae7  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002616  00000000  00000000  0002bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e7  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d429  00000000  00000000  0004873f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847a3  00000000  00000000  00055b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000da35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	08007d18 	.word	0x08007d18

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	08007d18 	.word	0x08007d18

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 ff0e 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 fdd0 	bl	8000cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 fe28 	bl	8000dac <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 f9f6 	bl	800754c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48c4      	ldr	r0, [pc, #784]	; (8000478 <main+0x32c>)
 8000168:	f001 fa1a 	bl	80015a0 <HAL_GPIO_WritePin>
  	  HAL_Delay(1000);
 800016c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000170:	f000 ff60 	bl	8001034 <HAL_Delay>
	  keyboardhid.MODIFIER = 0x08;
 8000174:	4bc1      	ldr	r3, [pc, #772]	; (800047c <main+0x330>)
 8000176:	2208      	movs	r2, #8
 8000178:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x15;
 800017a:	4bc0      	ldr	r3, [pc, #768]	; (800047c <main+0x330>)
 800017c:	2215      	movs	r2, #21
 800017e:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press GIU
 8000180:	2208      	movs	r2, #8
 8000182:	49be      	ldr	r1, [pc, #760]	; (800047c <main+0x330>)
 8000184:	48be      	ldr	r0, [pc, #760]	; (8000480 <main+0x334>)
 8000186:	f006 f8f1 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 800018a:	2014      	movs	r0, #20
 800018c:	f000 ff52 	bl	8001034 <HAL_Delay>
      keyboardhid.MODIFIER = 0x00;
 8000190:	4bba      	ldr	r3, [pc, #744]	; (800047c <main+0x330>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
      keyboardhid.KEYCODE1 = 0x00;
 8000196:	4bb9      	ldr	r3, [pc, #740]	; (800047c <main+0x330>)
 8000198:	2200      	movs	r2, #0
 800019a:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //ralease GIU
 800019c:	2208      	movs	r2, #8
 800019e:	49b7      	ldr	r1, [pc, #732]	; (800047c <main+0x330>)
 80001a0:	48b7      	ldr	r0, [pc, #732]	; (8000480 <main+0x334>)
 80001a2:	f006 f8e3 	bl	800636c <USBD_HID_SendReport>

      HAL_Delay(50);
 80001a6:	2032      	movs	r0, #50	; 0x32
 80001a8:	f000 ff44 	bl	8001034 <HAL_Delay>


      keyboardhid.KEYCODE1 = 0x13;
 80001ac:	4bb3      	ldr	r3, [pc, #716]	; (800047c <main+0x330>)
 80001ae:	2213      	movs	r2, #19
 80001b0:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x12;
 80001b2:	4bb2      	ldr	r3, [pc, #712]	; (800047c <main+0x330>)
 80001b4:	2212      	movs	r2, #18
 80001b6:	70da      	strb	r2, [r3, #3]
      keyboardhid.KEYCODE3 = 0x1A;
 80001b8:	4bb0      	ldr	r3, [pc, #704]	; (800047c <main+0x330>)
 80001ba:	221a      	movs	r2, #26
 80001bc:	711a      	strb	r2, [r3, #4]
      keyboardhid.KEYCODE4 = 0x08;
 80001be:	4baf      	ldr	r3, [pc, #700]	; (800047c <main+0x330>)
 80001c0:	2208      	movs	r2, #8
 80001c2:	715a      	strb	r2, [r3, #5]
      keyboardhid.KEYCODE5 = 0x15;
 80001c4:	4bad      	ldr	r3, [pc, #692]	; (800047c <main+0x330>)
 80001c6:	2215      	movs	r2, #21
 80001c8:	719a      	strb	r2, [r3, #6]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press power
 80001ca:	2208      	movs	r2, #8
 80001cc:	49ab      	ldr	r1, [pc, #684]	; (800047c <main+0x330>)
 80001ce:	48ac      	ldr	r0, [pc, #688]	; (8000480 <main+0x334>)
 80001d0:	f006 f8cc 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 80001d4:	2014      	movs	r0, #20
 80001d6:	f000 ff2d 	bl	8001034 <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;
 80001da:	4ba8      	ldr	r3, [pc, #672]	; (800047c <main+0x330>)
 80001dc:	2200      	movs	r2, #0
 80001de:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x00;
 80001e0:	4ba6      	ldr	r3, [pc, #664]	; (800047c <main+0x330>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	70da      	strb	r2, [r3, #3]
      keyboardhid.KEYCODE3 = 0x00;
 80001e6:	4ba5      	ldr	r3, [pc, #660]	; (800047c <main+0x330>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	711a      	strb	r2, [r3, #4]
      keyboardhid.KEYCODE4 = 0x00;
 80001ec:	4ba3      	ldr	r3, [pc, #652]	; (800047c <main+0x330>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	715a      	strb	r2, [r3, #5]
      keyboardhid.KEYCODE5 = 0x00;
 80001f2:	4ba2      	ldr	r3, [pc, #648]	; (800047c <main+0x330>)
 80001f4:	2200      	movs	r2, #0
 80001f6:	719a      	strb	r2, [r3, #6]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80001f8:	2208      	movs	r2, #8
 80001fa:	49a0      	ldr	r1, [pc, #640]	; (800047c <main+0x330>)
 80001fc:	48a0      	ldr	r0, [pc, #640]	; (8000480 <main+0x334>)
 80001fe:	f006 f8b5 	bl	800636c <USBD_HID_SendReport>

      HAL_Delay(20);
 8000202:	2014      	movs	r0, #20
 8000204:	f000 ff16 	bl	8001034 <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x16;
 8000208:	4b9c      	ldr	r3, [pc, #624]	; (800047c <main+0x330>)
 800020a:	2216      	movs	r2, #22
 800020c:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x0B;
 800020e:	4b9b      	ldr	r3, [pc, #620]	; (800047c <main+0x330>)
 8000210:	220b      	movs	r2, #11
 8000212:	70da      	strb	r2, [r3, #3]
      keyboardhid.KEYCODE3 = 0x08;
 8000214:	4b99      	ldr	r3, [pc, #612]	; (800047c <main+0x330>)
 8000216:	2208      	movs	r2, #8
 8000218:	711a      	strb	r2, [r3, #4]
      keyboardhid.KEYCODE4 = 0x0F;
 800021a:	4b98      	ldr	r3, [pc, #608]	; (800047c <main+0x330>)
 800021c:	220f      	movs	r2, #15
 800021e:	715a      	strb	r2, [r3, #5]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press shel
 8000220:	2208      	movs	r2, #8
 8000222:	4996      	ldr	r1, [pc, #600]	; (800047c <main+0x330>)
 8000224:	4896      	ldr	r0, [pc, #600]	; (8000480 <main+0x334>)
 8000226:	f006 f8a1 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 800022a:	2014      	movs	r0, #20
 800022c:	f000 ff02 	bl	8001034 <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;
 8000230:	4b92      	ldr	r3, [pc, #584]	; (800047c <main+0x330>)
 8000232:	2200      	movs	r2, #0
 8000234:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x00;
 8000236:	4b91      	ldr	r3, [pc, #580]	; (800047c <main+0x330>)
 8000238:	2200      	movs	r2, #0
 800023a:	70da      	strb	r2, [r3, #3]
      keyboardhid.KEYCODE3 = 0x00;
 800023c:	4b8f      	ldr	r3, [pc, #572]	; (800047c <main+0x330>)
 800023e:	2200      	movs	r2, #0
 8000240:	711a      	strb	r2, [r3, #4]
      keyboardhid.KEYCODE4 = 0x00;
 8000242:	4b8e      	ldr	r3, [pc, #568]	; (800047c <main+0x330>)
 8000244:	2200      	movs	r2, #0
 8000246:	715a      	strb	r2, [r3, #5]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000248:	2208      	movs	r2, #8
 800024a:	498c      	ldr	r1, [pc, #560]	; (800047c <main+0x330>)
 800024c:	488c      	ldr	r0, [pc, #560]	; (8000480 <main+0x334>)
 800024e:	f006 f88d 	bl	800636c <USBD_HID_SendReport>

      HAL_Delay(20);
 8000252:	2014      	movs	r0, #20
 8000254:	f000 feee 	bl	8001034 <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x0F;
 8000258:	4b88      	ldr	r3, [pc, #544]	; (800047c <main+0x330>)
 800025a:	220f      	movs	r2, #15
 800025c:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press l
 800025e:	2208      	movs	r2, #8
 8000260:	4986      	ldr	r1, [pc, #536]	; (800047c <main+0x330>)
 8000262:	4887      	ldr	r0, [pc, #540]	; (8000480 <main+0x334>)
 8000264:	f006 f882 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 8000268:	2014      	movs	r0, #20
 800026a:	f000 fee3 	bl	8001034 <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;
 800026e:	4b83      	ldr	r3, [pc, #524]	; (800047c <main+0x330>)
 8000270:	2200      	movs	r2, #0
 8000272:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000274:	2208      	movs	r2, #8
 8000276:	4981      	ldr	r1, [pc, #516]	; (800047c <main+0x330>)
 8000278:	4881      	ldr	r0, [pc, #516]	; (8000480 <main+0x334>)
 800027a:	f006 f877 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 800027e:	2014      	movs	r0, #20
 8000280:	f000 fed8 	bl	8001034 <HAL_Delay>

      keyboardhid.MODIFIER = 0x03;
 8000284:	4b7d      	ldr	r3, [pc, #500]	; (800047c <main+0x330>)
 8000286:	2203      	movs	r2, #3
 8000288:	701a      	strb	r2, [r3, #0]
      keyboardhid.KEYCODE1 = 0x28;
 800028a:	4b7c      	ldr	r3, [pc, #496]	; (800047c <main+0x330>)
 800028c:	2228      	movs	r2, #40	; 0x28
 800028e:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <Ctrl + Shift + ENTER>
 8000290:	2208      	movs	r2, #8
 8000292:	497a      	ldr	r1, [pc, #488]	; (800047c <main+0x330>)
 8000294:	487a      	ldr	r0, [pc, #488]	; (8000480 <main+0x334>)
 8000296:	f006 f869 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 800029a:	2014      	movs	r0, #20
 800029c:	f000 feca 	bl	8001034 <HAL_Delay>
      keyboardhid.MODIFIER = 0x00;
 80002a0:	4b76      	ldr	r3, [pc, #472]	; (800047c <main+0x330>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	701a      	strb	r2, [r3, #0]
      keyboardhid.KEYCODE1 = 0x00;
 80002a6:	4b75      	ldr	r3, [pc, #468]	; (800047c <main+0x330>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80002ac:	2208      	movs	r2, #8
 80002ae:	4973      	ldr	r1, [pc, #460]	; (800047c <main+0x330>)
 80002b0:	4873      	ldr	r0, [pc, #460]	; (8000480 <main+0x334>)
 80002b2:	f006 f85b 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(1000);
 80002b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ba:	f000 febb 	bl	8001034 <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x50;
 80002be:	4b6f      	ldr	r3, [pc, #444]	; (800047c <main+0x330>)
 80002c0:	2250      	movs	r2, #80	; 0x50
 80002c2:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x28;
 80002c4:	4b6d      	ldr	r3, [pc, #436]	; (800047c <main+0x330>)
 80002c6:	2228      	movs	r2, #40	; 0x28
 80002c8:	70da      	strb	r2, [r3, #3]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <left arrow + ENTER>
 80002ca:	2208      	movs	r2, #8
 80002cc:	496b      	ldr	r1, [pc, #428]	; (800047c <main+0x330>)
 80002ce:	486c      	ldr	r0, [pc, #432]	; (8000480 <main+0x334>)
 80002d0:	f006 f84c 	bl	800636c <USBD_HID_SendReport>
      HAL_Delay(20);
 80002d4:	2014      	movs	r0, #20
 80002d6:	f000 fead 	bl	8001034 <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;
 80002da:	4b68      	ldr	r3, [pc, #416]	; (800047c <main+0x330>)
 80002dc:	2200      	movs	r2, #0
 80002de:	709a      	strb	r2, [r3, #2]
      keyboardhid.KEYCODE2 = 0x00;
 80002e0:	4b66      	ldr	r3, [pc, #408]	; (800047c <main+0x330>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	70da      	strb	r2, [r3, #3]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80002e6:	2208      	movs	r2, #8
 80002e8:	4964      	ldr	r1, [pc, #400]	; (800047c <main+0x330>)
 80002ea:	4865      	ldr	r0, [pc, #404]	; (8000480 <main+0x334>)
 80002ec:	f006 f83e 	bl	800636c <USBD_HID_SendReport>


      //----------------------------
      HAL_Delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f000 fe9e 	bl	8001034 <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x16;
 80002f8:	4b60      	ldr	r3, [pc, #384]	; (800047c <main+0x330>)
 80002fa:	2216      	movs	r2, #22
 80002fc:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x08;
 80002fe:	4b5f      	ldr	r3, [pc, #380]	; (800047c <main+0x330>)
 8000300:	2208      	movs	r2, #8
 8000302:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x17;
 8000304:	4b5d      	ldr	r3, [pc, #372]	; (800047c <main+0x330>)
 8000306:	2217      	movs	r2, #23
 8000308:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x2D;
 800030a:	4b5c      	ldr	r3, [pc, #368]	; (800047c <main+0x330>)
 800030c:	222d      	movs	r2, #45	; 0x2d
 800030e:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press set-
 8000310:	2208      	movs	r2, #8
 8000312:	495a      	ldr	r1, [pc, #360]	; (800047c <main+0x330>)
 8000314:	485a      	ldr	r0, [pc, #360]	; (8000480 <main+0x334>)
 8000316:	f006 f829 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800031a:	2014      	movs	r0, #20
 800031c:	f000 fe8a 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000320:	4b56      	ldr	r3, [pc, #344]	; (800047c <main+0x330>)
 8000322:	2200      	movs	r2, #0
 8000324:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000326:	4b55      	ldr	r3, [pc, #340]	; (800047c <main+0x330>)
 8000328:	2200      	movs	r2, #0
 800032a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 800032c:	4b53      	ldr	r3, [pc, #332]	; (800047c <main+0x330>)
 800032e:	2200      	movs	r2, #0
 8000330:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000332:	4b52      	ldr	r3, [pc, #328]	; (800047c <main+0x330>)
 8000334:	2200      	movs	r2, #0
 8000336:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000338:	2208      	movs	r2, #8
 800033a:	4950      	ldr	r1, [pc, #320]	; (800047c <main+0x330>)
 800033c:	4850      	ldr	r0, [pc, #320]	; (8000480 <main+0x334>)
 800033e:	f006 f815 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000342:	2014      	movs	r0, #20
 8000344:	f000 fe76 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x08;
 8000348:	4b4c      	ldr	r3, [pc, #304]	; (800047c <main+0x330>)
 800034a:	2208      	movs	r2, #8
 800034c:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1B;
 800034e:	4b4b      	ldr	r3, [pc, #300]	; (800047c <main+0x330>)
 8000350:	221b      	movs	r2, #27
 8000352:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ex
 8000354:	2208      	movs	r2, #8
 8000356:	4949      	ldr	r1, [pc, #292]	; (800047c <main+0x330>)
 8000358:	4849      	ldr	r0, [pc, #292]	; (8000480 <main+0x334>)
 800035a:	f006 f807 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800035e:	2014      	movs	r0, #20
 8000360:	f000 fe68 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000364:	4b45      	ldr	r3, [pc, #276]	; (800047c <main+0x330>)
 8000366:	2200      	movs	r2, #0
 8000368:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 800036a:	4b44      	ldr	r3, [pc, #272]	; (800047c <main+0x330>)
 800036c:	2200      	movs	r2, #0
 800036e:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000370:	2208      	movs	r2, #8
 8000372:	4942      	ldr	r1, [pc, #264]	; (800047c <main+0x330>)
 8000374:	4842      	ldr	r0, [pc, #264]	; (8000480 <main+0x334>)
 8000376:	f005 fff9 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800037a:	2014      	movs	r0, #20
 800037c:	f000 fe5a 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x08;
 8000380:	4b3e      	ldr	r3, [pc, #248]	; (800047c <main+0x330>)
 8000382:	2208      	movs	r2, #8
 8000384:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x06;
 8000386:	4b3d      	ldr	r3, [pc, #244]	; (800047c <main+0x330>)
 8000388:	2206      	movs	r2, #6
 800038a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x18;
 800038c:	4b3b      	ldr	r3, [pc, #236]	; (800047c <main+0x330>)
 800038e:	2218      	movs	r2, #24
 8000390:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x17;
 8000392:	4b3a      	ldr	r3, [pc, #232]	; (800047c <main+0x330>)
 8000394:	2217      	movs	r2, #23
 8000396:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x0C;
 8000398:	4b38      	ldr	r3, [pc, #224]	; (800047c <main+0x330>)
 800039a:	220c      	movs	r2, #12
 800039c:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x12;
 800039e:	4b37      	ldr	r3, [pc, #220]	; (800047c <main+0x330>)
 80003a0:	2212      	movs	r2, #18
 80003a2:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ecutio
 80003a4:	2208      	movs	r2, #8
 80003a6:	4935      	ldr	r1, [pc, #212]	; (800047c <main+0x330>)
 80003a8:	4835      	ldr	r0, [pc, #212]	; (8000480 <main+0x334>)
 80003aa:	f005 ffdf 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80003ae:	2014      	movs	r0, #20
 80003b0:	f000 fe40 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80003b4:	4b31      	ldr	r3, [pc, #196]	; (800047c <main+0x330>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80003ba:	4b30      	ldr	r3, [pc, #192]	; (800047c <main+0x330>)
 80003bc:	2200      	movs	r2, #0
 80003be:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 80003c0:	4b2e      	ldr	r3, [pc, #184]	; (800047c <main+0x330>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 80003c6:	4b2d      	ldr	r3, [pc, #180]	; (800047c <main+0x330>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 80003cc:	4b2b      	ldr	r3, [pc, #172]	; (800047c <main+0x330>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <main+0x330>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80003d8:	2208      	movs	r2, #8
 80003da:	4928      	ldr	r1, [pc, #160]	; (800047c <main+0x330>)
 80003dc:	4828      	ldr	r0, [pc, #160]	; (8000480 <main+0x334>)
 80003de:	f005 ffc5 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80003e2:	2014      	movs	r0, #20
 80003e4:	f000 fe26 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x11;
 80003e8:	4b24      	ldr	r3, [pc, #144]	; (800047c <main+0x330>)
 80003ea:	2211      	movs	r2, #17
 80003ec:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x13;
 80003ee:	4b23      	ldr	r3, [pc, #140]	; (800047c <main+0x330>)
 80003f0:	2213      	movs	r2, #19
 80003f2:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x12;
 80003f4:	4b21      	ldr	r3, [pc, #132]	; (800047c <main+0x330>)
 80003f6:	2212      	movs	r2, #18
 80003f8:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x0F;
 80003fa:	4b20      	ldr	r3, [pc, #128]	; (800047c <main+0x330>)
 80003fc:	220f      	movs	r2, #15
 80003fe:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x0C;
 8000400:	4b1e      	ldr	r3, [pc, #120]	; (800047c <main+0x330>)
 8000402:	220c      	movs	r2, #12
 8000404:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x06;
 8000406:	4b1d      	ldr	r3, [pc, #116]	; (800047c <main+0x330>)
 8000408:	2206      	movs	r2, #6
 800040a:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press npolic
 800040c:	2208      	movs	r2, #8
 800040e:	491b      	ldr	r1, [pc, #108]	; (800047c <main+0x330>)
 8000410:	481b      	ldr	r0, [pc, #108]	; (8000480 <main+0x334>)
 8000412:	f005 ffab 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000416:	2014      	movs	r0, #20
 8000418:	f000 fe0c 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <main+0x330>)
 800041e:	2200      	movs	r2, #0
 8000420:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <main+0x330>)
 8000424:	2200      	movs	r2, #0
 8000426:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <main+0x330>)
 800042a:	2200      	movs	r2, #0
 800042c:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 800042e:	4b13      	ldr	r3, [pc, #76]	; (800047c <main+0x330>)
 8000430:	2200      	movs	r2, #0
 8000432:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <main+0x330>)
 8000436:	2200      	movs	r2, #0
 8000438:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <main+0x330>)
 800043c:	2200      	movs	r2, #0
 800043e:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000440:	2208      	movs	r2, #8
 8000442:	490e      	ldr	r1, [pc, #56]	; (800047c <main+0x330>)
 8000444:	480e      	ldr	r0, [pc, #56]	; (8000480 <main+0x334>)
 8000446:	f005 ff91 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800044a:	2014      	movs	r0, #20
 800044c:	f000 fdf2 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x1C;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <main+0x330>)
 8000452:	221c      	movs	r2, #28
 8000454:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x2C;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <main+0x330>)
 8000458:	222c      	movs	r2, #44	; 0x2c
 800045a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x18;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <main+0x330>)
 800045e:	2218      	movs	r2, #24
 8000460:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x11;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <main+0x330>)
 8000464:	2211      	movs	r2, #17
 8000466:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x15;
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <main+0x330>)
 800046a:	2215      	movs	r2, #21
 800046c:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x08;
 800046e:	4b03      	ldr	r3, [pc, #12]	; (800047c <main+0x330>)
 8000470:	2208      	movs	r2, #8
 8000472:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press y unre
 8000474:	2208      	movs	r2, #8
 8000476:	e005      	b.n	8000484 <main+0x338>
 8000478:	40011000 	.word	0x40011000
 800047c:	20000174 	.word	0x20000174
 8000480:	20000184 	.word	0x20000184
 8000484:	49c2      	ldr	r1, [pc, #776]	; (8000790 <main+0x644>)
 8000486:	48c3      	ldr	r0, [pc, #780]	; (8000794 <main+0x648>)
 8000488:	f005 ff70 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f000 fdd1 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000492:	4bbf      	ldr	r3, [pc, #764]	; (8000790 <main+0x644>)
 8000494:	2200      	movs	r2, #0
 8000496:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000498:	4bbd      	ldr	r3, [pc, #756]	; (8000790 <main+0x644>)
 800049a:	2200      	movs	r2, #0
 800049c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 800049e:	4bbc      	ldr	r3, [pc, #752]	; (8000790 <main+0x644>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 80004a4:	4bba      	ldr	r3, [pc, #744]	; (8000790 <main+0x644>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 80004aa:	4bb9      	ldr	r3, [pc, #740]	; (8000790 <main+0x644>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 80004b0:	4bb7      	ldr	r3, [pc, #732]	; (8000790 <main+0x644>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80004b6:	2208      	movs	r2, #8
 80004b8:	49b5      	ldr	r1, [pc, #724]	; (8000790 <main+0x644>)
 80004ba:	48b6      	ldr	r0, [pc, #728]	; (8000794 <main+0x648>)
 80004bc:	f005 ff56 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80004c0:	2014      	movs	r0, #20
 80004c2:	f000 fdb7 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x16;
 80004c6:	4bb2      	ldr	r3, [pc, #712]	; (8000790 <main+0x644>)
 80004c8:	2216      	movs	r2, #22
 80004ca:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x17;
 80004cc:	4bb0      	ldr	r3, [pc, #704]	; (8000790 <main+0x644>)
 80004ce:	2217      	movs	r2, #23
 80004d0:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x15;
 80004d2:	4baf      	ldr	r3, [pc, #700]	; (8000790 <main+0x644>)
 80004d4:	2215      	movs	r2, #21
 80004d6:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x0C;
 80004d8:	4bad      	ldr	r3, [pc, #692]	; (8000790 <main+0x644>)
 80004da:	220c      	movs	r2, #12
 80004dc:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x06;
 80004de:	4bac      	ldr	r3, [pc, #688]	; (8000790 <main+0x644>)
 80004e0:	2206      	movs	r2, #6
 80004e2:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press stric
 80004e4:	2208      	movs	r2, #8
 80004e6:	49aa      	ldr	r1, [pc, #680]	; (8000790 <main+0x644>)
 80004e8:	48aa      	ldr	r0, [pc, #680]	; (8000794 <main+0x648>)
 80004ea:	f005 ff3f 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80004ee:	2014      	movs	r0, #20
 80004f0:	f000 fda0 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80004f4:	4ba6      	ldr	r3, [pc, #664]	; (8000790 <main+0x644>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80004fa:	4ba5      	ldr	r3, [pc, #660]	; (8000790 <main+0x644>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000500:	4ba3      	ldr	r3, [pc, #652]	; (8000790 <main+0x644>)
 8000502:	2200      	movs	r2, #0
 8000504:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000506:	4ba2      	ldr	r3, [pc, #648]	; (8000790 <main+0x644>)
 8000508:	2200      	movs	r2, #0
 800050a:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 800050c:	4ba0      	ldr	r3, [pc, #640]	; (8000790 <main+0x644>)
 800050e:	2200      	movs	r2, #0
 8000510:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000512:	2208      	movs	r2, #8
 8000514:	499e      	ldr	r1, [pc, #632]	; (8000790 <main+0x644>)
 8000516:	489f      	ldr	r0, [pc, #636]	; (8000794 <main+0x648>)
 8000518:	f005 ff28 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800051c:	2014      	movs	r0, #20
 800051e:	f000 fd89 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x17;
 8000522:	4b9b      	ldr	r3, [pc, #620]	; (8000790 <main+0x644>)
 8000524:	2217      	movs	r2, #23
 8000526:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x08;
 8000528:	4b99      	ldr	r3, [pc, #612]	; (8000790 <main+0x644>)
 800052a:	2208      	movs	r2, #8
 800052c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x07;
 800052e:	4b98      	ldr	r3, [pc, #608]	; (8000790 <main+0x644>)
 8000530:	2207      	movs	r2, #7
 8000532:	711a      	strb	r2, [r3, #4]
      keyboardhid.KEYCODE4 = 0x28;
 8000534:	4b96      	ldr	r3, [pc, #600]	; (8000790 <main+0x644>)
 8000536:	2228      	movs	r2, #40	; 0x28
 8000538:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ted <ENTER>
 800053a:	2208      	movs	r2, #8
 800053c:	4994      	ldr	r1, [pc, #592]	; (8000790 <main+0x644>)
 800053e:	4895      	ldr	r0, [pc, #596]	; (8000794 <main+0x648>)
 8000540:	f005 ff14 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000544:	2014      	movs	r0, #20
 8000546:	f000 fd75 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 800054a:	4b91      	ldr	r3, [pc, #580]	; (8000790 <main+0x644>)
 800054c:	2200      	movs	r2, #0
 800054e:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000550:	4b8f      	ldr	r3, [pc, #572]	; (8000790 <main+0x644>)
 8000552:	2200      	movs	r2, #0
 8000554:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000556:	4b8e      	ldr	r3, [pc, #568]	; (8000790 <main+0x644>)
 8000558:	2200      	movs	r2, #0
 800055a:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 800055c:	4b8c      	ldr	r3, [pc, #560]	; (8000790 <main+0x644>)
 800055e:	2200      	movs	r2, #0
 8000560:	715a      	strb	r2, [r3, #5]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000562:	2208      	movs	r2, #8
 8000564:	498a      	ldr	r1, [pc, #552]	; (8000790 <main+0x644>)
 8000566:	488b      	ldr	r0, [pc, #556]	; (8000794 <main+0x648>)
 8000568:	f005 ff00 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800056c:	2014      	movs	r0, #20
 800056e:	f000 fd61 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE2 = 0x00;
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
	  HAL_Delay(20); */


	  keyboardhid.KEYCODE1 = 0x0C;
 8000572:	4b87      	ldr	r3, [pc, #540]	; (8000790 <main+0x644>)
 8000574:	220c      	movs	r2, #12
 8000576:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x11;
 8000578:	4b85      	ldr	r3, [pc, #532]	; (8000790 <main+0x644>)
 800057a:	2211      	movs	r2, #17
 800057c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x19;
 800057e:	4b84      	ldr	r3, [pc, #528]	; (8000790 <main+0x644>)
 8000580:	2219      	movs	r2, #25
 8000582:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x12;
 8000584:	4b82      	ldr	r3, [pc, #520]	; (8000790 <main+0x644>)
 8000586:	2212      	movs	r2, #18
 8000588:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x0E;
 800058a:	4b81      	ldr	r3, [pc, #516]	; (8000790 <main+0x644>)
 800058c:	220e      	movs	r2, #14
 800058e:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x08;
 8000590:	4b7f      	ldr	r3, [pc, #508]	; (8000790 <main+0x644>)
 8000592:	2208      	movs	r2, #8
 8000594:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press invoke
 8000596:	2208      	movs	r2, #8
 8000598:	497d      	ldr	r1, [pc, #500]	; (8000790 <main+0x644>)
 800059a:	487e      	ldr	r0, [pc, #504]	; (8000794 <main+0x648>)
 800059c:	f005 fee6 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80005a0:	2014      	movs	r0, #20
 80005a2:	f000 fd47 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80005a6:	4b7a      	ldr	r3, [pc, #488]	; (8000790 <main+0x644>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80005ac:	4b78      	ldr	r3, [pc, #480]	; (8000790 <main+0x644>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 80005b2:	4b77      	ldr	r3, [pc, #476]	; (8000790 <main+0x644>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 80005b8:	4b75      	ldr	r3, [pc, #468]	; (8000790 <main+0x644>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 80005be:	4b74      	ldr	r3, [pc, #464]	; (8000790 <main+0x644>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 80005c4:	4b72      	ldr	r3, [pc, #456]	; (8000790 <main+0x644>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80005ca:	2208      	movs	r2, #8
 80005cc:	4970      	ldr	r1, [pc, #448]	; (8000790 <main+0x644>)
 80005ce:	4871      	ldr	r0, [pc, #452]	; (8000794 <main+0x648>)
 80005d0:	f005 fecc 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80005d4:	2014      	movs	r0, #20
 80005d6:	f000 fd2d 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x2D;
 80005da:	4b6d      	ldr	r3, [pc, #436]	; (8000790 <main+0x644>)
 80005dc:	222d      	movs	r2, #45	; 0x2d
 80005de:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1A;
 80005e0:	4b6b      	ldr	r3, [pc, #428]	; (8000790 <main+0x644>)
 80005e2:	221a      	movs	r2, #26
 80005e4:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x08;
 80005e6:	4b6a      	ldr	r3, [pc, #424]	; (8000790 <main+0x644>)
 80005e8:	2208      	movs	r2, #8
 80005ea:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x05;
 80005ec:	4b68      	ldr	r3, [pc, #416]	; (8000790 <main+0x644>)
 80005ee:	2205      	movs	r2, #5
 80005f0:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x15;
 80005f2:	4b67      	ldr	r3, [pc, #412]	; (8000790 <main+0x644>)
 80005f4:	2215      	movs	r2, #21
 80005f6:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x08;
 80005f8:	4b65      	ldr	r3, [pc, #404]	; (8000790 <main+0x644>)
 80005fa:	2208      	movs	r2, #8
 80005fc:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press -webre
 80005fe:	2208      	movs	r2, #8
 8000600:	4963      	ldr	r1, [pc, #396]	; (8000790 <main+0x644>)
 8000602:	4864      	ldr	r0, [pc, #400]	; (8000794 <main+0x648>)
 8000604:	f005 feb2 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000608:	2014      	movs	r0, #20
 800060a:	f000 fd13 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 800060e:	4b60      	ldr	r3, [pc, #384]	; (8000790 <main+0x644>)
 8000610:	2200      	movs	r2, #0
 8000612:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000614:	4b5e      	ldr	r3, [pc, #376]	; (8000790 <main+0x644>)
 8000616:	2200      	movs	r2, #0
 8000618:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 800061a:	4b5d      	ldr	r3, [pc, #372]	; (8000790 <main+0x644>)
 800061c:	2200      	movs	r2, #0
 800061e:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000620:	4b5b      	ldr	r3, [pc, #364]	; (8000790 <main+0x644>)
 8000622:	2200      	movs	r2, #0
 8000624:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000626:	4b5a      	ldr	r3, [pc, #360]	; (8000790 <main+0x644>)
 8000628:	2200      	movs	r2, #0
 800062a:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 800062c:	4b58      	ldr	r3, [pc, #352]	; (8000790 <main+0x644>)
 800062e:	2200      	movs	r2, #0
 8000630:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000632:	2208      	movs	r2, #8
 8000634:	4956      	ldr	r1, [pc, #344]	; (8000790 <main+0x644>)
 8000636:	4857      	ldr	r0, [pc, #348]	; (8000794 <main+0x648>)
 8000638:	f005 fe98 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800063c:	2014      	movs	r0, #20
 800063e:	f000 fcf9 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x14;
 8000642:	4b53      	ldr	r3, [pc, #332]	; (8000790 <main+0x644>)
 8000644:	2214      	movs	r2, #20
 8000646:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x18;
 8000648:	4b51      	ldr	r3, [pc, #324]	; (8000790 <main+0x644>)
 800064a:	2218      	movs	r2, #24
 800064c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x08;
 800064e:	4b50      	ldr	r3, [pc, #320]	; (8000790 <main+0x644>)
 8000650:	2208      	movs	r2, #8
 8000652:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x16;
 8000654:	4b4e      	ldr	r3, [pc, #312]	; (8000790 <main+0x644>)
 8000656:	2216      	movs	r2, #22
 8000658:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x17;
 800065a:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <main+0x644>)
 800065c:	2217      	movs	r2, #23
 800065e:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x2C;
 8000660:	4b4b      	ldr	r3, [pc, #300]	; (8000790 <main+0x644>)
 8000662:	222c      	movs	r2, #44	; 0x2c
 8000664:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press quest
 8000666:	2208      	movs	r2, #8
 8000668:	4949      	ldr	r1, [pc, #292]	; (8000790 <main+0x644>)
 800066a:	484a      	ldr	r0, [pc, #296]	; (8000794 <main+0x648>)
 800066c:	f005 fe7e 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000670:	2014      	movs	r0, #20
 8000672:	f000 fcdf 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000676:	4b46      	ldr	r3, [pc, #280]	; (8000790 <main+0x644>)
 8000678:	2200      	movs	r2, #0
 800067a:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 800067c:	4b44      	ldr	r3, [pc, #272]	; (8000790 <main+0x644>)
 800067e:	2200      	movs	r2, #0
 8000680:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000682:	4b43      	ldr	r3, [pc, #268]	; (8000790 <main+0x644>)
 8000684:	2200      	movs	r2, #0
 8000686:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000688:	4b41      	ldr	r3, [pc, #260]	; (8000790 <main+0x644>)
 800068a:	2200      	movs	r2, #0
 800068c:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <main+0x644>)
 8000690:	2200      	movs	r2, #0
 8000692:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <main+0x644>)
 8000696:	2200      	movs	r2, #0
 8000698:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800069a:	2208      	movs	r2, #8
 800069c:	493c      	ldr	r1, [pc, #240]	; (8000790 <main+0x644>)
 800069e:	483d      	ldr	r0, [pc, #244]	; (8000794 <main+0x648>)
 80006a0:	f005 fe64 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80006a4:	2014      	movs	r0, #20
 80006a6:	f000 fcc5 	bl	8001034 <HAL_Delay>

	  HAL_Delay(20);
 80006aa:	2014      	movs	r0, #20
 80006ac:	f000 fcc2 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x2D;
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <main+0x644>)
 80006b2:	222d      	movs	r2, #45	; 0x2d
 80006b4:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x18;
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <main+0x644>)
 80006b8:	2218      	movs	r2, #24
 80006ba:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x15;
 80006bc:	4b34      	ldr	r3, [pc, #208]	; (8000790 <main+0x644>)
 80006be:	2215      	movs	r2, #21
 80006c0:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x0C;
 80006c2:	4b33      	ldr	r3, [pc, #204]	; (8000790 <main+0x644>)
 80006c4:	220c      	movs	r2, #12
 80006c6:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x2C;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <main+0x644>)
 80006ca:	222c      	movs	r2, #44	; 0x2c
 80006cc:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x34;
 80006ce:	4b30      	ldr	r3, [pc, #192]	; (8000790 <main+0x644>)
 80006d0:	2234      	movs	r2, #52	; 0x34
 80006d2:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press -uri '
 80006d4:	2208      	movs	r2, #8
 80006d6:	492e      	ldr	r1, [pc, #184]	; (8000790 <main+0x644>)
 80006d8:	482e      	ldr	r0, [pc, #184]	; (8000794 <main+0x648>)
 80006da:	f005 fe47 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80006de:	2014      	movs	r0, #20
 80006e0:	f000 fca8 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <main+0x644>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <main+0x644>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <main+0x644>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 80006f6:	4b26      	ldr	r3, [pc, #152]	; (8000790 <main+0x644>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <main+0x644>)
 80006fe:	2200      	movs	r2, #0
 8000700:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <main+0x644>)
 8000704:	2200      	movs	r2, #0
 8000706:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000708:	2208      	movs	r2, #8
 800070a:	4921      	ldr	r1, [pc, #132]	; (8000790 <main+0x644>)
 800070c:	4821      	ldr	r0, [pc, #132]	; (8000794 <main+0x648>)
 800070e:	f005 fe2d 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000712:	2014      	movs	r0, #20
 8000714:	f000 fc8e 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x0B;
 8000718:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <main+0x644>)
 800071a:	220b      	movs	r2, #11
 800071c:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x17;
 800071e:	4b1c      	ldr	r3, [pc, #112]	; (8000790 <main+0x644>)
 8000720:	2217      	movs	r2, #23
 8000722:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ht
 8000724:	2208      	movs	r2, #8
 8000726:	491a      	ldr	r1, [pc, #104]	; (8000790 <main+0x644>)
 8000728:	481a      	ldr	r0, [pc, #104]	; (8000794 <main+0x648>)
 800072a:	f005 fe1f 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800072e:	2014      	movs	r0, #20
 8000730:	f000 fc80 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000734:	4b16      	ldr	r3, [pc, #88]	; (8000790 <main+0x644>)
 8000736:	2200      	movs	r2, #0
 8000738:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <main+0x644>)
 800073c:	2200      	movs	r2, #0
 800073e:	70da      	strb	r2, [r3, #3]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000740:	2208      	movs	r2, #8
 8000742:	4913      	ldr	r1, [pc, #76]	; (8000790 <main+0x644>)
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <main+0x648>)
 8000746:	f005 fe11 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800074a:	2014      	movs	r0, #20
 800074c:	f000 fc72 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x17;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <main+0x644>)
 8000752:	2217      	movs	r2, #23
 8000754:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x13;
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <main+0x644>)
 8000758:	2213      	movs	r2, #19
 800075a:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press tp
 800075c:	2208      	movs	r2, #8
 800075e:	490c      	ldr	r1, [pc, #48]	; (8000790 <main+0x644>)
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <main+0x648>)
 8000762:	f005 fe03 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000766:	2014      	movs	r0, #20
 8000768:	f000 fc64 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <main+0x644>)
 800076e:	2200      	movs	r2, #0
 8000770:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000772:	4b07      	ldr	r3, [pc, #28]	; (8000790 <main+0x644>)
 8000774:	2200      	movs	r2, #0
 8000776:	70da      	strb	r2, [r3, #3]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000778:	2208      	movs	r2, #8
 800077a:	4905      	ldr	r1, [pc, #20]	; (8000790 <main+0x644>)
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <main+0x648>)
 800077e:	f005 fdf5 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000782:	2014      	movs	r0, #20
 8000784:	f000 fc56 	bl	8001034 <HAL_Delay>


	  keyboardhid.MODIFIER = 0x02;
 8000788:	4b01      	ldr	r3, [pc, #4]	; (8000790 <main+0x644>)
 800078a:	2202      	movs	r2, #2
 800078c:	701a      	strb	r2, [r3, #0]
 800078e:	e003      	b.n	8000798 <main+0x64c>
 8000790:	20000174 	.word	0x20000174
 8000794:	20000184 	.word	0x20000184
	  keyboardhid.KEYCODE1 = 0x33;
 8000798:	4bc2      	ldr	r3, [pc, #776]	; (8000aa4 <main+0x958>)
 800079a:	2233      	movs	r2, #51	; 0x33
 800079c:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press :
 800079e:	2208      	movs	r2, #8
 80007a0:	49c0      	ldr	r1, [pc, #768]	; (8000aa4 <main+0x958>)
 80007a2:	48c1      	ldr	r0, [pc, #772]	; (8000aa8 <main+0x95c>)
 80007a4:	f005 fde2 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80007a8:	2014      	movs	r0, #20
 80007aa:	f000 fc43 	bl	8001034 <HAL_Delay>
	  keyboardhid.MODIFIER = 0x00;
 80007ae:	4bbd      	ldr	r3, [pc, #756]	; (8000aa4 <main+0x958>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x00;                            //release :
 80007b4:	4bbb      	ldr	r3, [pc, #748]	; (8000aa4 <main+0x958>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80007ba:	2208      	movs	r2, #8
 80007bc:	49b9      	ldr	r1, [pc, #740]	; (8000aa4 <main+0x958>)
 80007be:	48ba      	ldr	r0, [pc, #744]	; (8000aa8 <main+0x95c>)
 80007c0:	f005 fdd4 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80007c4:	2014      	movs	r0, #20
 80007c6:	f000 fc35 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x38;
 80007ca:	4bb6      	ldr	r3, [pc, #728]	; (8000aa4 <main+0x958>)
 80007cc:	2238      	movs	r2, #56	; 0x38
 80007ce:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /
 80007d0:	2208      	movs	r2, #8
 80007d2:	49b4      	ldr	r1, [pc, #720]	; (8000aa4 <main+0x958>)
 80007d4:	48b4      	ldr	r0, [pc, #720]	; (8000aa8 <main+0x95c>)
 80007d6:	f005 fdc9 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80007da:	2014      	movs	r0, #20
 80007dc:	f000 fc2a 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;                            //release /
 80007e0:	4bb0      	ldr	r3, [pc, #704]	; (8000aa4 <main+0x958>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80007e6:	2208      	movs	r2, #8
 80007e8:	49ae      	ldr	r1, [pc, #696]	; (8000aa4 <main+0x958>)
 80007ea:	48af      	ldr	r0, [pc, #700]	; (8000aa8 <main+0x95c>)
 80007ec:	f005 fdbe 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80007f0:	2014      	movs	r0, #20
 80007f2:	f000 fc1f 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x38;
 80007f6:	4bab      	ldr	r3, [pc, #684]	; (8000aa4 <main+0x958>)
 80007f8:	2238      	movs	r2, #56	; 0x38
 80007fa:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1E;
 80007fc:	4ba9      	ldr	r3, [pc, #676]	; (8000aa4 <main+0x958>)
 80007fe:	221e      	movs	r2, #30
 8000800:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x24;
 8000802:	4ba8      	ldr	r3, [pc, #672]	; (8000aa4 <main+0x958>)
 8000804:	2224      	movs	r2, #36	; 0x24
 8000806:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x1F;
 8000808:	4ba6      	ldr	r3, [pc, #664]	; (8000aa4 <main+0x958>)
 800080a:	221f      	movs	r2, #31
 800080c:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x37;
 800080e:	4ba5      	ldr	r3, [pc, #660]	; (8000aa4 <main+0x958>)
 8000810:	2237      	movs	r2, #55	; 0x37
 8000812:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /172.
 8000814:	2208      	movs	r2, #8
 8000816:	49a3      	ldr	r1, [pc, #652]	; (8000aa4 <main+0x958>)
 8000818:	48a3      	ldr	r0, [pc, #652]	; (8000aa8 <main+0x95c>)
 800081a:	f005 fda7 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800081e:	2014      	movs	r0, #20
 8000820:	f000 fc08 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000824:	4b9f      	ldr	r3, [pc, #636]	; (8000aa4 <main+0x958>)
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 800082a:	4b9e      	ldr	r3, [pc, #632]	; (8000aa4 <main+0x958>)
 800082c:	2200      	movs	r2, #0
 800082e:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000830:	4b9c      	ldr	r3, [pc, #624]	; (8000aa4 <main+0x958>)
 8000832:	2200      	movs	r2, #0
 8000834:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000836:	4b9b      	ldr	r3, [pc, #620]	; (8000aa4 <main+0x958>)
 8000838:	2200      	movs	r2, #0
 800083a:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 800083c:	4b99      	ldr	r3, [pc, #612]	; (8000aa4 <main+0x958>)
 800083e:	2200      	movs	r2, #0
 8000840:	719a      	strb	r2, [r3, #6]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000842:	2208      	movs	r2, #8
 8000844:	4997      	ldr	r1, [pc, #604]	; (8000aa4 <main+0x958>)
 8000846:	4898      	ldr	r0, [pc, #608]	; (8000aa8 <main+0x95c>)
 8000848:	f005 fd90 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800084c:	2014      	movs	r0, #20
 800084e:	f000 fbf1 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x1F;
 8000852:	4b94      	ldr	r3, [pc, #592]	; (8000aa4 <main+0x958>)
 8000854:	221f      	movs	r2, #31
 8000856:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1E;
 8000858:	4b92      	ldr	r3, [pc, #584]	; (8000aa4 <main+0x958>)
 800085a:	221e      	movs	r2, #30
 800085c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x37;
 800085e:	4b91      	ldr	r3, [pc, #580]	; (8000aa4 <main+0x958>)
 8000860:	2237      	movs	r2, #55	; 0x37
 8000862:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x21;
 8000864:	4b8f      	ldr	r3, [pc, #572]	; (8000aa4 <main+0x958>)
 8000866:	2221      	movs	r2, #33	; 0x21
 8000868:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x26;
 800086a:	4b8e      	ldr	r3, [pc, #568]	; (8000aa4 <main+0x958>)
 800086c:	2226      	movs	r2, #38	; 0x26
 800086e:	719a      	strb	r2, [r3, #6]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 21.49
 8000870:	2208      	movs	r2, #8
 8000872:	498c      	ldr	r1, [pc, #560]	; (8000aa4 <main+0x958>)
 8000874:	488c      	ldr	r0, [pc, #560]	; (8000aa8 <main+0x95c>)
 8000876:	f005 fd79 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800087a:	2014      	movs	r0, #20
 800087c:	f000 fbda 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000880:	4b88      	ldr	r3, [pc, #544]	; (8000aa4 <main+0x958>)
 8000882:	2200      	movs	r2, #0
 8000884:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000886:	4b87      	ldr	r3, [pc, #540]	; (8000aa4 <main+0x958>)
 8000888:	2200      	movs	r2, #0
 800088a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 800088c:	4b85      	ldr	r3, [pc, #532]	; (8000aa4 <main+0x958>)
 800088e:	2200      	movs	r2, #0
 8000890:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000892:	4b84      	ldr	r3, [pc, #528]	; (8000aa4 <main+0x958>)
 8000894:	2200      	movs	r2, #0
 8000896:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000898:	4b82      	ldr	r3, [pc, #520]	; (8000aa4 <main+0x958>)
 800089a:	2200      	movs	r2, #0
 800089c:	719a      	strb	r2, [r3, #6]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800089e:	2208      	movs	r2, #8
 80008a0:	4980      	ldr	r1, [pc, #512]	; (8000aa4 <main+0x958>)
 80008a2:	4881      	ldr	r0, [pc, #516]	; (8000aa8 <main+0x95c>)
 80008a4:	f005 fd62 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80008a8:	2014      	movs	r0, #20
 80008aa:	f000 fbc3 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x37;
 80008ae:	4b7d      	ldr	r3, [pc, #500]	; (8000aa4 <main+0x958>)
 80008b0:	2237      	movs	r2, #55	; 0x37
 80008b2:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1E;
 80008b4:	4b7b      	ldr	r3, [pc, #492]	; (8000aa4 <main+0x958>)
 80008b6:	221e      	movs	r2, #30
 80008b8:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x27;
 80008ba:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <main+0x958>)
 80008bc:	2227      	movs	r2, #39	; 0x27
 80008be:	711a      	strb	r2, [r3, #4]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .10
 80008c0:	2208      	movs	r2, #8
 80008c2:	4978      	ldr	r1, [pc, #480]	; (8000aa4 <main+0x958>)
 80008c4:	4878      	ldr	r0, [pc, #480]	; (8000aa8 <main+0x95c>)
 80008c6:	f005 fd51 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80008ca:	2014      	movs	r0, #20
 80008cc:	f000 fbb2 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80008d0:	4b74      	ldr	r3, [pc, #464]	; (8000aa4 <main+0x958>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80008d6:	4b73      	ldr	r3, [pc, #460]	; (8000aa4 <main+0x958>)
 80008d8:	2200      	movs	r2, #0
 80008da:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 80008dc:	4b71      	ldr	r3, [pc, #452]	; (8000aa4 <main+0x958>)
 80008de:	2200      	movs	r2, #0
 80008e0:	711a      	strb	r2, [r3, #4]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80008e2:	2208      	movs	r2, #8
 80008e4:	496f      	ldr	r1, [pc, #444]	; (8000aa4 <main+0x958>)
 80008e6:	4870      	ldr	r0, [pc, #448]	; (8000aa8 <main+0x95c>)
 80008e8:	f005 fd40 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80008ec:	2014      	movs	r0, #20
 80008ee:	f000 fba1 	bl	8001034 <HAL_Delay>

	  keyboardhid.MODIFIER = 0x02;
 80008f2:	4b6c      	ldr	r3, [pc, #432]	; (8000aa4 <main+0x958>)
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x33;
 80008f8:	4b6a      	ldr	r3, [pc, #424]	; (8000aa4 <main+0x958>)
 80008fa:	2233      	movs	r2, #51	; 0x33
 80008fc:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press :
 80008fe:	2208      	movs	r2, #8
 8000900:	4968      	ldr	r1, [pc, #416]	; (8000aa4 <main+0x958>)
 8000902:	4869      	ldr	r0, [pc, #420]	; (8000aa8 <main+0x95c>)
 8000904:	f005 fd32 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000908:	2014      	movs	r0, #20
 800090a:	f000 fb93 	bl	8001034 <HAL_Delay>
	  keyboardhid.MODIFIER = 0x00;
 800090e:	4b65      	ldr	r3, [pc, #404]	; (8000aa4 <main+0x958>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x00;                            //release :
 8000914:	4b63      	ldr	r3, [pc, #396]	; (8000aa4 <main+0x958>)
 8000916:	2200      	movs	r2, #0
 8000918:	709a      	strb	r2, [r3, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800091a:	2208      	movs	r2, #8
 800091c:	4961      	ldr	r1, [pc, #388]	; (8000aa4 <main+0x958>)
 800091e:	4862      	ldr	r0, [pc, #392]	; (8000aa8 <main+0x95c>)
 8000920:	f005 fd24 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000924:	2014      	movs	r0, #20
 8000926:	f000 fb85 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x1E;
 800092a:	4b5e      	ldr	r3, [pc, #376]	; (8000aa4 <main+0x958>)
 800092c:	221e      	movs	r2, #30
 800092e:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x1F;
 8000930:	4b5c      	ldr	r3, [pc, #368]	; (8000aa4 <main+0x958>)
 8000932:	221f      	movs	r2, #31
 8000934:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x20;
 8000936:	4b5b      	ldr	r3, [pc, #364]	; (8000aa4 <main+0x958>)
 8000938:	2220      	movs	r2, #32
 800093a:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x21;
 800093c:	4b59      	ldr	r3, [pc, #356]	; (8000aa4 <main+0x958>)
 800093e:	2221      	movs	r2, #33	; 0x21
 8000940:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x38;
 8000942:	4b58      	ldr	r3, [pc, #352]	; (8000aa4 <main+0x958>)
 8000944:	2238      	movs	r2, #56	; 0x38
 8000946:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x16;
 8000948:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <main+0x958>)
 800094a:	2216      	movs	r2, #22
 800094c:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1234/s
 800094e:	2208      	movs	r2, #8
 8000950:	4954      	ldr	r1, [pc, #336]	; (8000aa4 <main+0x958>)
 8000952:	4855      	ldr	r0, [pc, #340]	; (8000aa8 <main+0x95c>)
 8000954:	f005 fd0a 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000958:	2014      	movs	r0, #20
 800095a:	f000 fb6b 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 800095e:	4b51      	ldr	r3, [pc, #324]	; (8000aa4 <main+0x958>)
 8000960:	2200      	movs	r2, #0
 8000962:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000964:	4b4f      	ldr	r3, [pc, #316]	; (8000aa4 <main+0x958>)
 8000966:	2200      	movs	r2, #0
 8000968:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 800096a:	4b4e      	ldr	r3, [pc, #312]	; (8000aa4 <main+0x958>)
 800096c:	2200      	movs	r2, #0
 800096e:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000970:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x958>)
 8000972:	2200      	movs	r2, #0
 8000974:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000976:	4b4b      	ldr	r3, [pc, #300]	; (8000aa4 <main+0x958>)
 8000978:	2200      	movs	r2, #0
 800097a:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 800097c:	4b49      	ldr	r3, [pc, #292]	; (8000aa4 <main+0x958>)
 800097e:	2200      	movs	r2, #0
 8000980:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000982:	2208      	movs	r2, #8
 8000984:	4947      	ldr	r1, [pc, #284]	; (8000aa4 <main+0x958>)
 8000986:	4848      	ldr	r0, [pc, #288]	; (8000aa8 <main+0x95c>)
 8000988:	f005 fcf0 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 800098c:	2014      	movs	r0, #20
 800098e:	f000 fb51 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x06;
 8000992:	4b44      	ldr	r3, [pc, #272]	; (8000aa4 <main+0x958>)
 8000994:	2206      	movs	r2, #6
 8000996:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x15;
 8000998:	4b42      	ldr	r3, [pc, #264]	; (8000aa4 <main+0x958>)
 800099a:	2215      	movs	r2, #21
 800099c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x0C;
 800099e:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <main+0x958>)
 80009a0:	220c      	movs	r2, #12
 80009a2:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x13;
 80009a4:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <main+0x958>)
 80009a6:	2213      	movs	r2, #19
 80009a8:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x17;
 80009aa:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <main+0x958>)
 80009ac:	2217      	movs	r2, #23
 80009ae:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x37;
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <main+0x958>)
 80009b2:	2237      	movs	r2, #55	; 0x37
 80009b4:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press cript.
 80009b6:	2208      	movs	r2, #8
 80009b8:	493a      	ldr	r1, [pc, #232]	; (8000aa4 <main+0x958>)
 80009ba:	483b      	ldr	r0, [pc, #236]	; (8000aa8 <main+0x95c>)
 80009bc:	f005 fcd6 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f000 fb37 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 80009c6:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <main+0x958>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 80009cc:	4b35      	ldr	r3, [pc, #212]	; (8000aa4 <main+0x958>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 80009d2:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <main+0x958>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 80009d8:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <main+0x958>)
 80009da:	2200      	movs	r2, #0
 80009dc:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <main+0x958>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 80009e4:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <main+0x958>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80009ea:	2208      	movs	r2, #8
 80009ec:	492d      	ldr	r1, [pc, #180]	; (8000aa4 <main+0x958>)
 80009ee:	482e      	ldr	r0, [pc, #184]	; (8000aa8 <main+0x95c>)
 80009f0:	f005 fcbc 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 80009f4:	2014      	movs	r0, #20
 80009f6:	f000 fb1d 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x13;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <main+0x958>)
 80009fc:	2213      	movs	r2, #19
 80009fe:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x16;
 8000a00:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <main+0x958>)
 8000a02:	2216      	movs	r2, #22
 8000a04:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x1E;
 8000a06:	4b27      	ldr	r3, [pc, #156]	; (8000aa4 <main+0x958>)
 8000a08:	221e      	movs	r2, #30
 8000a0a:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x34;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	; (8000aa4 <main+0x958>)
 8000a0e:	2234      	movs	r2, #52	; 0x34
 8000a10:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x2C;
 8000a12:	4b24      	ldr	r3, [pc, #144]	; (8000aa4 <main+0x958>)
 8000a14:	222c      	movs	r2, #44	; 0x2c
 8000a16:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x2D;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <main+0x958>)
 8000a1a:	222d      	movs	r2, #45	; 0x2d
 8000a1c:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ps1' -
 8000a1e:	2208      	movs	r2, #8
 8000a20:	4920      	ldr	r1, [pc, #128]	; (8000aa4 <main+0x958>)
 8000a22:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <main+0x95c>)
 8000a24:	f005 fca2 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000a28:	2014      	movs	r0, #20
 8000a2a:	f000 fb03 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <main+0x958>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main+0x958>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <main+0x958>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <main+0x958>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <main+0x958>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <main+0x958>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000a52:	2208      	movs	r2, #8
 8000a54:	4913      	ldr	r1, [pc, #76]	; (8000aa4 <main+0x958>)
 8000a56:	4814      	ldr	r0, [pc, #80]	; (8000aa8 <main+0x95c>)
 8000a58:	f005 fc88 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000a5c:	2014      	movs	r0, #20
 8000a5e:	f000 fae9 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x12;
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <main+0x958>)
 8000a64:	2212      	movs	r2, #18
 8000a66:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x18;
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <main+0x958>)
 8000a6a:	2218      	movs	r2, #24
 8000a6c:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x17;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <main+0x958>)
 8000a70:	2217      	movs	r2, #23
 8000a72:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x09;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <main+0x958>)
 8000a76:	2209      	movs	r2, #9
 8000a78:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x0C;
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <main+0x958>)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x0F;
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <main+0x958>)
 8000a82:	220f      	movs	r2, #15
 8000a84:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press outfil
 8000a86:	2208      	movs	r2, #8
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <main+0x958>)
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <main+0x95c>)
 8000a8c:	f005 fc6e 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000a90:	2014      	movs	r0, #20
 8000a92:	f000 facf 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000a96:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <main+0x958>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000a9c:	4b01      	ldr	r3, [pc, #4]	; (8000aa4 <main+0x958>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	70da      	strb	r2, [r3, #3]
 8000aa2:	e003      	b.n	8000aac <main+0x960>
 8000aa4:	20000174 	.word	0x20000174
 8000aa8:	20000184 	.word	0x20000184
	  keyboardhid.KEYCODE3 = 0x00;
 8000aac:	4b8f      	ldr	r3, [pc, #572]	; (8000cec <main+0xba0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000ab2:	4b8e      	ldr	r3, [pc, #568]	; (8000cec <main+0xba0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000ab8:	4b8c      	ldr	r3, [pc, #560]	; (8000cec <main+0xba0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000abe:	4b8b      	ldr	r3, [pc, #556]	; (8000cec <main+0xba0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	71da      	strb	r2, [r3, #7]


	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ac4:	2208      	movs	r2, #8
 8000ac6:	4989      	ldr	r1, [pc, #548]	; (8000cec <main+0xba0>)
 8000ac8:	4889      	ldr	r0, [pc, #548]	; (8000cf0 <main+0xba4>)
 8000aca:	f005 fc4f 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000ace:	2014      	movs	r0, #20
 8000ad0:	f000 fab0 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x08;
 8000ad4:	4b85      	ldr	r3, [pc, #532]	; (8000cec <main+0xba0>)
 8000ad6:	2208      	movs	r2, #8
 8000ad8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x2C;
 8000ada:	4b84      	ldr	r3, [pc, #528]	; (8000cec <main+0xba0>)
 8000adc:	222c      	movs	r2, #44	; 0x2c
 8000ade:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x34;
 8000ae0:	4b82      	ldr	r3, [pc, #520]	; (8000cec <main+0xba0>)
 8000ae2:	2234      	movs	r2, #52	; 0x34
 8000ae4:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x37;
 8000ae6:	4b81      	ldr	r3, [pc, #516]	; (8000cec <main+0xba0>)
 8000ae8:	2237      	movs	r2, #55	; 0x37
 8000aea:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x38;
 8000aec:	4b7f      	ldr	r3, [pc, #508]	; (8000cec <main+0xba0>)
 8000aee:	2238      	movs	r2, #56	; 0x38
 8000af0:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x16;
 8000af2:	4b7e      	ldr	r3, [pc, #504]	; (8000cec <main+0xba0>)
 8000af4:	2216      	movs	r2, #22
 8000af6:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e './s
 8000af8:	2208      	movs	r2, #8
 8000afa:	497c      	ldr	r1, [pc, #496]	; (8000cec <main+0xba0>)
 8000afc:	487c      	ldr	r0, [pc, #496]	; (8000cf0 <main+0xba4>)
 8000afe:	f005 fc35 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000b02:	2014      	movs	r0, #20
 8000b04:	f000 fa96 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000b08:	4b78      	ldr	r3, [pc, #480]	; (8000cec <main+0xba0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000b0e:	4b77      	ldr	r3, [pc, #476]	; (8000cec <main+0xba0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000b14:	4b75      	ldr	r3, [pc, #468]	; (8000cec <main+0xba0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000b1a:	4b74      	ldr	r3, [pc, #464]	; (8000cec <main+0xba0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000b20:	4b72      	ldr	r3, [pc, #456]	; (8000cec <main+0xba0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000b26:	4b71      	ldr	r3, [pc, #452]	; (8000cec <main+0xba0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	496f      	ldr	r1, [pc, #444]	; (8000cec <main+0xba0>)
 8000b30:	486f      	ldr	r0, [pc, #444]	; (8000cf0 <main+0xba4>)
 8000b32:	f005 fc1b 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000b36:	2014      	movs	r0, #20
 8000b38:	f000 fa7c 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x06;
 8000b3c:	4b6b      	ldr	r3, [pc, #428]	; (8000cec <main+0xba0>)
 8000b3e:	2206      	movs	r2, #6
 8000b40:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x15;
 8000b42:	4b6a      	ldr	r3, [pc, #424]	; (8000cec <main+0xba0>)
 8000b44:	2215      	movs	r2, #21
 8000b46:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x0C;
 8000b48:	4b68      	ldr	r3, [pc, #416]	; (8000cec <main+0xba0>)
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x13;
 8000b4e:	4b67      	ldr	r3, [pc, #412]	; (8000cec <main+0xba0>)
 8000b50:	2213      	movs	r2, #19
 8000b52:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x17;
 8000b54:	4b65      	ldr	r3, [pc, #404]	; (8000cec <main+0xba0>)
 8000b56:	2217      	movs	r2, #23
 8000b58:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x37;
 8000b5a:	4b64      	ldr	r3, [pc, #400]	; (8000cec <main+0xba0>)
 8000b5c:	2237      	movs	r2, #55	; 0x37
 8000b5e:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press cript.
 8000b60:	2208      	movs	r2, #8
 8000b62:	4962      	ldr	r1, [pc, #392]	; (8000cec <main+0xba0>)
 8000b64:	4862      	ldr	r0, [pc, #392]	; (8000cf0 <main+0xba4>)
 8000b66:	f005 fc01 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000b6a:	2014      	movs	r0, #20
 8000b6c:	f000 fa62 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000b70:	4b5e      	ldr	r3, [pc, #376]	; (8000cec <main+0xba0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <main+0xba0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000b7c:	4b5b      	ldr	r3, [pc, #364]	; (8000cec <main+0xba0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000b82:	4b5a      	ldr	r3, [pc, #360]	; (8000cec <main+0xba0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000b88:	4b58      	ldr	r3, [pc, #352]	; (8000cec <main+0xba0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000b8e:	4b57      	ldr	r3, [pc, #348]	; (8000cec <main+0xba0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b94:	2208      	movs	r2, #8
 8000b96:	4955      	ldr	r1, [pc, #340]	; (8000cec <main+0xba0>)
 8000b98:	4855      	ldr	r0, [pc, #340]	; (8000cf0 <main+0xba4>)
 8000b9a:	f005 fbe7 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000b9e:	2014      	movs	r0, #20
 8000ba0:	f000 fa48 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x13;
 8000ba4:	4b51      	ldr	r3, [pc, #324]	; (8000cec <main+0xba0>)
 8000ba6:	2213      	movs	r2, #19
 8000ba8:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x16;
 8000baa:	4b50      	ldr	r3, [pc, #320]	; (8000cec <main+0xba0>)
 8000bac:	2216      	movs	r2, #22
 8000bae:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x1E;
 8000bb0:	4b4e      	ldr	r3, [pc, #312]	; (8000cec <main+0xba0>)
 8000bb2:	221e      	movs	r2, #30
 8000bb4:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x34;
 8000bb6:	4b4d      	ldr	r3, [pc, #308]	; (8000cec <main+0xba0>)
 8000bb8:	2234      	movs	r2, #52	; 0x34
 8000bba:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x33;
 8000bbc:	4b4b      	ldr	r3, [pc, #300]	; (8000cec <main+0xba0>)
 8000bbe:	2233      	movs	r2, #51	; 0x33
 8000bc0:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x37;
 8000bc2:	4b4a      	ldr	r3, [pc, #296]	; (8000cec <main+0xba0>)
 8000bc4:	2237      	movs	r2, #55	; 0x37
 8000bc6:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ps1';
 8000bc8:	2208      	movs	r2, #8
 8000bca:	4948      	ldr	r1, [pc, #288]	; (8000cec <main+0xba0>)
 8000bcc:	4848      	ldr	r0, [pc, #288]	; (8000cf0 <main+0xba4>)
 8000bce:	f005 fbcd 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000bd2:	2014      	movs	r0, #20
 8000bd4:	f000 fa2e 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000bd8:	4b44      	ldr	r3, [pc, #272]	; (8000cec <main+0xba0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000bde:	4b43      	ldr	r3, [pc, #268]	; (8000cec <main+0xba0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000be4:	4b41      	ldr	r3, [pc, #260]	; (8000cec <main+0xba0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000bea:	4b40      	ldr	r3, [pc, #256]	; (8000cec <main+0xba0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <main+0xba0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000bf6:	4b3d      	ldr	r3, [pc, #244]	; (8000cec <main+0xba0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000bfc:	2208      	movs	r2, #8
 8000bfe:	493b      	ldr	r1, [pc, #236]	; (8000cec <main+0xba0>)
 8000c00:	483b      	ldr	r0, [pc, #236]	; (8000cf0 <main+0xba4>)
 8000c02:	f005 fbb3 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000c06:	2014      	movs	r0, #20
 8000c08:	f000 fa14 	bl	8001034 <HAL_Delay>

	  keyboardhid.KEYCODE1 = 0x31;
 8000c0c:	4b37      	ldr	r3, [pc, #220]	; (8000cec <main+0xba0>)
 8000c0e:	2231      	movs	r2, #49	; 0x31
 8000c10:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x16;
 8000c12:	4b36      	ldr	r3, [pc, #216]	; (8000cec <main+0xba0>)
 8000c14:	2216      	movs	r2, #22
 8000c16:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x06;
 8000c18:	4b34      	ldr	r3, [pc, #208]	; (8000cec <main+0xba0>)
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x15;
 8000c1e:	4b33      	ldr	r3, [pc, #204]	; (8000cec <main+0xba0>)
 8000c20:	2215      	movs	r2, #21
 8000c22:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x0C;
 8000c24:	4b31      	ldr	r3, [pc, #196]	; (8000cec <main+0xba0>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x13;
 8000c2a:	4b30      	ldr	r3, [pc, #192]	; (8000cec <main+0xba0>)
 8000c2c:	2213      	movs	r2, #19
 8000c2e:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /scrip
 8000c30:	2208      	movs	r2, #8
 8000c32:	492e      	ldr	r1, [pc, #184]	; (8000cec <main+0xba0>)
 8000c34:	482e      	ldr	r0, [pc, #184]	; (8000cf0 <main+0xba4>)
 8000c36:	f005 fb99 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000c3a:	2014      	movs	r0, #20
 8000c3c:	f000 f9fa 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000c40:	4b2a      	ldr	r3, [pc, #168]	; (8000cec <main+0xba0>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000c46:	4b29      	ldr	r3, [pc, #164]	; (8000cec <main+0xba0>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <main+0xba0>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <main+0xba0>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <main+0xba0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000c5e:	4b23      	ldr	r3, [pc, #140]	; (8000cec <main+0xba0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	71da      	strb	r2, [r3, #7]
	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000c64:	2208      	movs	r2, #8
 8000c66:	4921      	ldr	r1, [pc, #132]	; (8000cec <main+0xba0>)
 8000c68:	4821      	ldr	r0, [pc, #132]	; (8000cf0 <main+0xba4>)
 8000c6a:	f005 fb7f 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000c6e:	2014      	movs	r0, #20
 8000c70:	f000 f9e0 	bl	8001034 <HAL_Delay>


	  keyboardhid.KEYCODE1 = 0x17;
 8000c74:	4b1d      	ldr	r3, [pc, #116]	; (8000cec <main+0xba0>)
 8000c76:	2217      	movs	r2, #23
 8000c78:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x37;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <main+0xba0>)
 8000c7c:	2237      	movs	r2, #55	; 0x37
 8000c7e:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x13;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <main+0xba0>)
 8000c82:	2213      	movs	r2, #19
 8000c84:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x16;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <main+0xba0>)
 8000c88:	2216      	movs	r2, #22
 8000c8a:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x1E;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <main+0xba0>)
 8000c8e:	221e      	movs	r2, #30
 8000c90:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x28;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <main+0xba0>)
 8000c94:	2228      	movs	r2, #40	; 0x28
 8000c96:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t.ps1 <ENTER>
 8000c98:	2208      	movs	r2, #8
 8000c9a:	4914      	ldr	r1, [pc, #80]	; (8000cec <main+0xba0>)
 8000c9c:	4814      	ldr	r0, [pc, #80]	; (8000cf0 <main+0xba4>)
 8000c9e:	f005 fb65 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000ca2:	2014      	movs	r0, #20
 8000ca4:	f000 f9c6 	bl	8001034 <HAL_Delay>
	  keyboardhid.KEYCODE1 = 0x00;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <main+0xba0>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	709a      	strb	r2, [r3, #2]
	  keyboardhid.KEYCODE2 = 0x00;
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <main+0xba0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	70da      	strb	r2, [r3, #3]
	  keyboardhid.KEYCODE3 = 0x00;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <main+0xba0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	711a      	strb	r2, [r3, #4]
	  keyboardhid.KEYCODE4 = 0x00;
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <main+0xba0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	715a      	strb	r2, [r3, #5]
	  keyboardhid.KEYCODE5 = 0x00;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <main+0xba0>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	719a      	strb	r2, [r3, #6]
	  keyboardhid.KEYCODE6 = 0x00;
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <main+0xba0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	71da      	strb	r2, [r3, #7]

	  USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ccc:	2208      	movs	r2, #8
 8000cce:	4907      	ldr	r1, [pc, #28]	; (8000cec <main+0xba0>)
 8000cd0:	4807      	ldr	r0, [pc, #28]	; (8000cf0 <main+0xba4>)
 8000cd2:	f005 fb4b 	bl	800636c <USBD_HID_SendReport>
	  HAL_Delay(20);
 8000cd6:	2014      	movs	r0, #20
 8000cd8:	f000 f9ac 	bl	8001034 <HAL_Delay>


      //HACKED!!!
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <main+0xba8>)
 8000ce4:	f000 fc5c 	bl	80015a0 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <main+0xb9c>
 8000cea:	bf00      	nop
 8000cec:	20000174 	.word	0x20000174
 8000cf0:	20000184 	.word	0x20000184
 8000cf4:	40011000 	.word	0x40011000

08000cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b094      	sub	sp, #80	; 0x50
 8000cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d02:	2228      	movs	r2, #40	; 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f006 fffe 	bl	8007d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d36:	2301      	movs	r3, #1
 8000d38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d44:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f002 f996 	bl	8003080 <HAL_RCC_OscConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d5a:	f000 f873 	bl	8000e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5e:	230f      	movs	r3, #15
 8000d60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d62:	2302      	movs	r3, #2
 8000d64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 fc02 	bl	8003584 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000d86:	f000 f85d 	bl	8000e44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d8a:	2310      	movs	r3, #16
 8000d8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fd51 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000da0:	f000 f850 	bl	8000e44 <Error_Handler>
  }
}
 8000da4:	bf00      	nop
 8000da6:	3750      	adds	r7, #80	; 0x50
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0310 	add.w	r3, r7, #16
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dc0:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dc6:	f043 0310 	orr.w	r3, r3, #16
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0310 	and.w	r3, r3, #16
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dde:	f043 0320 	orr.w	r3, r3, #32
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0320 	and.w	r3, r3, #32
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_GPIO_Init+0x90>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0304 	and.w	r3, r3, #4
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0e:	480c      	ldr	r0, [pc, #48]	; (8000e40 <MX_GPIO_Init+0x94>)
 8000e10:	f000 fbc6 	bl	80015a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2302      	movs	r3, #2
 8000e24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e26:	f107 0310 	add.w	r3, r7, #16
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4804      	ldr	r0, [pc, #16]	; (8000e40 <MX_GPIO_Init+0x94>)
 8000e2e:	f000 fa33 	bl	8001298 <HAL_GPIO_Init>

}
 8000e32:	bf00      	nop
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40011000 	.word	0x40011000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <HAL_MspInit+0x5c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a14      	ldr	r2, [pc, #80]	; (8000eac <HAL_MspInit+0x5c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_MspInit+0x5c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <HAL_MspInit+0x5c>)
 8000e70:	69db      	ldr	r3, [r3, #28]
 8000e72:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <HAL_MspInit+0x5c>)
 8000e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e78:	61d3      	str	r3, [r2, #28]
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <HAL_MspInit+0x5c>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_MspInit+0x60>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_MspInit+0x60>)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <NMI_Handler+0x4>

08000eba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <HardFault_Handler+0x4>

08000ec0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <MemManage_Handler+0x4>

08000ec6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr

08000ede <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr

08000eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f000 f87f 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f0a:	f000 fc86 	bl	800181a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000648 	.word	0x20000648

08000f18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f24:	f7ff fff8 	bl	8000f18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f2a:	490c      	ldr	r1, [pc, #48]	; (8000f5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f30:	e002      	b.n	8000f38 <LoopCopyDataInit>

08000f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f36:	3304      	adds	r3, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f3c:	d3f9      	bcc.n	8000f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3e:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f40:	4c09      	ldr	r4, [pc, #36]	; (8000f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f44:	e001      	b.n	8000f4a <LoopFillZerobss>

08000f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f48:	3204      	adds	r2, #4

08000f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f4c:	d3fb      	bcc.n	8000f46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4e:	f006 feb7 	bl	8007cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f52:	f7ff f8fb 	bl	800014c <main>
  bx lr
 8000f56:	4770      	bx	lr
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f60:	08007d9c 	.word	0x08007d9c
  ldr r2, =_sbss
 8000f64:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f68:	2000094c 	.word	0x2000094c

08000f6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC1_2_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <HAL_Init+0x28>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <HAL_Init+0x28>)
 8000f7a:	f043 0310 	orr.w	r3, r3, #16
 8000f7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f947 	bl	8001214 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff ff60 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40022000 	.word	0x40022000

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f95f 	bl	800127e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f927 	bl	800122a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004

08000ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_IncTick+0x1c>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <HAL_IncTick+0x20>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x20>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr
 8001018:	20000008 	.word	0x20000008
 800101c:	2000017c 	.word	0x2000017c

08001020 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b02      	ldr	r3, [pc, #8]	; (8001030 <HAL_GetTick+0x10>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	2000017c 	.word	0x2000017c

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffe0 	bl	8001020 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4906      	ldr	r1, [pc, #24]	; (8001114 <__NVIC_EnableIRQ+0x34>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	6039      	str	r1, [r7, #0]
 8001122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	2b00      	cmp	r3, #0
 800112a:	db0a      	blt.n	8001142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	b2da      	uxtb	r2, r3
 8001130:	490c      	ldr	r1, [pc, #48]	; (8001164 <__NVIC_SetPriority+0x4c>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	0112      	lsls	r2, r2, #4
 8001138:	b2d2      	uxtb	r2, r2
 800113a:	440b      	add	r3, r1
 800113c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001140:	e00a      	b.n	8001158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4908      	ldr	r1, [pc, #32]	; (8001168 <__NVIC_SetPriority+0x50>)
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	f003 030f 	and.w	r3, r3, #15
 800114e:	3b04      	subs	r3, #4
 8001150:	0112      	lsls	r2, r2, #4
 8001152:	b2d2      	uxtb	r2, r2
 8001154:	440b      	add	r3, r1
 8001156:	761a      	strb	r2, [r3, #24]
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	; 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	60f8      	str	r0, [r7, #12]
 8001174:	60b9      	str	r1, [r7, #8]
 8001176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	f1c3 0307 	rsb	r3, r3, #7
 8001186:	2b04      	cmp	r3, #4
 8001188:	bf28      	it	cs
 800118a:	2304      	movcs	r3, #4
 800118c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	3304      	adds	r3, #4
 8001192:	2b06      	cmp	r3, #6
 8001194:	d902      	bls.n	800119c <NVIC_EncodePriority+0x30>
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3b03      	subs	r3, #3
 800119a:	e000      	b.n	800119e <NVIC_EncodePriority+0x32>
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	43da      	mvns	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	401a      	ands	r2, r3
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b4:	f04f 31ff 	mov.w	r1, #4294967295
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43d9      	mvns	r1, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	4313      	orrs	r3, r2
         );
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3724      	adds	r7, #36	; 0x24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d301      	bcc.n	80011e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e2:	2301      	movs	r3, #1
 80011e4:	e00f      	b.n	8001206 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <SysTick_Config+0x40>)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ee:	210f      	movs	r1, #15
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f7ff ff90 	bl	8001118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	; (8001210 <SysTick_Config+0x40>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <SysTick_Config+0x40>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff2d 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	4603      	mov	r3, r0
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
 8001236:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123c:	f7ff ff42 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001240:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	68b9      	ldr	r1, [r7, #8]
 8001246:	6978      	ldr	r0, [r7, #20]
 8001248:	f7ff ff90 	bl	800116c <NVIC_EncodePriority>
 800124c:	4602      	mov	r2, r0
 800124e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001252:	4611      	mov	r1, r2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff5f 	bl	8001118 <__NVIC_SetPriority>
}
 800125a:	bf00      	nop
 800125c:	3718      	adds	r7, #24
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	4603      	mov	r3, r0
 800126a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff35 	bl	80010e0 <__NVIC_EnableIRQ>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ffa2 	bl	80011d0 <SysTick_Config>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b08b      	sub	sp, #44	; 0x2c
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012a2:	2300      	movs	r3, #0
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012aa:	e169      	b.n	8001580 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012ac:	2201      	movs	r2, #1
 80012ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f040 8158 	bne.w	800157a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a9a      	ldr	r2, [pc, #616]	; (8001538 <HAL_GPIO_Init+0x2a0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d05e      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012d4:	4a98      	ldr	r2, [pc, #608]	; (8001538 <HAL_GPIO_Init+0x2a0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d875      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012da:	4a98      	ldr	r2, [pc, #608]	; (800153c <HAL_GPIO_Init+0x2a4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d058      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012e0:	4a96      	ldr	r2, [pc, #600]	; (800153c <HAL_GPIO_Init+0x2a4>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d86f      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012e6:	4a96      	ldr	r2, [pc, #600]	; (8001540 <HAL_GPIO_Init+0x2a8>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d052      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012ec:	4a94      	ldr	r2, [pc, #592]	; (8001540 <HAL_GPIO_Init+0x2a8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d869      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012f2:	4a94      	ldr	r2, [pc, #592]	; (8001544 <HAL_GPIO_Init+0x2ac>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d04c      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 80012f8:	4a92      	ldr	r2, [pc, #584]	; (8001544 <HAL_GPIO_Init+0x2ac>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d863      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 80012fe:	4a92      	ldr	r2, [pc, #584]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d046      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
 8001304:	4a90      	ldr	r2, [pc, #576]	; (8001548 <HAL_GPIO_Init+0x2b0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d85d      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 800130a:	2b12      	cmp	r3, #18
 800130c:	d82a      	bhi.n	8001364 <HAL_GPIO_Init+0xcc>
 800130e:	2b12      	cmp	r3, #18
 8001310:	d859      	bhi.n	80013c6 <HAL_GPIO_Init+0x12e>
 8001312:	a201      	add	r2, pc, #4	; (adr r2, 8001318 <HAL_GPIO_Init+0x80>)
 8001314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001318:	08001393 	.word	0x08001393
 800131c:	0800136d 	.word	0x0800136d
 8001320:	0800137f 	.word	0x0800137f
 8001324:	080013c1 	.word	0x080013c1
 8001328:	080013c7 	.word	0x080013c7
 800132c:	080013c7 	.word	0x080013c7
 8001330:	080013c7 	.word	0x080013c7
 8001334:	080013c7 	.word	0x080013c7
 8001338:	080013c7 	.word	0x080013c7
 800133c:	080013c7 	.word	0x080013c7
 8001340:	080013c7 	.word	0x080013c7
 8001344:	080013c7 	.word	0x080013c7
 8001348:	080013c7 	.word	0x080013c7
 800134c:	080013c7 	.word	0x080013c7
 8001350:	080013c7 	.word	0x080013c7
 8001354:	080013c7 	.word	0x080013c7
 8001358:	080013c7 	.word	0x080013c7
 800135c:	08001375 	.word	0x08001375
 8001360:	08001389 	.word	0x08001389
 8001364:	4a79      	ldr	r2, [pc, #484]	; (800154c <HAL_GPIO_Init+0x2b4>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d013      	beq.n	8001392 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800136a:	e02c      	b.n	80013c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	623b      	str	r3, [r7, #32]
          break;
 8001372:	e029      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	3304      	adds	r3, #4
 800137a:	623b      	str	r3, [r7, #32]
          break;
 800137c:	e024      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	3308      	adds	r3, #8
 8001384:	623b      	str	r3, [r7, #32]
          break;
 8001386:	e01f      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	330c      	adds	r3, #12
 800138e:	623b      	str	r3, [r7, #32]
          break;
 8001390:	e01a      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d102      	bne.n	80013a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800139a:	2304      	movs	r3, #4
 800139c:	623b      	str	r3, [r7, #32]
          break;
 800139e:	e013      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d105      	bne.n	80013b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a8:	2308      	movs	r3, #8
 80013aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	611a      	str	r2, [r3, #16]
          break;
 80013b2:	e009      	b.n	80013c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013b4:	2308      	movs	r3, #8
 80013b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	615a      	str	r2, [r3, #20]
          break;
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013c0:	2300      	movs	r3, #0
 80013c2:	623b      	str	r3, [r7, #32]
          break;
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x130>
          break;
 80013c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d801      	bhi.n	80013d2 <HAL_GPIO_Init+0x13a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	e001      	b.n	80013d6 <HAL_GPIO_Init+0x13e>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3304      	adds	r3, #4
 80013d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2bff      	cmp	r3, #255	; 0xff
 80013dc:	d802      	bhi.n	80013e4 <HAL_GPIO_Init+0x14c>
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x152>
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	3b08      	subs	r3, #8
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	210f      	movs	r1, #15
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	401a      	ands	r2, r3
 80013fc:	6a39      	ldr	r1, [r7, #32]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	fa01 f303 	lsl.w	r3, r1, r3
 8001404:	431a      	orrs	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	f000 80b1 	beq.w	800157a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001418:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	4a4c      	ldr	r2, [pc, #304]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	6193      	str	r3, [r2, #24]
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <HAL_GPIO_Init+0x2b8>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001430:	4a48      	ldr	r2, [pc, #288]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 8001432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	220f      	movs	r2, #15
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a40      	ldr	r2, [pc, #256]	; (8001558 <HAL_GPIO_Init+0x2c0>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d013      	beq.n	8001484 <HAL_GPIO_Init+0x1ec>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3f      	ldr	r2, [pc, #252]	; (800155c <HAL_GPIO_Init+0x2c4>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d00d      	beq.n	8001480 <HAL_GPIO_Init+0x1e8>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a3e      	ldr	r2, [pc, #248]	; (8001560 <HAL_GPIO_Init+0x2c8>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d007      	beq.n	800147c <HAL_GPIO_Init+0x1e4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a3d      	ldr	r2, [pc, #244]	; (8001564 <HAL_GPIO_Init+0x2cc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d101      	bne.n	8001478 <HAL_GPIO_Init+0x1e0>
 8001474:	2303      	movs	r3, #3
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001478:	2304      	movs	r3, #4
 800147a:	e004      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 800147c:	2302      	movs	r3, #2
 800147e:	e002      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_GPIO_Init+0x1ee>
 8001484:	2300      	movs	r3, #0
 8001486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001488:	f002 0203 	and.w	r2, r2, #3
 800148c:	0092      	lsls	r2, r2, #2
 800148e:	4093      	lsls	r3, r2
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	4313      	orrs	r3, r2
 8001494:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001496:	492f      	ldr	r1, [pc, #188]	; (8001554 <HAL_GPIO_Init+0x2bc>)
 8001498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149a:	089b      	lsrs	r3, r3, #2
 800149c:	3302      	adds	r3, #2
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d006      	beq.n	80014be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014b0:	4b2d      	ldr	r3, [pc, #180]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	492c      	ldr	r1, [pc, #176]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014be:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	4928      	ldr	r1, [pc, #160]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014c8:	4013      	ands	r3, r2
 80014ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d006      	beq.n	80014e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014d8:	4b23      	ldr	r3, [pc, #140]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014da:	68da      	ldr	r2, [r3, #12]
 80014dc:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
 80014e4:	e006      	b.n	80014f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	69bb      	ldr	r3, [r7, #24]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	491e      	ldr	r1, [pc, #120]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d006      	beq.n	800150e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4918      	ldr	r1, [pc, #96]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
 800150c:	e006      	b.n	800151c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800150e:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	43db      	mvns	r3, r3
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 8001518:	4013      	ands	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d021      	beq.n	800156c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	490e      	ldr	r1, [pc, #56]	; (8001568 <HAL_GPIO_Init+0x2d0>)
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]
 8001534:	e021      	b.n	800157a <HAL_GPIO_Init+0x2e2>
 8001536:	bf00      	nop
 8001538:	10320000 	.word	0x10320000
 800153c:	10310000 	.word	0x10310000
 8001540:	10220000 	.word	0x10220000
 8001544:	10210000 	.word	0x10210000
 8001548:	10120000 	.word	0x10120000
 800154c:	10110000 	.word	0x10110000
 8001550:	40021000 	.word	0x40021000
 8001554:	40010000 	.word	0x40010000
 8001558:	40010800 	.word	0x40010800
 800155c:	40010c00 	.word	0x40010c00
 8001560:	40011000 	.word	0x40011000
 8001564:	40011400 	.word	0x40011400
 8001568:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_GPIO_Init+0x304>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	43db      	mvns	r3, r3
 8001574:	4909      	ldr	r1, [pc, #36]	; (800159c <HAL_GPIO_Init+0x304>)
 8001576:	4013      	ands	r3, r2
 8001578:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	3301      	adds	r3, #1
 800157e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	fa22 f303 	lsr.w	r3, r2, r3
 800158a:	2b00      	cmp	r3, #0
 800158c:	f47f ae8e 	bne.w	80012ac <HAL_GPIO_Init+0x14>
  }
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	372c      	adds	r7, #44	; 0x2c
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr
 800159c:	40010400 	.word	0x40010400

080015a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b0:	787b      	ldrb	r3, [r7, #1]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015bc:	e003      	b.n	80015c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015be:	887b      	ldrh	r3, [r7, #2]
 80015c0:	041a      	lsls	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	611a      	str	r2, [r3, #16]
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80015d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d2:	b08b      	sub	sp, #44	; 0x2c
 80015d4:	af06      	add	r7, sp, #24
 80015d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0f1      	b.n	80017c6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f006 f8dc 	bl	80077b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f002 f9f3 	bl	80039f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	687e      	ldr	r6, [r7, #4]
 8001616:	466d      	mov	r5, sp
 8001618:	f106 0410 	add.w	r4, r6, #16
 800161c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001620:	6823      	ldr	r3, [r4, #0]
 8001622:	602b      	str	r3, [r5, #0]
 8001624:	1d33      	adds	r3, r6, #4
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	6838      	ldr	r0, [r7, #0]
 800162a:	f002 f9bd 	bl	80039a8 <USB_CoreInit>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2202      	movs	r2, #2
 8001638:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e0c2      	b.n	80017c6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2100      	movs	r1, #0
 8001646:	4618      	mov	r0, r3
 8001648:	f002 f9ee 	bl	8003a28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164c:	2300      	movs	r3, #0
 800164e:	73fb      	strb	r3, [r7, #15]
 8001650:	e040      	b.n	80016d4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	3301      	adds	r3, #1
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	1c5a      	adds	r2, r3, #1
 800166e:	4613      	mov	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	4413      	add	r3, r2
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	440b      	add	r3, r1
 8001678:	7bfa      	ldrb	r2, [r7, #15]
 800167a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	4613      	mov	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	440b      	add	r3, r1
 800168c:	3303      	adds	r3, #3
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	3338      	adds	r3, #56	; 0x38
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	333c      	adds	r3, #60	; 0x3c
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	6879      	ldr	r1, [r7, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	3340      	adds	r3, #64	; 0x40
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
 80016d0:	3301      	adds	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d3b9      	bcc.n	8001652 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
 80016e2:	e044      	b.n	800176e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80016e4:	7bfa      	ldrb	r2, [r7, #15]
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	440b      	add	r3, r1
 80016f2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	6879      	ldr	r1, [r7, #4]
 80016fe:	4613      	mov	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800170c:	7bfa      	ldrb	r2, [r7, #15]
 800170e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	440b      	add	r3, r1
 800171e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001726:	7bfa      	ldrb	r2, [r7, #15]
 8001728:	6879      	ldr	r1, [r7, #4]
 800172a:	4613      	mov	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4413      	add	r3, r2
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	440b      	add	r3, r1
 8001734:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	440b      	add	r3, r1
 800174a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001752:	7bfa      	ldrb	r2, [r7, #15]
 8001754:	6879      	ldr	r1, [r7, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	3301      	adds	r3, #1
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	7bfa      	ldrb	r2, [r7, #15]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	d3b5      	bcc.n	80016e4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	603b      	str	r3, [r7, #0]
 800177e:	687e      	ldr	r6, [r7, #4]
 8001780:	466d      	mov	r5, sp
 8001782:	f106 0410 	add.w	r4, r6, #16
 8001786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178a:	6823      	ldr	r3, [r4, #0]
 800178c:	602b      	str	r3, [r5, #0]
 800178e:	1d33      	adds	r3, r6, #4
 8001790:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001792:	6838      	ldr	r0, [r7, #0]
 8001794:	f002 f954 	bl	8003a40 <USB_DevInit>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2202      	movs	r2, #2
 80017a2:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e00d      	b.n	80017c6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fbd5 	bl	8005f6e <USB_DevDisconnect>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d101      	bne.n	80017e4 <HAL_PCD_Start+0x16>
 80017e0:	2302      	movs	r3, #2
 80017e2:	e016      	b.n	8001812 <HAL_PCD_Start+0x44>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 f8e9 	bl	80039c8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017f6:	2101      	movs	r1, #1
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f006 fa2a 	bl	8007c52 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fba9 	bl	8005f5a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b088      	sub	sp, #32
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fbab 	bl	8005f82 <USB_ReadInterrupts>
 800182c:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 fb04 	bl	8001e46 <PCD_EP_ISR_Handler>

    return;
 800183e:	e119      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001846:	2b00      	cmp	r3, #0
 8001848:	d013      	beq.n	8001872 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001852:	b29a      	uxth	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185c:	b292      	uxth	r2, r2
 800185e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f006 f821 	bl	80078aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001868:	2100      	movs	r1, #0
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f905 	bl	8001a7a <HAL_PCD_SetAddress>

    return;
 8001870:	e100      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d00c      	beq.n	8001896 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001884:	b29a      	uxth	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800188e:	b292      	uxth	r2, r2
 8001890:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001894:	e0ee      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00c      	beq.n	80018ba <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018b2:	b292      	uxth	r2, r2
 80018b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80018b8:	e0dc      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d027      	beq.n	8001914 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0204 	bic.w	r2, r2, #4
 80018d6:	b292      	uxth	r2, r2
 80018d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0208 	bic.w	r2, r2, #8
 80018ee:	b292      	uxth	r2, r2
 80018f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f006 f811 	bl	800791c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001902:	b29a      	uxth	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800190c:	b292      	uxth	r2, r2
 800190e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001912:	e0af      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8083 	beq.w	8001a26 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8001920:	2300      	movs	r3, #0
 8001922:	77fb      	strb	r3, [r7, #31]
 8001924:	e010      	b.n	8001948 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	7ffb      	ldrb	r3, [r7, #31]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	441a      	add	r2, r3
 8001932:	7ffb      	ldrb	r3, [r7, #31]
 8001934:	8812      	ldrh	r2, [r2, #0]
 8001936:	b292      	uxth	r2, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	3320      	adds	r3, #32
 800193c:	443b      	add	r3, r7
 800193e:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8001942:	7ffb      	ldrb	r3, [r7, #31]
 8001944:	3301      	adds	r3, #1
 8001946:	77fb      	strb	r3, [r7, #31]
 8001948:	7ffb      	ldrb	r3, [r7, #31]
 800194a:	2b07      	cmp	r3, #7
 800194c:	d9eb      	bls.n	8001926 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001956:	b29a      	uxth	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f042 0201 	orr.w	r2, r2, #1
 8001960:	b292      	uxth	r2, r2
 8001962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800196e:	b29a      	uxth	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 0201 	bic.w	r2, r2, #1
 8001978:	b292      	uxth	r2, r2
 800197a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800197e:	bf00      	nop
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001988:	b29b      	uxth	r3, r3
 800198a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f6      	beq.n	8001980 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800199a:	b29a      	uxth	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019a4:	b292      	uxth	r2, r2
 80019a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	77fb      	strb	r3, [r7, #31]
 80019ae:	e00f      	b.n	80019d0 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	4611      	mov	r1, r2
 80019b8:	7ffa      	ldrb	r2, [r7, #31]
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	440a      	add	r2, r1
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	3320      	adds	r3, #32
 80019c2:	443b      	add	r3, r7
 80019c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80019c8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019ca:	7ffb      	ldrb	r3, [r7, #31]
 80019cc:	3301      	adds	r3, #1
 80019ce:	77fb      	strb	r3, [r7, #31]
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d9ec      	bls.n	80019b0 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0208 	orr.w	r2, r2, #8
 80019e8:	b292      	uxth	r2, r2
 80019ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a00:	b292      	uxth	r2, r2
 8001a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f042 0204 	orr.w	r2, r2, #4
 8001a18:	b292      	uxth	r2, r2
 8001a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f005 ff62 	bl	80078e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a24:	e026      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00f      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a42:	b292      	uxth	r2, r2
 8001a44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f005 ff20 	bl	800788e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001a4e:	e011      	b.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00c      	beq.n	8001a74 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a72:	bf00      	nop
  }
}
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_PCD_SetAddress+0x1a>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e013      	b.n	8001abc <HAL_PCD_SetAddress+0x42>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	78fa      	ldrb	r2, [r7, #3]
 8001aa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f004 fa41 	bl	8005f34 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	4608      	mov	r0, r1
 8001ace:	4611      	mov	r1, r2
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	70fb      	strb	r3, [r7, #3]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	803b      	strh	r3, [r7, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ae2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da0e      	bge.n	8001b08 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	4613      	mov	r3, r2
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	705a      	strb	r2, [r3, #1]
 8001b06:	e00e      	b.n	8001b26 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	f003 0207 	and.w	r2, r3, #7
 8001b0e:	4613      	mov	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	4413      	add	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2200      	movs	r2, #0
 8001b24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b32:	883a      	ldrh	r2, [r7, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	78ba      	ldrb	r2, [r7, #2]
 8001b3c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b3e:	78bb      	ldrb	r3, [r7, #2]
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d102      	bne.n	8001b4a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_EP_Open+0x94>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e00e      	b.n	8001b76 <HAL_PCD_EP_Open+0xb2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68f9      	ldr	r1, [r7, #12]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f001 ff8a 	bl	8003a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b74:	7afb      	ldrb	r3, [r7, #11]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da0e      	bge.n	8001bb0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b92:	78fb      	ldrb	r3, [r7, #3]
 8001b94:	f003 0307 	and.w	r3, r3, #7
 8001b98:	1c5a      	adds	r2, r3, #1
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4413      	add	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2201      	movs	r2, #1
 8001bac:	705a      	strb	r2, [r3, #1]
 8001bae:	e00e      	b.n	8001bce <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d101      	bne.n	8001be8 <HAL_PCD_EP_Close+0x6a>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e00e      	b.n	8001c06 <HAL_PCD_EP_Close+0x88>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68f9      	ldr	r1, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fb02 	bl	8004200 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c1e:	7afb      	ldrb	r3, [r7, #11]
 8001c20:	f003 0207 	and.w	r2, r3, #7
 8001c24:	4613      	mov	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c30:	68fa      	ldr	r2, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4e:	7afb      	ldrb	r3, [r7, #11]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6979      	ldr	r1, [r7, #20]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f002 fcb9 	bl	80045d8 <USB_EPStartXfer>

  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	4613      	mov	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	7afb      	ldrb	r3, [r7, #11]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	6979      	ldr	r1, [r7, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f002 fc82 	bl	80045d8 <USB_EPStartXfer>

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cea:	78fb      	ldrb	r3, [r7, #3]
 8001cec:	f003 0207 	and.w	r2, r3, #7
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d901      	bls.n	8001cfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e04c      	b.n	8001d96 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da0e      	bge.n	8001d22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	1c5a      	adds	r2, r3, #1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	705a      	strb	r2, [r3, #1]
 8001d20:	e00c      	b.n	8001d3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d22:	78fa      	ldrb	r2, [r7, #3]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_PCD_EP_SetStall+0x7e>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e01c      	b.n	8001d96 <HAL_PCD_EP_SetStall+0xb8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f003 ffe5 	bl	8005d3a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d108      	bne.n	8001d8c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d84:	4619      	mov	r1, r3
 8001d86:	4610      	mov	r0, r2
 8001d88:	f004 f90a 	bl	8005fa0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d901      	bls.n	8001dbc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e040      	b.n	8001e3e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	da0e      	bge.n	8001de2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	705a      	strb	r2, [r3, #1]
 8001de0:	e00e      	b.n	8001e00 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	f003 0207 	and.w	r2, r3, #7
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2200      	movs	r2, #0
 8001e04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_PCD_EP_ClrStall+0x82>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e00e      	b.n	8001e3e <HAL_PCD_EP_ClrStall+0xa0>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	68f9      	ldr	r1, [r7, #12]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 ffd3 	bl	8005dda <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3710      	adds	r7, #16
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b096      	sub	sp, #88	; 0x58
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e4e:	e3bf      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e58:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8001e6a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 8179 	bne.w	8002166 <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d152      	bne.n	8001f26 <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e90:	81fb      	strh	r3, [r7, #14]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3328      	adds	r3, #40	; 0x28
 8001ea8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ed8:	695a      	ldr	r2, [r3, #20]
 8001eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	441a      	add	r2, r3
 8001ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ee2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f005 fcb7 	bl	800785a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 836b 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
 8001efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 8366 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	b292      	uxth	r2, r2
 8001f18:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f24:	e354      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f2c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d034      	beq.n	8001fae <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	3306      	adds	r3, #6
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f6e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f80:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	f004 f85c 	bl	8006040 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f94:	4013      	ands	r3, r2
 8001f96:	823b      	strh	r3, [r7, #16]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	8a3a      	ldrh	r2, [r7, #16]
 8001f9e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa2:	b292      	uxth	r2, r2
 8001fa4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f005 fc2a 	bl	8007800 <HAL_PCD_SetupStageCallback>
 8001fac:	e310      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001fae:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f280 830c 	bge.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	83fb      	strh	r3, [r7, #30]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	8bfa      	ldrh	r2, [r7, #30]
 8001fce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fd2:	b292      	uxth	r2, r2
 8001fd4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	3306      	adds	r3, #6
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6812      	ldr	r2, [r2, #0]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ffe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002000:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002002:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d019      	beq.n	800203e <PCD_EP_ISR_Handler+0x1f8>
 800200a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d015      	beq.n	800203e <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002018:	6959      	ldr	r1, [r3, #20]
 800201a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800201c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800201e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002020:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002022:	b29b      	uxth	r3, r3
 8002024:	f004 f80c 	bl	8006040 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	441a      	add	r2, r3
 8002032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002034:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f005 fbf3 	bl	8007824 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002048:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 82bd 	bne.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
 8002056:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800205a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800205e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002062:	f000 82b5 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	61bb      	str	r3, [r7, #24]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002074:	b29b      	uxth	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	4413      	add	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	b29a      	uxth	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	2b3e      	cmp	r3, #62	; 0x3e
 800209c:	d91d      	bls.n	80020da <PCD_EP_ISR_Handler+0x294>
 800209e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	647b      	str	r3, [r7, #68]	; 0x44
 80020a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 031f 	and.w	r3, r3, #31
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <PCD_EP_ISR_Handler+0x272>
 80020b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020b4:	3b01      	subs	r3, #1
 80020b6:	647b      	str	r3, [r7, #68]	; 0x44
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	801a      	strh	r2, [r3, #0]
 80020d8:	e026      	b.n	8002128 <PCD_EP_ISR_Handler+0x2e2>
 80020da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x2b2>
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e017      	b.n	8002128 <PCD_EP_ISR_Handler+0x2e2>
 80020f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <PCD_EP_ISR_Handler+0x2cc>
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	3301      	adds	r3, #1
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	b29a      	uxth	r2, r3
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	b29b      	uxth	r3, r3
 800211c:	029b      	lsls	r3, r3, #10
 800211e:	b29b      	uxth	r3, r3
 8002120:	4313      	orrs	r3, r2
 8002122:	b29a      	uxth	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	881b      	ldrh	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002138:	827b      	strh	r3, [r7, #18]
 800213a:	8a7b      	ldrh	r3, [r7, #18]
 800213c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002140:	827b      	strh	r3, [r7, #18]
 8002142:	8a7b      	ldrh	r3, [r7, #18]
 8002144:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002148:	827b      	strh	r3, [r7, #18]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	8a7b      	ldrh	r3, [r7, #18]
 8002150:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002154:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002158:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002160:	b29b      	uxth	r3, r3
 8002162:	8013      	strh	r3, [r2, #0]
 8002164:	e234      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800217a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800217e:	2b00      	cmp	r3, #0
 8002180:	f280 80fc 	bge.w	800237c <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	881b      	ldrh	r3, [r3, #0]
 8002194:	b29a      	uxth	r2, r3
 8002196:	f640 738f 	movw	r3, #3983	; 0xf8f
 800219a:	4013      	ands	r3, r2
 800219c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	461a      	mov	r2, r3
 80021a6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80021b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b6:	b292      	uxth	r2, r2
 80021b8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021ba:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d2:	7b1b      	ldrb	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d125      	bne.n	8002224 <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	3306      	adds	r3, #6
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002200:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002204:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8092 	beq.w	8002332 <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6818      	ldr	r0, [r3, #0]
 8002212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002214:	6959      	ldr	r1, [r3, #20]
 8002216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002218:	88da      	ldrh	r2, [r3, #6]
 800221a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800221e:	f003 ff0f 	bl	8006040 <USB_ReadPMA>
 8002222:	e086      	b.n	8002332 <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	2b02      	cmp	r3, #2
 800222a:	d10a      	bne.n	8002242 <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800222c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002230:	461a      	mov	r2, r3
 8002232:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 f9d9 	bl	80025ec <HAL_PCD_EP_DB_Receive>
 800223a:	4603      	mov	r3, r0
 800223c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002240:	e077      	b.n	8002332 <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b29b      	uxth	r3, r3
 8002254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800227e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002282:	b29b      	uxth	r3, r3
 8002284:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d024      	beq.n	80022ea <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4413      	add	r3, r2
 80022b4:	3302      	adds	r3, #2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80022cc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d02e      	beq.n	8002332 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022da:	6959      	ldr	r1, [r3, #20]
 80022dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022de:	891a      	ldrh	r2, [r3, #8]
 80022e0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022e4:	f003 feac 	bl	8006040 <USB_ReadPMA>
 80022e8:	e023      	b.n	8002332 <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4413      	add	r3, r2
 80022fe:	3306      	adds	r3, #6
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	4413      	add	r3, r2
 8002308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002312:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002316:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002324:	6959      	ldr	r1, [r3, #20]
 8002326:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002328:	895a      	ldrh	r2, [r3, #10]
 800232a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800232e:	f003 fe87 	bl	8006040 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800233a:	441a      	add	r2, r3
 800233c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800233e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002348:	441a      	add	r2, r3
 800234a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800234c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800234e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <PCD_EP_ISR_Handler+0x51c>
 8002356:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800235a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d206      	bcs.n	8002370 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f005 fa5b 	bl	8007824 <HAL_PCD_DataOutStageCallback>
 800236e:	e005      	b.n	800237c <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002376:	4618      	mov	r0, r3
 8002378:	f002 f92e 	bl	80045d8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800237c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8123 	beq.w	80025d0 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 800238a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4413      	add	r3, r2
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	441a      	add	r2, r3
 80023ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80023ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80023da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023dc:	78db      	ldrb	r3, [r3, #3]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	f040 80a2 	bne.w	8002528 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 80023e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80023ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80023ec:	7b1b      	ldrb	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f000 8093 	beq.w	800251a <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80023f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80023f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d046      	beq.n	800248e <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002400:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002402:	785b      	ldrb	r3, [r3, #1]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d126      	bne.n	8002456 <PCD_EP_ISR_Handler+0x610>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	627b      	str	r3, [r7, #36]	; 0x24
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	4413      	add	r3, r2
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
 8002420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	011a      	lsls	r2, r3, #4
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	4413      	add	r3, r2
 800242a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800242e:	623b      	str	r3, [r7, #32]
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800243a:	b29a      	uxth	r2, r3
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	801a      	strh	r2, [r3, #0]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800244a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800244e:	b29a      	uxth	r2, r3
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	801a      	strh	r2, [r3, #0]
 8002454:	e061      	b.n	800251a <PCD_EP_ISR_Handler+0x6d4>
 8002456:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002458:	785b      	ldrb	r3, [r3, #1]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d15d      	bne.n	800251a <PCD_EP_ISR_Handler+0x6d4>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246c:	b29b      	uxth	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	4413      	add	r3, r2
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	011a      	lsls	r2, r3, #4
 800247c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247e:	4413      	add	r3, r2
 8002480:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002484:	62bb      	str	r3, [r7, #40]	; 0x28
 8002486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002488:	2200      	movs	r2, #0
 800248a:	801a      	strh	r2, [r3, #0]
 800248c:	e045      	b.n	800251a <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d126      	bne.n	80024ea <PCD_EP_ISR_Handler+0x6a4>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024b0:	4413      	add	r3, r2
 80024b2:	637b      	str	r3, [r7, #52]	; 0x34
 80024b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	011a      	lsls	r2, r3, #4
 80024ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024bc:	4413      	add	r3, r2
 80024be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024c2:	633b      	str	r3, [r7, #48]	; 0x30
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	881b      	ldrh	r3, [r3, #0]
 80024d8:	b29b      	uxth	r3, r3
 80024da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e6:	801a      	strh	r2, [r3, #0]
 80024e8:	e017      	b.n	800251a <PCD_EP_ISR_Handler+0x6d4>
 80024ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d113      	bne.n	800251a <PCD_EP_ISR_Handler+0x6d4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002500:	4413      	add	r3, r2
 8002502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800250c:	4413      	add	r3, r2
 800250e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002512:	63bb      	str	r3, [r7, #56]	; 0x38
 8002514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002516:	2200      	movs	r2, #0
 8002518:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800251a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	4619      	mov	r1, r3
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f005 f99a 	bl	800785a <HAL_PCD_DataInStageCallback>
 8002526:	e053      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002528:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d146      	bne.n	80025c2 <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800253c:	b29b      	uxth	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	3302      	adds	r3, #2
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4413      	add	r3, r2
 8002552:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800255c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002568:	429a      	cmp	r2, r3
 800256a:	d907      	bls.n	800257c <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 800256c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002574:	1ad2      	subs	r2, r2, r3
 8002576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002578:	619a      	str	r2, [r3, #24]
 800257a:	e002      	b.n	8002582 <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 800257c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800257e:	2200      	movs	r2, #0
 8002580:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800258a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	4619      	mov	r1, r3
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f005 f962 	bl	800785a <HAL_PCD_DataInStageCallback>
 8002596:	e01b      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800259a:	695a      	ldr	r2, [r3, #20]
 800259c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025a0:	441a      	add	r2, r3
 80025a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a4:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80025a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025ae:	441a      	add	r2, r3
 80025b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80025b2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ba:	4618      	mov	r0, r3
 80025bc:	f002 f80c 	bl	80045d8 <USB_EPStartXfer>
 80025c0:	e006      	b.n	80025d0 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80025c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80025c6:	461a      	mov	r2, r3
 80025c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f91b 	bl	8002806 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80025d8:	b29b      	uxth	r3, r3
 80025da:	b21b      	sxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f6ff ac37 	blt.w	8001e50 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3758      	adds	r7, #88	; 0x58
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	4613      	mov	r3, r2
 80025f8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d07e      	beq.n	8002702 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260c:	b29b      	uxth	r3, r3
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	3302      	adds	r3, #2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800262c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	8b7b      	ldrh	r3, [r7, #26]
 8002634:	429a      	cmp	r2, r3
 8002636:	d306      	bcc.n	8002646 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	8b7b      	ldrh	r3, [r7, #26]
 800263e:	1ad2      	subs	r2, r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	619a      	str	r2, [r3, #24]
 8002644:	e002      	b.n	800264c <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2200      	movs	r2, #0
 800264a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d123      	bne.n	800269c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800266a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800266e:	833b      	strh	r3, [r7, #24]
 8002670:	8b3b      	ldrh	r3, [r7, #24]
 8002672:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002676:	833b      	strh	r3, [r7, #24]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	461a      	mov	r2, r3
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	8b3b      	ldrh	r3, [r7, #24]
 8002688:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800268c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002690:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002698:	b29b      	uxth	r3, r3
 800269a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01f      	beq.n	80026e6 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c0:	82fb      	strh	r3, [r7, #22]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	441a      	add	r2, r3
 80026d0:	8afb      	ldrh	r3, [r7, #22]
 80026d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026e6:	8b7b      	ldrh	r3, [r7, #26]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 8087 	beq.w	80027fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	6959      	ldr	r1, [r3, #20]
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	891a      	ldrh	r2, [r3, #8]
 80026fa:	8b7b      	ldrh	r3, [r7, #26]
 80026fc:	f003 fca0 	bl	8006040 <USB_ReadPMA>
 8002700:	e07c      	b.n	80027fc <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	4413      	add	r3, r2
 8002716:	3306      	adds	r3, #6
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4413      	add	r3, r2
 8002720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800272a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699a      	ldr	r2, [r3, #24]
 8002730:	8b7b      	ldrh	r3, [r7, #26]
 8002732:	429a      	cmp	r2, r3
 8002734:	d306      	bcc.n	8002744 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	8b7b      	ldrh	r3, [r7, #26]
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	619a      	str	r2, [r3, #24]
 8002742:	e002      	b.n	800274a <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2200      	movs	r2, #0
 8002748:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d123      	bne.n	800279a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	881b      	ldrh	r3, [r3, #0]
 8002762:	b29b      	uxth	r3, r3
 8002764:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800276c:	83fb      	strh	r3, [r7, #30]
 800276e:	8bfb      	ldrh	r3, [r7, #30]
 8002770:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002774:	83fb      	strh	r3, [r7, #30]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	441a      	add	r2, r3
 8002784:	8bfb      	ldrh	r3, [r7, #30]
 8002786:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800278a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800278e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002792:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002796:	b29b      	uxth	r3, r3
 8002798:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d11f      	bne.n	80027e4 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	4413      	add	r3, r2
 80027b2:	881b      	ldrh	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	83bb      	strh	r3, [r7, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	441a      	add	r2, r3
 80027ce:	8bbb      	ldrh	r3, [r7, #28]
 80027d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80027e4:	8b7b      	ldrh	r3, [r7, #26]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d008      	beq.n	80027fc <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6818      	ldr	r0, [r3, #0]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	6959      	ldr	r1, [r3, #20]
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	895a      	ldrh	r2, [r3, #10]
 80027f6:	8b7b      	ldrh	r3, [r7, #26]
 80027f8:	f003 fc22 	bl	8006040 <USB_ReadPMA>
    }
  }

  return count;
 80027fc:	8b7b      	ldrh	r3, [r7, #26]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3720      	adds	r7, #32
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b0a4      	sub	sp, #144	; 0x90
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 81dd 	beq.w	8002bda <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	3302      	adds	r3, #2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	4413      	add	r3, r2
 800283e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002848:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002854:	429a      	cmp	r2, r3
 8002856:	d907      	bls.n	8002868 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002860:	1ad2      	subs	r2, r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	619a      	str	r2, [r3, #24]
 8002866:	e002      	b.n	800286e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	f040 80b9 	bne.w	80029ea <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	785b      	ldrb	r3, [r3, #1]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d126      	bne.n	80028ce <HAL_PCD_EP_DB_Transmit+0xc8>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800288e:	b29b      	uxth	r3, r3
 8002890:	461a      	mov	r2, r3
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	4413      	add	r3, r2
 8002896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	4413      	add	r3, r2
 80028a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	881b      	ldrh	r3, [r3, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	801a      	strh	r2, [r3, #0]
 80028b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	801a      	strh	r2, [r3, #0]
 80028cc:	e01a      	b.n	8002904 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	785b      	ldrb	r3, [r3, #1]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d116      	bne.n	8002904 <HAL_PCD_EP_DB_Transmit+0xfe>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	461a      	mov	r2, r3
 80028e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ea:	4413      	add	r3, r2
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	011a      	lsls	r2, r3, #4
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028fc:	633b      	str	r3, [r7, #48]	; 0x30
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d126      	bne.n	8002960 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002920:	b29b      	uxth	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	4413      	add	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	011a      	lsls	r2, r3, #4
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	4413      	add	r3, r2
 8002934:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002944:	b29a      	uxth	r2, r3
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	b29b      	uxth	r3, r3
 8002950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002958:	b29a      	uxth	r2, r3
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	801a      	strh	r2, [r3, #0]
 800295e:	e017      	b.n	8002990 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d113      	bne.n	8002990 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	4413      	add	r3, r2
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	011a      	lsls	r2, r3, #4
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	4413      	add	r3, r2
 8002984:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002988:	623b      	str	r3, [r7, #32]
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	2200      	movs	r2, #0
 800298e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	4619      	mov	r1, r3
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f004 ff5f 	bl	800785a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800299c:	88fb      	ldrh	r3, [r7, #6]
 800299e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 82fc 	beq.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c2:	82fb      	strh	r3, [r7, #22]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	461a      	mov	r2, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	8afb      	ldrh	r3, [r7, #22]
 80029d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	8013      	strh	r3, [r2, #0]
 80029e8:	e2da      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ea:	88fb      	ldrh	r3, [r7, #6]
 80029ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a0e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	461a      	mov	r2, r3
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	441a      	add	r2, r3
 8002a20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8002a24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	f040 82ae 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	69da      	ldr	r2, [r3, #28]
 8002a56:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a5a:	441a      	add	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d30b      	bcc.n	8002a84 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7c:	1ad2      	subs	r2, r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	621a      	str	r2, [r3, #32]
 8002a82:	e017      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d108      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8002a8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002a90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a9c:	e00a      	b.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d165      	bne.n	8002b88 <HAL_PCD_EP_DB_Transmit+0x382>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ad0:	4413      	add	r3, r2
 8002ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	011a      	lsls	r2, r3, #4
 8002ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002adc:	4413      	add	r3, r2
 8002ade:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af8:	2b3e      	cmp	r3, #62	; 0x3e
 8002afa:	d91d      	bls.n	8002b38 <HAL_PCD_EP_DB_Transmit+0x332>
 8002afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b00:	095b      	lsrs	r3, r3, #5
 8002b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <HAL_PCD_EP_DB_Transmit+0x310>
 8002b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b12:	3b01      	subs	r3, #1
 8002b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	029b      	lsls	r3, r3, #10
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	4313      	orrs	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	801a      	strh	r2, [r3, #0]
 8002b36:	e044      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <HAL_PCD_EP_DB_Transmit+0x350>
 8002b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b52:	801a      	strh	r2, [r3, #0]
 8002b54:	e035      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d002      	beq.n	8002b70 <HAL_PCD_EP_DB_Transmit+0x36a>
 8002b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	029b      	lsls	r3, r3, #10
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	801a      	strh	r2, [r3, #0]
 8002b86:	e01c      	b.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d118      	bne.n	8002bc2 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	647b      	str	r3, [r7, #68]	; 0x44
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ba4:	4413      	add	r3, r2
 8002ba6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	011a      	lsls	r2, r3, #4
 8002bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8002bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bc0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6959      	ldr	r1, [r3, #20]
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	891a      	ldrh	r2, [r3, #8]
 8002bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 f9ef 	bl	8005fb6 <USB_WritePMA>
 8002bd8:	e1e2      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	461a      	mov	r2, r3
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	3306      	adds	r3, #6
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c02:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d307      	bcc.n	8002c22 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	699a      	ldr	r2, [r3, #24]
 8002c16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002c1a:	1ad2      	subs	r2, r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	619a      	str	r2, [r3, #24]
 8002c20:	e002      	b.n	8002c28 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f040 80c0 	bne.w	8002db2 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d126      	bne.n	8002c88 <HAL_PCD_EP_DB_Transmit+0x482>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c4e:	4413      	add	r3, r2
 8002c50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	011a      	lsls	r2, r3, #4
 8002c58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c60:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c84:	801a      	strh	r2, [r3, #0]
 8002c86:	e01a      	b.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d116      	bne.n	8002cbe <HAL_PCD_EP_DB_Transmit+0x4b8>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	667b      	str	r3, [r7, #100]	; 0x64
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ca4:	4413      	add	r3, r2
 8002ca6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	011a      	lsls	r2, r3, #4
 8002cae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cb6:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cba:	2200      	movs	r2, #0
 8002cbc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	677b      	str	r3, [r7, #116]	; 0x74
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	785b      	ldrb	r3, [r3, #1]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d12b      	bne.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x51e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ce0:	4413      	add	r3, r2
 8002ce2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	011a      	lsls	r2, r3, #4
 8002cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cec:	4413      	add	r3, r2
 8002cee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d08:	801a      	strh	r2, [r3, #0]
 8002d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	e017      	b.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	785b      	ldrb	r3, [r3, #1]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d113      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x54e>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d3a:	4413      	add	r3, r2
 8002d3c:	677b      	str	r3, [r7, #116]	; 0x74
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	011a      	lsls	r2, r3, #4
 8002d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d46:	4413      	add	r3, r2
 8002d48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d4c:	673b      	str	r3, [r7, #112]	; 0x70
 8002d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d50:	2200      	movs	r2, #0
 8002d52:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f004 fd7d 	bl	800785a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002d60:	88fb      	ldrh	r3, [r7, #6]
 8002d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f040 811a 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	441a      	add	r2, r3
 8002d98:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
 8002db0:	e0f6      	b.n	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d121      	bne.n	8002e00 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dd6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	441a      	add	r2, r3
 8002de8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002df0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f040 80ca 	bne.w	8002fa0 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e14:	441a      	add	r2, r3
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e22:	441a      	add	r2, r3
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	6a1a      	ldr	r2, [r3, #32]
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d30b      	bcc.n	8002e4c <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e44:	1ad2      	subs	r2, r2, r3
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	621a      	str	r2, [r3, #32]
 8002e4a:	e017      	b.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8002e54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e64:	e00a      	b.n	8002e7c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	657b      	str	r3, [r7, #84]	; 0x54
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	785b      	ldrb	r3, [r3, #1]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d165      	bne.n	8002f56 <HAL_PCD_EP_DB_Transmit+0x750>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9e:	4413      	add	r3, r2
 8002ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	011a      	lsls	r2, r3, #4
 8002ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002eaa:	4413      	add	r3, r2
 8002eac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb4:	881b      	ldrh	r3, [r3, #0]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec0:	801a      	strh	r2, [r3, #0]
 8002ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ec8:	d91d      	bls.n	8002f06 <HAL_PCD_EP_DB_Transmit+0x700>
 8002eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ece:	095b      	lsrs	r3, r3, #5
 8002ed0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <HAL_PCD_EP_DB_Transmit+0x6de>
 8002ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ee4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	029b      	lsls	r3, r3, #10
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	e041      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10a      	bne.n	8002f24 <HAL_PCD_EP_DB_Transmit+0x71e>
 8002f0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f20:	801a      	strh	r2, [r3, #0]
 8002f22:	e032      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f28:	085b      	lsrs	r3, r3, #1
 8002f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <HAL_PCD_EP_DB_Transmit+0x738>
 8002f38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	029b      	lsls	r3, r3, #10
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f52:	801a      	strh	r2, [r3, #0]
 8002f54:	e019      	b.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d115      	bne.n	8002f8a <HAL_PCD_EP_DB_Transmit+0x784>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	461a      	mov	r2, r3
 8002f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6c:	4413      	add	r3, r2
 8002f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	011a      	lsls	r2, r3, #4
 8002f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f78:	4413      	add	r3, r2
 8002f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002f7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f88:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6818      	ldr	r0, [r3, #0]
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	895a      	ldrh	r2, [r3, #10]
 8002f96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 f80b 	bl	8005fb6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	881b      	ldrh	r3, [r3, #0]
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fba:	82bb      	strh	r3, [r7, #20]
 8002fbc:	8abb      	ldrh	r3, [r7, #20]
 8002fbe:	f083 0310 	eor.w	r3, r3, #16
 8002fc2:	82bb      	strh	r3, [r7, #20]
 8002fc4:	8abb      	ldrh	r3, [r7, #20]
 8002fc6:	f083 0320 	eor.w	r3, r3, #32
 8002fca:	82bb      	strh	r3, [r7, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	441a      	add	r2, r3
 8002fda:	8abb      	ldrh	r3, [r7, #20]
 8002fdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fe0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fe4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3790      	adds	r7, #144	; 0x90
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}

08002ffa <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b087      	sub	sp, #28
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	607b      	str	r3, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	817b      	strh	r3, [r7, #10]
 8003008:	4613      	mov	r3, r2
 800300a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800300c:	897b      	ldrh	r3, [r7, #10]
 800300e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003012:	b29b      	uxth	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e009      	b.n	8003044 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003030:	897a      	ldrh	r2, [r7, #10]
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4413      	add	r3, r2
 8003042:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003044:	893b      	ldrh	r3, [r7, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d107      	bne.n	800305a <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	b29a      	uxth	r2, r3
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	80da      	strh	r2, [r3, #6]
 8003058:	e00b      	b.n	8003072 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2201      	movs	r2, #1
 800305e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	b29a      	uxth	r2, r3
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0c1b      	lsrs	r3, r3, #16
 800306c:	b29a      	uxth	r2, r3
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003072:	2300      	movs	r3, #0
}
 8003074:	4618      	mov	r0, r3
 8003076:	371c      	adds	r7, #28
 8003078:	46bd      	mov	sp, r7
 800307a:	bc80      	pop	{r7}
 800307c:	4770      	bx	lr
	...

08003080 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e272      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 8087 	beq.w	80031ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030a0:	4b92      	ldr	r3, [pc, #584]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f003 030c 	and.w	r3, r3, #12
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d00c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030ac:	4b8f      	ldr	r3, [pc, #572]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b08      	cmp	r3, #8
 80030b6:	d112      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
 80030b8:	4b8c      	ldr	r3, [pc, #560]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030c4:	d10b      	bne.n	80030de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c6:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06c      	beq.n	80031ac <HAL_RCC_OscConfig+0x12c>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d168      	bne.n	80031ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e24c      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e6:	d106      	bne.n	80030f6 <HAL_RCC_OscConfig+0x76>
 80030e8:	4b80      	ldr	r3, [pc, #512]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7f      	ldr	r2, [pc, #508]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	e02e      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10c      	bne.n	8003118 <HAL_RCC_OscConfig+0x98>
 80030fe:	4b7b      	ldr	r3, [pc, #492]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a7a      	ldr	r2, [pc, #488]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	4b78      	ldr	r3, [pc, #480]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a77      	ldr	r2, [pc, #476]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003110:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0xbc>
 8003122:	4b72      	ldr	r3, [pc, #456]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a71      	ldr	r2, [pc, #452]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6f      	ldr	r3, [pc, #444]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6e      	ldr	r2, [pc, #440]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xd4>
 800313c:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b68      	ldr	r3, [pc, #416]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a67      	ldr	r2, [pc, #412]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd ff60 	bl	8001020 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ff5c 	bl	8001020 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e200      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5d      	ldr	r3, [pc, #372]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xe4>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd ff4c 	bl	8001020 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ff48 	bl	8001020 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1ec      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x10c>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031ba:	4b4c      	ldr	r3, [pc, #304]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
 80031d2:	4b46      	ldr	r3, [pc, #280]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b43      	ldr	r3, [pc, #268]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c0      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3d      	ldr	r3, [pc, #244]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4939      	ldr	r1, [pc, #228]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fd ff01 	bl	8001020 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd fefd 	bl	8001020 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2d      	ldr	r3, [pc, #180]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b2a      	ldr	r3, [pc, #168]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4927      	ldr	r1, [pc, #156]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_RCC_OscConfig+0x270>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fee0 	bl	8001020 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd fedc 	bl	8001020 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e180      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d03a      	beq.n	8003304 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d019      	beq.n	80032ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b17      	ldr	r3, [pc, #92]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329c:	f7fd fec0 	bl	8001020 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fd febc 	bl	8001020 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e160      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_RCC_OscConfig+0x26c>)
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032c2:	2001      	movs	r0, #1
 80032c4:	f000 fa9c 	bl	8003800 <RCC_Delay>
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_OscConfig+0x274>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7fd fea6 	bl	8001020 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d6:	e00f      	b.n	80032f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d8:	f7fd fea2 	bl	8001020 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d908      	bls.n	80032f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e146      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000
 80032f0:	42420000 	.word	0x42420000
 80032f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f8:	4b92      	ldr	r3, [pc, #584]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e9      	bne.n	80032d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80a6 	beq.w	800345e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003312:	2300      	movs	r3, #0
 8003314:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003316:	4b8b      	ldr	r3, [pc, #556]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10d      	bne.n	800333e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b88      	ldr	r3, [pc, #544]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	4a87      	ldr	r2, [pc, #540]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800332c:	61d3      	str	r3, [r2, #28]
 800332e:	4b85      	ldr	r3, [pc, #532]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800334a:	4b7f      	ldr	r3, [pc, #508]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7e      	ldr	r2, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fd fe63 	bl	8001020 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fd fe5f 	bl	8001020 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b64      	cmp	r3, #100	; 0x64
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e103      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003370:	4b75      	ldr	r3, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x4c8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x312>
 8003384:	4b6f      	ldr	r3, [pc, #444]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	4a6e      	ldr	r2, [pc, #440]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6213      	str	r3, [r2, #32]
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x334>
 800339a:	4b6a      	ldr	r3, [pc, #424]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a69      	ldr	r2, [pc, #420]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	4b67      	ldr	r3, [pc, #412]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a66      	ldr	r2, [pc, #408]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6213      	str	r3, [r2, #32]
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x356>
 80033bc:	4b61      	ldr	r3, [pc, #388]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	4a60      	ldr	r2, [pc, #384]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6213      	str	r3, [r2, #32]
 80033c8:	4b5e      	ldr	r3, [pc, #376]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4a5d      	ldr	r2, [pc, #372]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6213      	str	r3, [r2, #32]
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x36e>
 80033d6:	4b5b      	ldr	r3, [pc, #364]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	4a5a      	ldr	r2, [pc, #360]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6213      	str	r3, [r2, #32]
 80033e2:	4b58      	ldr	r3, [pc, #352]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e4:	6a1b      	ldr	r3, [r3, #32]
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f6:	f7fd fe13 	bl	8001020 <HAL_GetTick>
 80033fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fd fe0f 	bl	8001020 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0b1      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003414:	4b4b      	ldr	r3, [pc, #300]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x37e>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003422:	f7fd fdfd 	bl	8001020 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fd fdf9 	bl	8001020 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e09b      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003440:	4b40      	ldr	r3, [pc, #256]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d105      	bne.n	800345e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003452:	4b3c      	ldr	r3, [pc, #240]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	4a3b      	ldr	r2, [pc, #236]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800345c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 8087 	beq.w	8003576 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003468:	4b36      	ldr	r3, [pc, #216]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 030c 	and.w	r3, r3, #12
 8003470:	2b08      	cmp	r3, #8
 8003472:	d061      	beq.n	8003538 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	2b02      	cmp	r3, #2
 800347a:	d146      	bne.n	800350a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800347c:	4b33      	ldr	r3, [pc, #204]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003482:	f7fd fdcd 	bl	8001020 <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fd fdc9 	bl	8001020 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e06d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800349c:	4b29      	ldr	r3, [pc, #164]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d108      	bne.n	80034c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80034b2:	4b24      	ldr	r3, [pc, #144]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4921      	ldr	r1, [pc, #132]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c4:	4b1f      	ldr	r3, [pc, #124]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a19      	ldr	r1, [r3, #32]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	430b      	orrs	r3, r1
 80034d6:	491b      	ldr	r1, [pc, #108]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b1b      	ldr	r3, [pc, #108]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7fd fd9d 	bl	8001020 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ea:	f7fd fd99 	bl	8001020 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034fc:	4b11      	ldr	r3, [pc, #68]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x46a>
 8003508:	e035      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCC_OscConfig+0x4cc>)
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fd86 	bl	8001020 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003518:	f7fd fd82 	bl	8001020 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e026      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0x498>
 8003536:	e01e      	b.n	8003576 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d107      	bne.n	8003550 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e019      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
 8003544:	40021000 	.word	0x40021000
 8003548:	40007000 	.word	0x40007000
 800354c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003550:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x500>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	429a      	cmp	r2, r3
 8003562:	d106      	bne.n	8003572 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	429a      	cmp	r2, r3
 8003570:	d001      	beq.n	8003576 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000

08003584 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0d0      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b6a      	ldr	r3, [pc, #424]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d910      	bls.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b67      	ldr	r3, [pc, #412]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f023 0207 	bic.w	r2, r3, #7
 80035ae:	4965      	ldr	r1, [pc, #404]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	4b63      	ldr	r3, [pc, #396]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d001      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0b8      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d020      	beq.n	8003616 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d005      	beq.n	80035ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e0:	4b59      	ldr	r3, [pc, #356]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4a58      	ldr	r2, [pc, #352]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f8:	4b53      	ldr	r3, [pc, #332]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80035fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003602:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003604:	4b50      	ldr	r3, [pc, #320]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	494d      	ldr	r1, [pc, #308]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003612:	4313      	orrs	r3, r2
 8003614:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d040      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d107      	bne.n	800363a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800362a:	4b47      	ldr	r3, [pc, #284]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d115      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e07f      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b41      	ldr	r3, [pc, #260]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e073      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3d      	ldr	r3, [pc, #244]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06b      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b39      	ldr	r3, [pc, #228]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4936      	ldr	r1, [pc, #216]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	4313      	orrs	r3, r2
 8003672:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fd fcd4 	bl	8001020 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fd fcd0 	bl	8001020 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	; 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e053      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b27      	ldr	r3, [pc, #156]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d210      	bcs.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4922      	ldr	r1, [pc, #136]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e032      	b.n	800373a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0304 	and.w	r3, r3, #4
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e0:	4b19      	ldr	r3, [pc, #100]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4916      	ldr	r1, [pc, #88]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036fe:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	490e      	ldr	r1, [pc, #56]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003712:	f000 f821 	bl	8003758 <HAL_RCC_GetSysClockFreq>
 8003716:	4602      	mov	r2, r0
 8003718:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	091b      	lsrs	r3, r3, #4
 800371e:	f003 030f 	and.w	r3, r3, #15
 8003722:	490a      	ldr	r1, [pc, #40]	; (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	5ccb      	ldrb	r3, [r1, r3]
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_RCC_ClockConfig+0x1cc>)
 800372c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCC_ClockConfig+0x1d0>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fc32 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40022000 	.word	0x40022000
 8003748:	40021000 	.word	0x40021000
 800374c:	08007d70 	.word	0x08007d70
 8003750:	20000000 	.word	0x20000000
 8003754:	20000004 	.word	0x20000004

08003758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003772:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x30>
 8003782:	2b08      	cmp	r3, #8
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x36>
 8003786:	e027      	b.n	80037d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800378a:	613b      	str	r3, [r7, #16]
      break;
 800378c:	e027      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0c9b      	lsrs	r3, r3, #18
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	4a17      	ldr	r2, [pc, #92]	; (80037f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003798:	5cd3      	ldrb	r3, [r2, r3]
 800379a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d010      	beq.n	80037c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_GetSysClockFreq+0x94>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	0c5b      	lsrs	r3, r3, #17
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	4a11      	ldr	r2, [pc, #68]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80037b2:	5cd3      	ldrb	r3, [r2, r3]
 80037b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a0d      	ldr	r2, [pc, #52]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037ba:	fb03 f202 	mul.w	r2, r3, r2
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e004      	b.n	80037d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a0c      	ldr	r2, [pc, #48]	; (80037fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80037cc:	fb02 f303 	mul.w	r3, r2, r3
 80037d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	613b      	str	r3, [r7, #16]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80037da:	613b      	str	r3, [r7, #16]
      break;
 80037dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037de:	693b      	ldr	r3, [r7, #16]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	371c      	adds	r7, #28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	007a1200 	.word	0x007a1200
 80037f4:	08007d80 	.word	0x08007d80
 80037f8:	08007d90 	.word	0x08007d90
 80037fc:	003d0900 	.word	0x003d0900

08003800 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <RCC_Delay+0x34>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <RCC_Delay+0x38>)
 800380e:	fba2 2303 	umull	r2, r3, r2, r3
 8003812:	0a5b      	lsrs	r3, r3, #9
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	fb02 f303 	mul.w	r3, r2, r3
 800381a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800381c:	bf00      	nop
  }
  while (Delay --);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	1e5a      	subs	r2, r3, #1
 8003822:	60fa      	str	r2, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1f9      	bne.n	800381c <RCC_Delay+0x1c>
}
 8003828:	bf00      	nop
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr
 8003834:	20000000 	.word	0x20000000
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b00      	cmp	r3, #0
 8003856:	d07d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385c:	4b4f      	ldr	r3, [pc, #316]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800385e:	69db      	ldr	r3, [r3, #28]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10d      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003868:	4b4c      	ldr	r3, [pc, #304]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	61d3      	str	r3, [r2, #28]
 8003874:	4b49      	ldr	r3, [pc, #292]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003880:	2301      	movs	r3, #1
 8003882:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d118      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a42      	ldr	r2, [pc, #264]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800389a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800389c:	f7fd fbc0 	bl	8001020 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a2:	e008      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a4:	f7fd fbbc 	bl	8001020 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b64      	cmp	r3, #100	; 0x64
 80038b0:	d901      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e06d      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b6:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d02e      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d027      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038e0:	4b2e      	ldr	r3, [pc, #184]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d014      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fb8b 	bl	8001020 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390c:	e00a      	b.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fd fb87 	bl	8001020 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	; 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d901      	bls.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e036      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0ee      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	4917      	ldr	r1, [pc, #92]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800393e:	4313      	orrs	r3, r2
 8003940:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394a:	69db      	ldr	r3, [r3, #28]
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d008      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	490b      	ldr	r1, [pc, #44]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800396e:	4313      	orrs	r3, r2
 8003970:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0310 	and.w	r3, r3, #16
 800397a:	2b00      	cmp	r3, #0
 800397c:	d008      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800397e:	4b07      	ldr	r3, [pc, #28]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	4904      	ldr	r1, [pc, #16]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	40021000 	.word	0x40021000
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42420440 	.word	0x42420440

080039a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80039a8:	b084      	sub	sp, #16
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	f107 0014 	add.w	r0, r7, #20
 80039b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	b004      	add	sp, #16
 80039c6:	4770      	bx	lr

080039c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039d8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80039dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bc80      	pop	{r7}
 80039f2:	4770      	bx	lr

080039f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80039fc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003a00:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	4013      	ands	r3, r2
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	4770      	bx	lr

08003a40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003a40:	b084      	sub	sp, #16
 8003a42:	b480      	push	{r7}
 8003a44:	b083      	sub	sp, #12
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	f107 0014 	add.w	r0, r7, #20
 8003a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	b004      	add	sp, #16
 8003a7e:	4770      	bx	lr

08003a80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b09d      	sub	sp, #116	; 0x74
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aa6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	78db      	ldrb	r3, [r3, #3]
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	d81f      	bhi.n	8003af2 <USB_ActivateEndpoint+0x72>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <USB_ActivateEndpoint+0x38>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003ac9 	.word	0x08003ac9
 8003abc:	08003ae5 	.word	0x08003ae5
 8003ac0:	08003afb 	.word	0x08003afb
 8003ac4:	08003ad7 	.word	0x08003ad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003ac8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003ad4:	e012      	b.n	8003afc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003ad6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ada:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003ade:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003ae2:	e00b      	b.n	8003afc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003ae8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8003af0:	e004      	b.n	8003afc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8003af8:	e000      	b.n	8003afc <USB_ActivateEndpoint+0x7c>
      break;
 8003afa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	441a      	add	r2, r3
 8003b06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	881b      	ldrh	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	441a      	add	r2, r3
 8003b4c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003b50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	7b1b      	ldrb	r3, [r3, #12]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 8178 	bne.w	8003e5e <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	785b      	ldrb	r3, [r3, #1]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f000 8084 	beq.w	8003c80 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	61bb      	str	r3, [r7, #24]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	461a      	mov	r2, r3
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	4413      	add	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	011a      	lsls	r2, r3, #4
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b9a:	617b      	str	r3, [r7, #20]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	88db      	ldrh	r3, [r3, #6]
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	4413      	add	r3, r2
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	827b      	strh	r3, [r7, #18]
 8003bba:	8a7b      	ldrh	r3, [r7, #18]
 8003bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <USB_ActivateEndpoint+0x17c>
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bda:	823b      	strh	r3, [r7, #16]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	441a      	add	r2, r3
 8003be6:	8a3b      	ldrh	r3, [r7, #16]
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	78db      	ldrb	r3, [r3, #3]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d020      	beq.n	8003c46 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c1a:	81bb      	strh	r3, [r7, #12]
 8003c1c:	89bb      	ldrh	r3, [r7, #12]
 8003c1e:	f083 0320 	eor.w	r3, r3, #32
 8003c22:	81bb      	strh	r3, [r7, #12]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	441a      	add	r2, r3
 8003c2e:	89bb      	ldrh	r3, [r7, #12]
 8003c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	8013      	strh	r3, [r2, #0]
 8003c44:	e2d5      	b.n	80041f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4413      	add	r3, r2
 8003c50:	881b      	ldrh	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c5c:	81fb      	strh	r3, [r7, #14]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	89fb      	ldrh	r3, [r7, #14]
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]
 8003c7e:	e2b8      	b.n	80041f2 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	633b      	str	r3, [r7, #48]	; 0x30
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	4413      	add	r3, r2
 8003c92:	633b      	str	r3, [r7, #48]	; 0x30
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	011a      	lsls	r2, r3, #4
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	88db      	ldrh	r3, [r3, #6]
 8003ca8:	085b      	lsrs	r3, r3, #1
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	005b      	lsls	r3, r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	4413      	add	r3, r2
 8003cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce2:	b29a      	uxth	r2, r3
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	801a      	strh	r2, [r3, #0]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b3e      	cmp	r3, #62	; 0x3e
 8003cee:	d91d      	bls.n	8003d2c <USB_ActivateEndpoint+0x2ac>
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f003 031f 	and.w	r3, r3, #31
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d102      	bne.n	8003d0a <USB_ActivateEndpoint+0x28a>
 8003d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d06:	3b01      	subs	r3, #1
 8003d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	881b      	ldrh	r3, [r3, #0]
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	029b      	lsls	r3, r3, #10
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	801a      	strh	r2, [r3, #0]
 8003d2a:	e026      	b.n	8003d7a <USB_ActivateEndpoint+0x2fa>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <USB_ActivateEndpoint+0x2ca>
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	881b      	ldrh	r3, [r3, #0]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d46:	801a      	strh	r2, [r3, #0]
 8003d48:	e017      	b.n	8003d7a <USB_ActivateEndpoint+0x2fa>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	691b      	ldr	r3, [r3, #16]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	f003 0301 	and.w	r3, r3, #1
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <USB_ActivateEndpoint+0x2e4>
 8003d5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d60:	3301      	adds	r3, #1
 8003d62:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	4313      	orrs	r3, r2
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	4413      	add	r3, r2
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d01b      	beq.n	8003dca <USB_ActivateEndpoint+0x34a>
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	4413      	add	r3, r2
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da8:	843b      	strh	r3, [r7, #32]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	441a      	add	r2, r3
 8003db4:	8c3b      	ldrh	r3, [r7, #32]
 8003db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d124      	bne.n	8003e1c <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de8:	83bb      	strh	r3, [r7, #28]
 8003dea:	8bbb      	ldrh	r3, [r7, #28]
 8003dec:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003df0:	83bb      	strh	r3, [r7, #28]
 8003df2:	8bbb      	ldrh	r3, [r7, #28]
 8003df4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003df8:	83bb      	strh	r3, [r7, #28]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	441a      	add	r2, r3
 8003e04:	8bbb      	ldrh	r3, [r7, #28]
 8003e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	8013      	strh	r3, [r2, #0]
 8003e1a:	e1ea      	b.n	80041f2 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e32:	83fb      	strh	r3, [r7, #30]
 8003e34:	8bfb      	ldrh	r3, [r7, #30]
 8003e36:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003e3a:	83fb      	strh	r3, [r7, #30]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	441a      	add	r2, r3
 8003e46:	8bfb      	ldrh	r3, [r7, #30]
 8003e48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	8013      	strh	r3, [r2, #0]
 8003e5c:	e1c9      	b.n	80041f2 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	78db      	ldrb	r3, [r3, #3]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d11e      	bne.n	8003ea4 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	4413      	add	r3, r2
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e7c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	441a      	add	r2, r3
 8003e8a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8003e8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e96:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	8013      	strh	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	441a      	add	r2, r3
 8003ec8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	461a      	mov	r2, r3
 8003eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ef0:	4413      	add	r3, r2
 8003ef2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	011a      	lsls	r2, r3, #4
 8003efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f02:	65bb      	str	r3, [r7, #88]	; 0x58
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	891b      	ldrh	r3, [r3, #8]
 8003f08:	085b      	lsrs	r3, r3, #1
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f12:	801a      	strh	r2, [r3, #0]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	657b      	str	r3, [r7, #84]	; 0x54
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f24:	4413      	add	r3, r2
 8003f26:	657b      	str	r3, [r7, #84]	; 0x54
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	011a      	lsls	r2, r3, #4
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f36:	653b      	str	r3, [r7, #80]	; 0x50
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	895b      	ldrh	r3, [r3, #10]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f46:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	785b      	ldrb	r3, [r3, #1]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8093 	bne.w	8004078 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d01b      	beq.n	8003fa6 <USB_ActivateEndpoint+0x526>
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	881b      	ldrh	r3, [r3, #0]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	441a      	add	r2, r3
 8003f90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4413      	add	r3, r2
 8003fb0:	881b      	ldrh	r3, [r3, #0]
 8003fb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003fb4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01b      	beq.n	8003ff6 <USB_ActivateEndpoint+0x576>
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	441a      	add	r2, r3
 8003fe0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400c:	873b      	strh	r3, [r7, #56]	; 0x38
 800400e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004010:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004014:	873b      	strh	r3, [r7, #56]	; 0x38
 8004016:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004018:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800401c:	873b      	strh	r3, [r7, #56]	; 0x38
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	441a      	add	r2, r3
 8004028:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800402a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800402e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800403a:	b29b      	uxth	r3, r3
 800403c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	b29b      	uxth	r3, r3
 800404c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004054:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	441a      	add	r2, r3
 8004060:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004072:	b29b      	uxth	r3, r3
 8004074:	8013      	strh	r3, [r2, #0]
 8004076:	e0bc      	b.n	80041f2 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004088:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800408c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <USB_ActivateEndpoint+0x650>
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	881b      	ldrh	r3, [r3, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	441a      	add	r2, r3
 80040b8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	881b      	ldrh	r3, [r3, #0]
 80040dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80040e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01d      	beq.n	8004128 <USB_ActivateEndpoint+0x6a8>
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4413      	add	r3, r2
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004102:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	441a      	add	r2, r3
 8004110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800411c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004124:	b29b      	uxth	r3, r3
 8004126:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	78db      	ldrb	r3, [r3, #3]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d024      	beq.n	800417a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004146:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800414a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800414e:	f083 0320 	eor.w	r3, r3, #32
 8004152:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	441a      	add	r2, r3
 8004160:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004164:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004168:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800416c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004174:	b29b      	uxth	r3, r3
 8004176:	8013      	strh	r3, [r2, #0]
 8004178:	e01d      	b.n	80041b6 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800418c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004190:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80041a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041cc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80041de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80041f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3774      	adds	r7, #116	; 0x74
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr

08004200 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004200:	b480      	push	{r7}
 8004202:	b08d      	sub	sp, #52	; 0x34
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	7b1b      	ldrb	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 808e 	bne.w	8004330 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d044      	beq.n	80042a6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	81bb      	strh	r3, [r7, #12]
 800422a:	89bb      	ldrh	r3, [r7, #12]
 800422c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <USB_DeactivateEndpoint+0x6c>
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	b29b      	uxth	r3, r3
 8004242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	817b      	strh	r3, [r7, #10]
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	441a      	add	r2, r3
 8004256:	897b      	ldrh	r3, [r7, #10]
 8004258:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004260:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004264:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004268:	b29b      	uxth	r3, r3
 800426a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4413      	add	r3, r2
 8004276:	881b      	ldrh	r3, [r3, #0]
 8004278:	b29b      	uxth	r3, r3
 800427a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004282:	813b      	strh	r3, [r7, #8]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	441a      	add	r2, r3
 800428e:	893b      	ldrh	r3, [r7, #8]
 8004290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	8013      	strh	r3, [r2, #0]
 80042a4:	e192      	b.n	80045cc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	827b      	strh	r3, [r7, #18]
 80042b4:	8a7b      	ldrh	r3, [r7, #18]
 80042b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d01b      	beq.n	80042f6 <USB_DeactivateEndpoint+0xf6>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d4:	823b      	strh	r3, [r7, #16]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	441a      	add	r2, r3
 80042e0:	8a3b      	ldrh	r3, [r7, #16]
 80042e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4413      	add	r3, r2
 8004300:	881b      	ldrh	r3, [r3, #0]
 8004302:	b29b      	uxth	r3, r3
 8004304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	81fb      	strh	r3, [r7, #14]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	89fb      	ldrh	r3, [r7, #14]
 800431a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432a:	b29b      	uxth	r3, r3
 800432c:	8013      	strh	r3, [r2, #0]
 800432e:	e14d      	b.n	80045cc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 80a5 	bne.w	8004484 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	843b      	strh	r3, [r7, #32]
 8004348:	8c3b      	ldrh	r3, [r7, #32]
 800434a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01b      	beq.n	800438a <USB_DeactivateEndpoint+0x18a>
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	881b      	ldrh	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004364:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004368:	83fb      	strh	r3, [r7, #30]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	441a      	add	r2, r3
 8004374:	8bfb      	ldrh	r3, [r7, #30]
 8004376:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800437a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800437e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004386:	b29b      	uxth	r3, r3
 8004388:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	83bb      	strh	r3, [r7, #28]
 8004398:	8bbb      	ldrh	r3, [r7, #28]
 800439a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d01b      	beq.n	80043da <USB_DeactivateEndpoint+0x1da>
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	881b      	ldrh	r3, [r3, #0]
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	837b      	strh	r3, [r7, #26]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	441a      	add	r2, r3
 80043c4:	8b7b      	ldrh	r3, [r7, #26]
 80043c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f0:	833b      	strh	r3, [r7, #24]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	441a      	add	r2, r3
 80043fc:	8b3b      	ldrh	r3, [r7, #24]
 80043fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004402:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800440e:	b29b      	uxth	r3, r3
 8004410:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004424:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004428:	82fb      	strh	r3, [r7, #22]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8afb      	ldrh	r3, [r7, #22]
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800445c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004460:	82bb      	strh	r3, [r7, #20]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	441a      	add	r2, r3
 800446c:	8abb      	ldrh	r3, [r7, #20]
 800446e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004472:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800447a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800447e:	b29b      	uxth	r3, r3
 8004480:	8013      	strh	r3, [r2, #0]
 8004482:	e0a3      	b.n	80045cc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004492:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <USB_DeactivateEndpoint+0x2d4>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	4413      	add	r3, r2
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80044e2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01b      	beq.n	8004524 <USB_DeactivateEndpoint+0x324>
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004502:	853b      	strh	r3, [r7, #40]	; 0x28
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	441a      	add	r2, r3
 800450e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004510:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004514:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800451c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004520:	b29b      	uxth	r3, r3
 8004522:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	881b      	ldrh	r3, [r3, #0]
 8004530:	b29b      	uxth	r3, r3
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800453a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	441a      	add	r2, r3
 8004546:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800454c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004550:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004558:	b29b      	uxth	r3, r3
 800455a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800456e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	441a      	add	r2, r3
 800457e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004580:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004584:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004588:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800458c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004590:	b29b      	uxth	r3, r3
 8004592:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3734      	adds	r7, #52	; 0x34
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b0c2      	sub	sp, #264	; 0x108
 80045dc:	af00      	add	r7, sp, #0
 80045de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045e6:	6018      	str	r0, [r3, #0]
 80045e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f0:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f040 86b7 	bne.w	8005372 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699a      	ldr	r2, [r3, #24]
 8004610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	429a      	cmp	r2, r3
 800461e:	d908      	bls.n	8004632 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004630:	e007      	b.n	8004642 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004632:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004636:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	7b1b      	ldrb	r3, [r3, #12]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d13a      	bne.n	80046c8 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6959      	ldr	r1, [r3, #20]
 800465e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	88da      	ldrh	r2, [r3, #6]
 800466a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800466e:	b29b      	uxth	r3, r3
 8004670:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004674:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004678:	6800      	ldr	r0, [r0, #0]
 800467a:	f001 fc9c 	bl	8005fb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800467e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800468e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004698:	b29b      	uxth	r3, r3
 800469a:	461a      	mov	r2, r3
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4413      	add	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	011a      	lsls	r2, r3, #4
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046b8:	60fb      	str	r3, [r7, #12]
 80046ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	801a      	strh	r2, [r3, #0]
 80046c4:	f000 be1f 	b.w	8005306 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80046c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	78db      	ldrb	r3, [r3, #3]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	f040 8462 	bne.w	8004f9e <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80046da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6a1a      	ldr	r2, [r3, #32]
 80046e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f240 83df 	bls.w	8004eb6 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80046fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004706:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800471a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004730:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	441a      	add	r2, r3
 800473c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004748:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800474c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004750:	b29b      	uxth	r3, r3
 8004752:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6a1a      	ldr	r2, [r3, #32]
 8004760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004764:	1ad2      	subs	r2, r2, r3
 8004766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800476a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004776:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004780:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	b29b      	uxth	r3, r3
 8004790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 81c7 	beq.w	8004b28 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800479a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800479e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
 80047a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	785b      	ldrb	r3, [r3, #1]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d177      	bne.n	80048a6 <USB_EPStartXfer+0x2ce>
 80047b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80047c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	461a      	mov	r2, r3
 80047d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d6:	4413      	add	r3, r2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80047de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	011a      	lsls	r2, r3, #4
 80047e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ea:	4413      	add	r3, r2
 80047ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
 80047f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004800:	801a      	strh	r2, [r3, #0]
 8004802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004806:	2b3e      	cmp	r3, #62	; 0x3e
 8004808:	d921      	bls.n	800484e <USB_EPStartXfer+0x276>
 800480a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2b00      	cmp	r3, #0
 800481e:	d104      	bne.n	800482a <USB_EPStartXfer+0x252>
 8004820:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004824:	3b01      	subs	r3, #1
 8004826:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800482a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	b29a      	uxth	r2, r3
 8004830:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004834:	b29b      	uxth	r3, r3
 8004836:	029b      	lsls	r3, r3, #10
 8004838:	b29b      	uxth	r3, r3
 800483a:	4313      	orrs	r3, r2
 800483c:	b29b      	uxth	r3, r3
 800483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004846:	b29a      	uxth	r2, r3
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e050      	b.n	80048f0 <USB_EPStartXfer+0x318>
 800484e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10a      	bne.n	800486c <USB_EPStartXfer+0x294>
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004864:	b29a      	uxth	r2, r3
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	801a      	strh	r2, [r3, #0]
 800486a:	e041      	b.n	80048f0 <USB_EPStartXfer+0x318>
 800486c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004870:	085b      	lsrs	r3, r3, #1
 8004872:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <USB_EPStartXfer+0x2b4>
 8004882:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004886:	3301      	adds	r3, #1
 8004888:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	b29a      	uxth	r2, r3
 8004892:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8004896:	b29b      	uxth	r3, r3
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	b29b      	uxth	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e024      	b.n	80048f0 <USB_EPStartXfer+0x318>
 80048a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	785b      	ldrb	r3, [r3, #1]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d11c      	bne.n	80048f0 <USB_EPStartXfer+0x318>
 80048b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	461a      	mov	r2, r3
 80048c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ca:	4413      	add	r3, r2
 80048cc:	633b      	str	r3, [r7, #48]	; 0x30
 80048ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	011a      	lsls	r2, r3, #4
 80048dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048de:	4413      	add	r3, r2
 80048e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80048f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80048f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	895b      	ldrh	r3, [r3, #10]
 80048fc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6959      	ldr	r1, [r3, #20]
 800490c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004910:	b29b      	uxth	r3, r3
 8004912:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004916:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800491a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800491e:	6800      	ldr	r0, [r0, #0]
 8004920:	f001 fb49 	bl	8005fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695a      	ldr	r2, [r3, #20]
 8004930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004934:	441a      	add	r2, r3
 8004936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800493a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6a1a      	ldr	r2, [r3, #32]
 800494e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	429a      	cmp	r2, r3
 800495c:	d90f      	bls.n	800497e <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800495e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	621a      	str	r2, [r3, #32]
 800497c:	e00e      	b.n	800499c <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800497e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004982:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800498e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2200      	movs	r2, #0
 800499a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800499c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	785b      	ldrb	r3, [r3, #1]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d177      	bne.n	8004a9c <USB_EPStartXfer+0x4c4>
 80049ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	461a      	mov	r2, r3
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	4413      	add	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
 80049d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	011a      	lsls	r2, r3, #4
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	4413      	add	r3, r2
 80049e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	801a      	strh	r2, [r3, #0]
 80049f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80049fc:	2b3e      	cmp	r3, #62	; 0x3e
 80049fe:	d921      	bls.n	8004a44 <USB_EPStartXfer+0x46c>
 8004a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a04:	095b      	lsrs	r3, r3, #5
 8004a06:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d104      	bne.n	8004a20 <USB_EPStartXfer+0x448>
 8004a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29a      	uxth	r2, r3
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	029b      	lsls	r3, r3, #10
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	4313      	orrs	r3, r2
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	801a      	strh	r2, [r3, #0]
 8004a42:	e056      	b.n	8004af2 <USB_EPStartXfer+0x51a>
 8004a44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <USB_EPStartXfer+0x48a>
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	881b      	ldrh	r3, [r3, #0]
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	801a      	strh	r2, [r3, #0]
 8004a60:	e047      	b.n	8004af2 <USB_EPStartXfer+0x51a>
 8004a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004a70:	f003 0301 	and.w	r3, r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <USB_EPStartXfer+0x4aa>
 8004a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	029b      	lsls	r3, r3, #10
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b29a      	uxth	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	801a      	strh	r2, [r3, #0]
 8004a9a:	e02a      	b.n	8004af2 <USB_EPStartXfer+0x51a>
 8004a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004aa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	785b      	ldrb	r3, [r3, #1]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d122      	bne.n	8004af2 <USB_EPStartXfer+0x51a>
 8004aac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	623b      	str	r3, [r7, #32]
 8004ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004abc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	4413      	add	r3, r2
 8004ace:	623b      	str	r3, [r7, #32]
 8004ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	011a      	lsls	r2, r3, #4
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	891b      	ldrh	r3, [r3, #8]
 8004afe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6959      	ldr	r1, [r3, #20]
 8004b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004b18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004b1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004b20:	6800      	ldr	r0, [r0, #0]
 8004b22:	f001 fa48 	bl	8005fb6 <USB_WritePMA>
 8004b26:	e3ee      	b.n	8005306 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d177      	bne.n	8004c28 <USB_EPStartXfer+0x650>
 8004b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	461a      	mov	r2, r3
 8004b56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b58:	4413      	add	r3, r2
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	011a      	lsls	r2, r3, #4
 8004b6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b72:	647b      	str	r3, [r7, #68]	; 0x44
 8004b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b76:	881b      	ldrh	r3, [r3, #0]
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b82:	801a      	strh	r2, [r3, #0]
 8004b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b88:	2b3e      	cmp	r3, #62	; 0x3e
 8004b8a:	d921      	bls.n	8004bd0 <USB_EPStartXfer+0x5f8>
 8004b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b90:	095b      	lsrs	r3, r3, #5
 8004b92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <USB_EPStartXfer+0x5d4>
 8004ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	029b      	lsls	r3, r3, #10
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bc8:	b29a      	uxth	r2, r3
 8004bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bcc:	801a      	strh	r2, [r3, #0]
 8004bce:	e056      	b.n	8004c7e <USB_EPStartXfer+0x6a6>
 8004bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <USB_EPStartXfer+0x616>
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e047      	b.n	8004c7e <USB_EPStartXfer+0x6a6>
 8004bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bf2:	085b      	lsrs	r3, r3, #1
 8004bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d004      	beq.n	8004c0e <USB_EPStartXfer+0x636>
 8004c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	029b      	lsls	r3, r3, #10
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	e02a      	b.n	8004c7e <USB_EPStartXfer+0x6a6>
 8004c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d122      	bne.n	8004c7e <USB_EPStartXfer+0x6a6>
 8004c38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	653b      	str	r3, [r7, #80]	; 0x50
 8004c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c58:	4413      	add	r3, r2
 8004c5a:	653b      	str	r3, [r7, #80]	; 0x50
 8004c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	011a      	lsls	r2, r3, #4
 8004c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c7c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	891b      	ldrh	r3, [r3, #8]
 8004c8a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004c92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6959      	ldr	r1, [r3, #20]
 8004c9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ca4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004ca8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004cac:	6800      	ldr	r0, [r0, #0]
 8004cae:	f001 f982 	bl	8005fb6 <USB_WritePMA>
            ep->xfer_buff += len;
 8004cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695a      	ldr	r2, [r3, #20]
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cc2:	441a      	add	r2, r3
 8004cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6a1a      	ldr	r2, [r3, #32]
 8004cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ce0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d90f      	bls.n	8004d0c <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8004cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004cf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004cfc:	1ad2      	subs	r2, r2, r3
 8004cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	621a      	str	r2, [r3, #32]
 8004d0a:	e00e      	b.n	8004d2a <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8004d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8004d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2200      	movs	r2, #0
 8004d28:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	643b      	str	r3, [r7, #64]	; 0x40
 8004d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	785b      	ldrb	r3, [r3, #1]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d177      	bne.n	8004e36 <USB_EPStartXfer+0x85e>
 8004d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	461a      	mov	r2, r3
 8004d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d66:	4413      	add	r3, r2
 8004d68:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	011a      	lsls	r2, r3, #4
 8004d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d80:	637b      	str	r3, [r7, #52]	; 0x34
 8004d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d90:	801a      	strh	r2, [r3, #0]
 8004d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d96:	2b3e      	cmp	r3, #62	; 0x3e
 8004d98:	d921      	bls.n	8004dde <USB_EPStartXfer+0x806>
 8004d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004da8:	f003 031f 	and.w	r3, r3, #31
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <USB_EPStartXfer+0x7e2>
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	3b01      	subs	r3, #1
 8004db6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dda:	801a      	strh	r2, [r3, #0]
 8004ddc:	e050      	b.n	8004e80 <USB_EPStartXfer+0x8a8>
 8004dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10a      	bne.n	8004dfc <USB_EPStartXfer+0x824>
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	881b      	ldrh	r3, [r3, #0]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004df4:	b29a      	uxth	r2, r3
 8004df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df8:	801a      	strh	r2, [r3, #0]
 8004dfa:	e041      	b.n	8004e80 <USB_EPStartXfer+0x8a8>
 8004dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e00:	085b      	lsrs	r3, r3, #1
 8004e02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d004      	beq.n	8004e1c <USB_EPStartXfer+0x844>
 8004e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e16:	3301      	adds	r3, #1
 8004e18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1e:	881b      	ldrh	r3, [r3, #0]
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e32:	801a      	strh	r2, [r3, #0]
 8004e34:	e024      	b.n	8004e80 <USB_EPStartXfer+0x8a8>
 8004e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	785b      	ldrb	r3, [r3, #1]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d11c      	bne.n	8004e80 <USB_EPStartXfer+0x8a8>
 8004e46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	461a      	mov	r2, r3
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	4413      	add	r3, r2
 8004e5c:	643b      	str	r3, [r7, #64]	; 0x40
 8004e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	011a      	lsls	r2, r3, #4
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e6e:	4413      	add	r3, r2
 8004e70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e7e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004e80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	895b      	ldrh	r3, [r3, #10]
 8004e8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004e94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6959      	ldr	r1, [r3, #20]
 8004e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004ea6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004eaa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004eae:	6800      	ldr	r0, [r0, #0]
 8004eb0:	f001 f881 	bl	8005fb6 <USB_WritePMA>
 8004eb4:	e227      	b.n	8005306 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004ee8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eec:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004ef0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ef4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	441a      	add	r2, r3
 8004f0a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f42:	4413      	add	r3, r2
 8004f44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	011a      	lsls	r2, r3, #4
 8004f54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f56:	4413      	add	r3, r2
 8004f58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	891b      	ldrh	r3, [r3, #8]
 8004f74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004f78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6959      	ldr	r1, [r3, #20]
 8004f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8004f8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	f001 f80d 	bl	8005fb6 <USB_WritePMA>
 8004f9c:	e1b3      	b.n	8005306 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004fae:	1ad2      	subs	r2, r2, r3
 8004fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	881b      	ldrh	r3, [r3, #0]
 8004fd8:	b29b      	uxth	r3, r3
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f000 80c6 	beq.w	8005170 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fe8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	673b      	str	r3, [r7, #112]	; 0x70
 8004ff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d177      	bne.n	80050f0 <USB_EPStartXfer+0xb18>
 8005000:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005004:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	66bb      	str	r3, [r7, #104]	; 0x68
 800500c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005010:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501a:	b29b      	uxth	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005020:	4413      	add	r3, r2
 8005022:	66bb      	str	r3, [r7, #104]	; 0x68
 8005024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	011a      	lsls	r2, r3, #4
 8005032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005034:	4413      	add	r3, r2
 8005036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800503a:	667b      	str	r3, [r7, #100]	; 0x64
 800503c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503e:	881b      	ldrh	r3, [r3, #0]
 8005040:	b29b      	uxth	r3, r3
 8005042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005046:	b29a      	uxth	r2, r3
 8005048:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800504a:	801a      	strh	r2, [r3, #0]
 800504c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005050:	2b3e      	cmp	r3, #62	; 0x3e
 8005052:	d921      	bls.n	8005098 <USB_EPStartXfer+0xac0>
 8005054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800505e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <USB_EPStartXfer+0xa9c>
 800506a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800506e:	3b01      	subs	r3, #1
 8005070:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005074:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29a      	uxth	r2, r3
 800507a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800507e:	b29b      	uxth	r3, r3
 8005080:	029b      	lsls	r3, r3, #10
 8005082:	b29b      	uxth	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b29b      	uxth	r3, r3
 8005088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800508c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005090:	b29a      	uxth	r2, r3
 8005092:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005094:	801a      	strh	r2, [r3, #0]
 8005096:	e050      	b.n	800513a <USB_EPStartXfer+0xb62>
 8005098:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10a      	bne.n	80050b6 <USB_EPStartXfer+0xade>
 80050a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050a2:	881b      	ldrh	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	e041      	b.n	800513a <USB_EPStartXfer+0xb62>
 80050b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d004      	beq.n	80050d6 <USB_EPStartXfer+0xafe>
 80050cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050d0:	3301      	adds	r3, #1
 80050d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80050d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29a      	uxth	r2, r3
 80050dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	029b      	lsls	r3, r3, #10
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4313      	orrs	r3, r2
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ec:	801a      	strh	r2, [r3, #0]
 80050ee:	e024      	b.n	800513a <USB_EPStartXfer+0xb62>
 80050f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	785b      	ldrb	r3, [r3, #1]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d11c      	bne.n	800513a <USB_EPStartXfer+0xb62>
 8005100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510e:	b29b      	uxth	r3, r3
 8005110:	461a      	mov	r2, r3
 8005112:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005114:	4413      	add	r3, r2
 8005116:	673b      	str	r3, [r7, #112]	; 0x70
 8005118:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800511c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	011a      	lsls	r2, r3, #4
 8005126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005128:	4413      	add	r3, r2
 800512a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800512e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005134:	b29a      	uxth	r2, r3
 8005136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005138:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800513a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800513e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	895b      	ldrh	r3, [r3, #10]
 8005146:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800514e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	6959      	ldr	r1, [r3, #20]
 8005156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800515a:	b29b      	uxth	r3, r3
 800515c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005160:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005164:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005168:	6800      	ldr	r0, [r0, #0]
 800516a:	f000 ff24 	bl	8005fb6 <USB_WritePMA>
 800516e:	e0ca      	b.n	8005306 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	785b      	ldrb	r3, [r3, #1]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d177      	bne.n	8005270 <USB_EPStartXfer+0xc98>
 8005180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800518c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051a0:	4413      	add	r3, r2
 80051a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	011a      	lsls	r2, r3, #4
 80051b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051b4:	4413      	add	r3, r2
 80051b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80051bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051be:	881b      	ldrh	r3, [r3, #0]
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ca:	801a      	strh	r2, [r3, #0]
 80051cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d0:	2b3e      	cmp	r3, #62	; 0x3e
 80051d2:	d921      	bls.n	8005218 <USB_EPStartXfer+0xc40>
 80051d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d104      	bne.n	80051f4 <USB_EPStartXfer+0xc1c>
 80051ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051ee:	3b01      	subs	r3, #1
 80051f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80051f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f6:	881b      	ldrh	r3, [r3, #0]
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80051fe:	b29b      	uxth	r3, r3
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	b29b      	uxth	r3, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	b29b      	uxth	r3, r3
 8005208:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800520c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005210:	b29a      	uxth	r2, r3
 8005212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005214:	801a      	strh	r2, [r3, #0]
 8005216:	e05c      	b.n	80052d2 <USB_EPStartXfer+0xcfa>
 8005218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <USB_EPStartXfer+0xc5e>
 8005220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b29b      	uxth	r3, r3
 8005226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800522a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800522e:	b29a      	uxth	r2, r3
 8005230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005232:	801a      	strh	r2, [r3, #0]
 8005234:	e04d      	b.n	80052d2 <USB_EPStartXfer+0xcfa>
 8005236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <USB_EPStartXfer+0xc7e>
 800524c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005250:	3301      	adds	r3, #1
 8005252:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005256:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29a      	uxth	r2, r3
 800525c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005260:	b29b      	uxth	r3, r3
 8005262:	029b      	lsls	r3, r3, #10
 8005264:	b29b      	uxth	r3, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	b29a      	uxth	r2, r3
 800526a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	e030      	b.n	80052d2 <USB_EPStartXfer+0xcfa>
 8005270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	785b      	ldrb	r3, [r3, #1]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d128      	bne.n	80052d2 <USB_EPStartXfer+0xcfa>
 8005280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005284:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800528e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529c:	b29b      	uxth	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052a4:	4413      	add	r3, r2
 80052a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80052aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	011a      	lsls	r2, r3, #4
 80052b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052bc:	4413      	add	r3, r2
 80052be:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80052d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80052d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	891b      	ldrh	r3, [r3, #8]
 80052de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6959      	ldr	r1, [r3, #20]
 80052ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80052f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80052fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005300:	6800      	ldr	r0, [r0, #0]
 8005302:	f000 fe58 	bl	8005fb6 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005306:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800530a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	897b      	ldrh	r3, [r7, #10]
 8005330:	f083 0310 	eor.w	r3, r3, #16
 8005334:	817b      	strh	r3, [r7, #10]
 8005336:	897b      	ldrh	r3, [r7, #10]
 8005338:	f083 0320 	eor.w	r3, r3, #32
 800533c:	817b      	strh	r3, [r7, #10]
 800533e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005342:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	441a      	add	r2, r3
 8005358:	897b      	ldrh	r3, [r7, #10]
 800535a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800535e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005362:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536a:	b29b      	uxth	r3, r3
 800536c:	8013      	strh	r3, [r2, #0]
 800536e:	f000 bcde 	b.w	8005d2e <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	7b1b      	ldrb	r3, [r3, #12]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f040 80bb 	bne.w	80054fa <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699a      	ldr	r2, [r3, #24]
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	d917      	bls.n	80053d0 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80053a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80053b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c0:	1ad2      	subs	r2, r2, r3
 80053c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	619a      	str	r2, [r3, #24]
 80053ce:	e00e      	b.n	80053ee <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80053d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80053e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80053ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800540a:	b29b      	uxth	r3, r3
 800540c:	461a      	mov	r2, r3
 800540e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005412:	4413      	add	r3, r2
 8005414:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800541c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	011a      	lsls	r2, r3, #4
 8005426:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800542a:	4413      	add	r3, r2
 800542c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005438:	881b      	ldrh	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005440:	b29a      	uxth	r2, r3
 8005442:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005446:	801a      	strh	r2, [r3, #0]
 8005448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800544c:	2b3e      	cmp	r3, #62	; 0x3e
 800544e:	d924      	bls.n	800549a <USB_EPStartXfer+0xec2>
 8005450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800545a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800545e:	f003 031f 	and.w	r3, r3, #31
 8005462:	2b00      	cmp	r3, #0
 8005464:	d104      	bne.n	8005470 <USB_EPStartXfer+0xe98>
 8005466:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800546a:	3b01      	subs	r3, #1
 800546c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005474:	881b      	ldrh	r3, [r3, #0]
 8005476:	b29a      	uxth	r2, r3
 8005478:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800547c:	b29b      	uxth	r3, r3
 800547e:	029b      	lsls	r3, r3, #10
 8005480:	b29b      	uxth	r3, r3
 8005482:	4313      	orrs	r3, r2
 8005484:	b29b      	uxth	r3, r3
 8005486:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800548a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800548e:	b29a      	uxth	r2, r3
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	f000 bc10 	b.w	8005cba <USB_EPStartXfer+0x16e2>
 800549a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10c      	bne.n	80054bc <USB_EPStartXfer+0xee4>
 80054a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054b8:	801a      	strh	r2, [r3, #0]
 80054ba:	e3fe      	b.n	8005cba <USB_EPStartXfer+0x16e2>
 80054bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054c0:	085b      	lsrs	r3, r3, #1
 80054c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ca:	f003 0301 	and.w	r3, r3, #1
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d004      	beq.n	80054dc <USB_EPStartXfer+0xf04>
 80054d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054d6:	3301      	adds	r3, #1
 80054d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80054dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	b29a      	uxth	r2, r3
 80054e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	029b      	lsls	r3, r3, #10
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4313      	orrs	r3, r2
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e3df      	b.n	8005cba <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80054fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80054fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	2b02      	cmp	r3, #2
 8005508:	f040 8218 	bne.w	800593c <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800550c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005510:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	785b      	ldrb	r3, [r3, #1]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 809d 	bne.w	8005658 <USB_EPStartXfer+0x1080>
 800551e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800552c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005530:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800553a:	b29b      	uxth	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005542:	4413      	add	r3, r2
 8005544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800554c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	011a      	lsls	r2, r3, #4
 8005556:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800555a:	4413      	add	r3, r2
 800555c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005560:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005570:	b29a      	uxth	r2, r3
 8005572:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005576:	801a      	strh	r2, [r3, #0]
 8005578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800557c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b3e      	cmp	r3, #62	; 0x3e
 8005586:	d92b      	bls.n	80055e0 <USB_EPStartXfer+0x1008>
 8005588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	095b      	lsrs	r3, r3, #5
 8005596:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800559a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800559e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d104      	bne.n	80055b8 <USB_EPStartXfer+0xfe0>
 80055ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b2:	3b01      	subs	r3, #1
 80055b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80055b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	b29a      	uxth	r2, r3
 80055c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	029b      	lsls	r3, r3, #10
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	4313      	orrs	r3, r2
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d6:	b29a      	uxth	r2, r3
 80055d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055dc:	801a      	strh	r2, [r3, #0]
 80055de:	e070      	b.n	80056c2 <USB_EPStartXfer+0x10ea>
 80055e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10c      	bne.n	800560a <USB_EPStartXfer+0x1032>
 80055f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005600:	b29a      	uxth	r2, r3
 8005602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005606:	801a      	strh	r2, [r3, #0]
 8005608:	e05b      	b.n	80056c2 <USB_EPStartXfer+0x10ea>
 800560a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800560e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800561c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <USB_EPStartXfer+0x1062>
 8005630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005634:	3301      	adds	r3, #1
 8005636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800563a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	b29a      	uxth	r2, r3
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	b29b      	uxth	r3, r3
 8005648:	029b      	lsls	r3, r3, #10
 800564a:	b29b      	uxth	r3, r3
 800564c:	4313      	orrs	r3, r2
 800564e:	b29a      	uxth	r2, r3
 8005650:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005654:	801a      	strh	r2, [r3, #0]
 8005656:	e034      	b.n	80056c2 <USB_EPStartXfer+0x10ea>
 8005658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800565c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d12c      	bne.n	80056c2 <USB_EPStartXfer+0x10ea>
 8005668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800566c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800567a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005684:	b29b      	uxth	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800568c:	4413      	add	r3, r2
 800568e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	011a      	lsls	r2, r3, #4
 80056a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	691b      	ldr	r3, [r3, #16]
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056c0:	801a      	strh	r2, [r3, #0]
 80056c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f040 809d 	bne.w	800581c <USB_EPStartXfer+0x1244>
 80056e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80056f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005706:	4413      	add	r3, r2
 8005708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800570c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005710:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	011a      	lsls	r2, r3, #4
 800571a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800571e:	4413      	add	r3, r2
 8005720:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005728:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	2b3e      	cmp	r3, #62	; 0x3e
 800574a:	d92b      	bls.n	80057a4 <USB_EPStartXfer+0x11cc>
 800574c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005750:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	691b      	ldr	r3, [r3, #16]
 8005758:	095b      	lsrs	r3, r3, #5
 800575a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800575e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	f003 031f 	and.w	r3, r3, #31
 800576e:	2b00      	cmp	r3, #0
 8005770:	d104      	bne.n	800577c <USB_EPStartXfer+0x11a4>
 8005772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005776:	3b01      	subs	r3, #1
 8005778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800577c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005788:	b29b      	uxth	r3, r3
 800578a:	029b      	lsls	r3, r3, #10
 800578c:	b29b      	uxth	r3, r3
 800578e:	4313      	orrs	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800579a:	b29a      	uxth	r2, r3
 800579c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	e069      	b.n	8005878 <USB_EPStartXfer+0x12a0>
 80057a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10c      	bne.n	80057ce <USB_EPStartXfer+0x11f6>
 80057b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e054      	b.n	8005878 <USB_EPStartXfer+0x12a0>
 80057ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d004      	beq.n	80057fe <USB_EPStartXfer+0x1226>
 80057f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f8:	3301      	adds	r3, #1
 80057fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29a      	uxth	r2, r3
 8005806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800580a:	b29b      	uxth	r3, r3
 800580c:	029b      	lsls	r3, r3, #10
 800580e:	b29b      	uxth	r3, r3
 8005810:	4313      	orrs	r3, r2
 8005812:	b29a      	uxth	r2, r3
 8005814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	e02d      	b.n	8005878 <USB_EPStartXfer+0x12a0>
 800581c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d125      	bne.n	8005878 <USB_EPStartXfer+0x12a0>
 800582c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005830:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800583a:	b29b      	uxth	r3, r3
 800583c:	461a      	mov	r2, r3
 800583e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005842:	4413      	add	r3, r2
 8005844:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800584c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	011a      	lsls	r2, r3, #4
 8005856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800585a:	4413      	add	r3, r2
 800585c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005860:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	b29a      	uxth	r2, r3
 8005872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005876:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 8218 	beq.w	8005cba <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800588a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	881b      	ldrh	r3, [r3, #0]
 80058a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d005      	beq.n	80058c2 <USB_EPStartXfer+0x12ea>
 80058b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10d      	bne.n	80058de <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 81f5 	bne.w	8005cba <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80058d0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f040 81ee 	bne.w	8005cba <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80058de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	881b      	ldrh	r3, [r3, #0]
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005900:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005904:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8005908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800590c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	441a      	add	r2, r3
 8005922:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
 800593a:	e1be      	b.n	8005cba <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800593c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005940:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	78db      	ldrb	r3, [r3, #3]
 8005948:	2b01      	cmp	r3, #1
 800594a:	f040 81b4 	bne.w	8005cb6 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800594e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005952:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800595e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	429a      	cmp	r2, r3
 8005968:	d917      	bls.n	800599a <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800596a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800596e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800597a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800597e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	699a      	ldr	r2, [r3, #24]
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800598a:	1ad2      	subs	r2, r2, r3
 800598c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	619a      	str	r2, [r3, #24]
 8005998:	e00e      	b.n	80059b8 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800599a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800599e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80059aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80059b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f040 8085 	bne.w	8005ad4 <USB_EPStartXfer+0x14fc>
 80059ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80059ee:	4413      	add	r3, r2
 80059f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	011a      	lsls	r2, r3, #4
 8005a02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005a06:	4413      	add	r3, r2
 8005a08:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005a10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a14:	881b      	ldrh	r3, [r3, #0]
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a22:	801a      	strh	r2, [r3, #0]
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a28:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2a:	d923      	bls.n	8005a74 <USB_EPStartXfer+0x149c>
 8005a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a3a:	f003 031f 	and.w	r3, r3, #31
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <USB_EPStartXfer+0x1474>
 8005a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a46:	3b01      	subs	r3, #1
 8005a48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	029b      	lsls	r3, r3, #10
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	e060      	b.n	8005b36 <USB_EPStartXfer+0x155e>
 8005a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d10c      	bne.n	8005a96 <USB_EPStartXfer+0x14be>
 8005a7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	e04f      	b.n	8005b36 <USB_EPStartXfer+0x155e>
 8005a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a9a:	085b      	lsrs	r3, r3, #1
 8005a9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d004      	beq.n	8005ab6 <USB_EPStartXfer+0x14de>
 8005aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ab6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	029b      	lsls	r3, r3, #10
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	b29a      	uxth	r2, r3
 8005acc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	e030      	b.n	8005b36 <USB_EPStartXfer+0x155e>
 8005ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d128      	bne.n	8005b36 <USB_EPStartXfer+0x155e>
 8005ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b08:	4413      	add	r3, r2
 8005b0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b20:	4413      	add	r3, r2
 8005b22:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b34:	801a      	strh	r2, [r3, #0]
 8005b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 8085 	bne.w	8005c60 <USB_EPStartXfer+0x1688>
 8005b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	011a      	lsls	r2, r3, #4
 8005b8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b92:	4413      	add	r3, r2
 8005b94:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bae:	801a      	strh	r2, [r3, #0]
 8005bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bb4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bb6:	d923      	bls.n	8005c00 <USB_EPStartXfer+0x1628>
 8005bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bbc:	095b      	lsrs	r3, r3, #5
 8005bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc6:	f003 031f 	and.w	r3, r3, #31
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d104      	bne.n	8005bd8 <USB_EPStartXfer+0x1600>
 8005bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	e05c      	b.n	8005cba <USB_EPStartXfer+0x16e2>
 8005c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10c      	bne.n	8005c22 <USB_EPStartXfer+0x164a>
 8005c08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c1e:	801a      	strh	r2, [r3, #0]
 8005c20:	e04b      	b.n	8005cba <USB_EPStartXfer+0x16e2>
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <USB_EPStartXfer+0x166a>
 8005c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	029b      	lsls	r3, r3, #10
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	4313      	orrs	r3, r2
 8005c56:	b29a      	uxth	r2, r3
 8005c58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c5c:	801a      	strh	r2, [r3, #0]
 8005c5e:	e02c      	b.n	8005cba <USB_EPStartXfer+0x16e2>
 8005c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d124      	bne.n	8005cba <USB_EPStartXfer+0x16e2>
 8005c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	461a      	mov	r2, r3
 8005c82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c86:	4413      	add	r3, r2
 8005c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	011a      	lsls	r2, r3, #4
 8005c9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005cb2:	801a      	strh	r2, [r3, #0]
 8005cb4:	e001      	b.n	8005cba <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e03a      	b.n	8005d30 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005ce4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ce8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005cec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005cf4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005d0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	441a      	add	r2, r3
 8005d16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	785b      	ldrb	r3, [r3, #1]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d020      	beq.n	8005d8e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	881b      	ldrh	r3, [r3, #0]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d62:	81bb      	strh	r3, [r7, #12]
 8005d64:	89bb      	ldrh	r3, [r7, #12]
 8005d66:	f083 0310 	eor.w	r3, r3, #16
 8005d6a:	81bb      	strh	r3, [r7, #12]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	441a      	add	r2, r3
 8005d76:	89bb      	ldrh	r3, [r7, #12]
 8005d78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	8013      	strh	r3, [r2, #0]
 8005d8c:	e01f      	b.n	8005dce <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da4:	81fb      	strh	r3, [r7, #14]
 8005da6:	89fb      	ldrh	r3, [r7, #14]
 8005da8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dac:	81fb      	strh	r3, [r7, #14]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	89fb      	ldrh	r3, [r7, #14]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr

08005dda <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	7b1b      	ldrb	r3, [r3, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f040 809d 	bne.w	8005f28 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d04c      	beq.n	8005e90 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	009b      	lsls	r3, r3, #2
 8005dfe:	4413      	add	r3, r2
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	823b      	strh	r3, [r7, #16]
 8005e04:	8a3b      	ldrh	r3, [r7, #16]
 8005e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d01b      	beq.n	8005e46 <USB_EPClearStall+0x6c>
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	881b      	ldrh	r3, [r3, #0]
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e24:	81fb      	strh	r3, [r7, #14]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	441a      	add	r2, r3
 8005e30:	89fb      	ldrh	r3, [r7, #14]
 8005e32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	78db      	ldrb	r3, [r3, #3]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d06c      	beq.n	8005f28 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e64:	81bb      	strh	r3, [r7, #12]
 8005e66:	89bb      	ldrh	r3, [r7, #12]
 8005e68:	f083 0320 	eor.w	r3, r3, #32
 8005e6c:	81bb      	strh	r3, [r7, #12]
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	89bb      	ldrh	r3, [r7, #12]
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]
 8005e8e:	e04b      	b.n	8005f28 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	881b      	ldrh	r3, [r3, #0]
 8005e9c:	82fb      	strh	r3, [r7, #22]
 8005e9e:	8afb      	ldrh	r3, [r7, #22]
 8005ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <USB_EPClearStall+0x106>
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebe:	82bb      	strh	r3, [r7, #20]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	8abb      	ldrh	r3, [r7, #20]
 8005ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef6:	827b      	strh	r3, [r7, #18]
 8005ef8:	8a7b      	ldrh	r3, [r7, #18]
 8005efa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005efe:	827b      	strh	r3, [r7, #18]
 8005f00:	8a7b      	ldrh	r3, [r7, #18]
 8005f02:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f06:	827b      	strh	r3, [r7, #18]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	8a7b      	ldrh	r3, [r7, #18]
 8005f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	371c      	adds	r7, #28
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bc80      	pop	{r7}
 8005f32:	4770      	bx	lr

08005f34 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bc80      	pop	{r7}
 8005f6c:	4770      	bx	lr

08005f6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b083      	sub	sp, #12
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr

08005f82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3714      	adds	r7, #20
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bc80      	pop	{r7}
 8005f9e:	4770      	bx	lr

08005fa0 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b08b      	sub	sp, #44	; 0x2c
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	60f8      	str	r0, [r7, #12]
 8005fbe:	60b9      	str	r1, [r7, #8]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	80fb      	strh	r3, [r7, #6]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005fcc:	88bb      	ldrh	r3, [r7, #4]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	085b      	lsrs	r3, r3, #1
 8005fd2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005fdc:	88fb      	ldrh	r3, [r7, #6]
 8005fde:	005a      	lsls	r2, r3, #1
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fe8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	e01e      	b.n	800602e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	021b      	lsls	r3, r3, #8
 8005ffe:	b21a      	sxth	r2, r3
 8006000:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006004:	4313      	orrs	r3, r2
 8006006:	b21b      	sxth	r3, r3
 8006008:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	8a7a      	ldrh	r2, [r7, #18]
 800600e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	3302      	adds	r3, #2
 8006014:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	3302      	adds	r3, #2
 800601a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	3301      	adds	r3, #1
 8006026:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	3b01      	subs	r3, #1
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1dd      	bne.n	8005ff0 <USB_WritePMA+0x3a>
  }
}
 8006034:	bf00      	nop
 8006036:	bf00      	nop
 8006038:	372c      	adds	r7, #44	; 0x2c
 800603a:	46bd      	mov	sp, r7
 800603c:	bc80      	pop	{r7}
 800603e:	4770      	bx	lr

08006040 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006040:	b480      	push	{r7}
 8006042:	b08b      	sub	sp, #44	; 0x2c
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4611      	mov	r1, r2
 800604c:	461a      	mov	r2, r3
 800604e:	460b      	mov	r3, r1
 8006050:	80fb      	strh	r3, [r7, #6]
 8006052:	4613      	mov	r3, r2
 8006054:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006056:	88bb      	ldrh	r3, [r7, #4]
 8006058:	085b      	lsrs	r3, r3, #1
 800605a:	b29b      	uxth	r3, r3
 800605c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006066:	88fb      	ldrh	r3, [r7, #6]
 8006068:	005a      	lsls	r2, r3, #1
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006072:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	627b      	str	r3, [r7, #36]	; 0x24
 8006078:	e01b      	b.n	80060b2 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	881b      	ldrh	r3, [r3, #0]
 800607e:	b29b      	uxth	r3, r3
 8006080:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	3302      	adds	r3, #2
 8006086:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	3301      	adds	r3, #1
 8006094:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	0a1b      	lsrs	r3, r3, #8
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	3302      	adds	r3, #2
 80060aa:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	3b01      	subs	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	; 0x24
 80060b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e0      	bne.n	800607a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80060b8:	88bb      	ldrh	r3, [r7, #4]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d007      	beq.n	80060d4 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	701a      	strb	r2, [r3, #0]
  }
}
 80060d4:	bf00      	nop
 80060d6:	372c      	adds	r7, #44	; 0x2c
 80060d8:	46bd      	mov	sp, r7
 80060da:	bc80      	pop	{r7}
 80060dc:	4770      	bx	lr

080060de <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b082      	sub	sp, #8
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	460b      	mov	r3, r1
 80060e8:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80060ea:	2304      	movs	r3, #4
 80060ec:	2203      	movs	r2, #3
 80060ee:	2181      	movs	r1, #129	; 0x81
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f001 fc84 	bl	80079fe <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80060fc:	2010      	movs	r0, #16
 80060fe:	f001 fd93 	bl	8007c28 <USBD_static_malloc>
 8006102:	4602      	mov	r2, r0
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006114:	2302      	movs	r3, #2
 8006116:	e005      	b.n	8006124 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611e:	2200      	movs	r2, #0
 8006120:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006138:	2181      	movs	r1, #129	; 0x81
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f001 fc85 	bl	8007a4a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d009      	beq.n	8006164 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006156:	4618      	mov	r0, r3
 8006158:	f001 fd72 	bl	8007c40 <USBD_static_free>
    pdev->pClassData = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b088      	sub	sp, #32
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006180:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006182:	2300      	movs	r3, #0
 8006184:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006186:	2300      	movs	r3, #0
 8006188:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800618e:	2300      	movs	r3, #0
 8006190:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800619a:	2b00      	cmp	r3, #0
 800619c:	d045      	beq.n	800622a <USBD_HID_Setup+0xba>
 800619e:	2b20      	cmp	r3, #32
 80061a0:	f040 80d3 	bne.w	800634a <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	785b      	ldrb	r3, [r3, #1]
 80061a8:	3b02      	subs	r3, #2
 80061aa:	2b09      	cmp	r3, #9
 80061ac:	d835      	bhi.n	800621a <USBD_HID_Setup+0xaa>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <USBD_HID_Setup+0x44>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	0800620b 	.word	0x0800620b
 80061b8:	080061eb 	.word	0x080061eb
 80061bc:	0800621b 	.word	0x0800621b
 80061c0:	0800621b 	.word	0x0800621b
 80061c4:	0800621b 	.word	0x0800621b
 80061c8:	0800621b 	.word	0x0800621b
 80061cc:	0800621b 	.word	0x0800621b
 80061d0:	0800621b 	.word	0x0800621b
 80061d4:	080061f9 	.word	0x080061f9
 80061d8:	080061dd 	.word	0x080061dd
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	885b      	ldrh	r3, [r3, #2]
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	601a      	str	r2, [r3, #0]
          break;
 80061e8:	e01e      	b.n	8006228 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2201      	movs	r2, #1
 80061ee:	4619      	mov	r1, r3
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 f944 	bl	800747e <USBD_CtlSendData>
          break;
 80061f6:	e017      	b.n	8006228 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	885b      	ldrh	r3, [r3, #2]
 80061fc:	0a1b      	lsrs	r3, r3, #8
 80061fe:	b29b      	uxth	r3, r3
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	605a      	str	r2, [r3, #4]
          break;
 8006208:	e00e      	b.n	8006228 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3304      	adds	r3, #4
 800620e:	2201      	movs	r2, #1
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 f933 	bl	800747e <USBD_CtlSendData>
          break;
 8006218:	e006      	b.n	8006228 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 800621a:	6839      	ldr	r1, [r7, #0]
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f001 f8c4 	bl	80073aa <USBD_CtlError>
          ret = USBD_FAIL;
 8006222:	2302      	movs	r3, #2
 8006224:	75fb      	strb	r3, [r7, #23]
          break;
 8006226:	bf00      	nop
      }
      break;
 8006228:	e096      	b.n	8006358 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	2b0b      	cmp	r3, #11
 8006230:	f200 8083 	bhi.w	800633a <USBD_HID_Setup+0x1ca>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <USBD_HID_Setup+0xcc>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	0800626d 	.word	0x0800626d
 8006240:	0800633b 	.word	0x0800633b
 8006244:	0800633b 	.word	0x0800633b
 8006248:	0800633b 	.word	0x0800633b
 800624c:	0800633b 	.word	0x0800633b
 8006250:	0800633b 	.word	0x0800633b
 8006254:	08006295 	.word	0x08006295
 8006258:	0800633b 	.word	0x0800633b
 800625c:	0800633b 	.word	0x0800633b
 8006260:	0800633b 	.word	0x0800633b
 8006264:	080062ed 	.word	0x080062ed
 8006268:	08006315 	.word	0x08006315
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006272:	2b03      	cmp	r3, #3
 8006274:	d107      	bne.n	8006286 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006276:	f107 030e 	add.w	r3, r7, #14
 800627a:	2202      	movs	r2, #2
 800627c:	4619      	mov	r1, r3
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 f8fd 	bl	800747e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006284:	e060      	b.n	8006348 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006286:	6839      	ldr	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 f88e 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 800628e:	2302      	movs	r3, #2
 8006290:	75fb      	strb	r3, [r7, #23]
          break;
 8006292:	e059      	b.n	8006348 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	885b      	ldrh	r3, [r3, #2]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	b29b      	uxth	r3, r3
 800629c:	2b22      	cmp	r3, #34	; 0x22
 800629e:	d108      	bne.n	80062b2 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	88db      	ldrh	r3, [r3, #6]
 80062a4:	2b3f      	cmp	r3, #63	; 0x3f
 80062a6:	bf28      	it	cs
 80062a8:	233f      	movcs	r3, #63	; 0x3f
 80062aa:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80062ac:	4b2d      	ldr	r3, [pc, #180]	; (8006364 <USBD_HID_Setup+0x1f4>)
 80062ae:	61bb      	str	r3, [r7, #24]
 80062b0:	e015      	b.n	80062de <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	885b      	ldrh	r3, [r3, #2]
 80062b6:	0a1b      	lsrs	r3, r3, #8
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b21      	cmp	r3, #33	; 0x21
 80062bc:	d108      	bne.n	80062d0 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 80062be:	4b2a      	ldr	r3, [pc, #168]	; (8006368 <USBD_HID_Setup+0x1f8>)
 80062c0:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	88db      	ldrh	r3, [r3, #6]
 80062c6:	2b09      	cmp	r3, #9
 80062c8:	bf28      	it	cs
 80062ca:	2309      	movcs	r3, #9
 80062cc:	83fb      	strh	r3, [r7, #30]
 80062ce:	e006      	b.n	80062de <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f869 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 80062d8:	2302      	movs	r3, #2
 80062da:	75fb      	strb	r3, [r7, #23]
            break;
 80062dc:	e034      	b.n	8006348 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 80062de:	8bfb      	ldrh	r3, [r7, #30]
 80062e0:	461a      	mov	r2, r3
 80062e2:	69b9      	ldr	r1, [r7, #24]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f001 f8ca 	bl	800747e <USBD_CtlSendData>
          break;
 80062ea:	e02d      	b.n	8006348 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d107      	bne.n	8006306 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	3308      	adds	r3, #8
 80062fa:	2201      	movs	r2, #1
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f001 f8bd 	bl	800747e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006304:	e020      	b.n	8006348 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006306:	6839      	ldr	r1, [r7, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 f84e 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 800630e:	2302      	movs	r3, #2
 8006310:	75fb      	strb	r3, [r7, #23]
          break;
 8006312:	e019      	b.n	8006348 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631a:	2b03      	cmp	r3, #3
 800631c:	d106      	bne.n	800632c <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	885b      	ldrh	r3, [r3, #2]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	461a      	mov	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800632a:	e00d      	b.n	8006348 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800632c:	6839      	ldr	r1, [r7, #0]
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 f83b 	bl	80073aa <USBD_CtlError>
            ret = USBD_FAIL;
 8006334:	2302      	movs	r3, #2
 8006336:	75fb      	strb	r3, [r7, #23]
          break;
 8006338:	e006      	b.n	8006348 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f834 	bl	80073aa <USBD_CtlError>
          ret = USBD_FAIL;
 8006342:	2302      	movs	r3, #2
 8006344:	75fb      	strb	r3, [r7, #23]
          break;
 8006346:	bf00      	nop
      }
      break;
 8006348:	e006      	b.n	8006358 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f001 f82c 	bl	80073aa <USBD_CtlError>
      ret = USBD_FAIL;
 8006352:	2302      	movs	r3, #2
 8006354:	75fb      	strb	r3, [r7, #23]
      break;
 8006356:	bf00      	nop
  }

  return ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	200000c8 	.word	0x200000c8
 8006368:	200000b0 	.word	0x200000b0

0800636c <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006380:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006388:	2b03      	cmp	r3, #3
 800638a:	d10c      	bne.n	80063a6 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	7b1b      	ldrb	r3, [r3, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d108      	bne.n	80063a6 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2201      	movs	r2, #1
 8006398:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 800639a:	88fb      	ldrh	r3, [r7, #6]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	2181      	movs	r1, #129	; 0x81
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f001 fbfa 	bl	8007b9a <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80063a6:	2300      	movs	r3, #0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3718      	adds	r7, #24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2222      	movs	r2, #34	; 0x22
 80063bc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80063be:	4b03      	ldr	r3, [pc, #12]	; (80063cc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bc80      	pop	{r7}
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	20000044 	.word	0x20000044

080063d0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2222      	movs	r2, #34	; 0x22
 80063dc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80063de:	4b03      	ldr	r3, [pc, #12]	; (80063ec <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bc80      	pop	{r7}
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	20000068 	.word	0x20000068

080063f0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2222      	movs	r2, #34	; 0x22
 80063fc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80063fe:	4b03      	ldr	r3, [pc, #12]	; (800640c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	2000008c 	.word	0x2000008c

08006410 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	460b      	mov	r3, r1
 800641a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006422:	2200      	movs	r2, #0
 8006424:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	bc80      	pop	{r7}
 8006430:	4770      	bx	lr
	...

08006434 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	220a      	movs	r2, #10
 8006440:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	bc80      	pop	{r7}
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	200000bc 	.word	0x200000bc

08006454 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	4613      	mov	r3, r2
 8006460:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006468:	2302      	movs	r3, #2
 800646a:	e01a      	b.n	80064a2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	79fa      	ldrb	r2, [r7, #7]
 8006498:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800649a:	68f8      	ldr	r0, [r7, #12]
 800649c:	f001 fa4c 	bl	8007938 <USBD_LL_Init>

  return USBD_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d006      	beq.n	80064cc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80064c6:	2300      	movs	r3, #0
 80064c8:	73fb      	strb	r3, [r7, #15]
 80064ca:	e001      	b.n	80064d0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80064cc:	2302      	movs	r3, #2
 80064ce:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fa6f 	bl	80079c8 <USBD_LL_Start>

  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	460b      	mov	r3, r1
 8006512:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006514:	2302      	movs	r3, #2
 8006516:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00c      	beq.n	800653c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	78fa      	ldrb	r2, [r7, #3]
 800652c:	4611      	mov	r1, r2
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	4798      	blx	r3
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800653c:	7bfb      	ldrb	r3, [r7, #15]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	78fa      	ldrb	r2, [r7, #3]
 800655c:	4611      	mov	r1, r2
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	4798      	blx	r3

  return USBD_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 fed7 	bl	8007332 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006592:	461a      	mov	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d016      	beq.n	80065d6 <USBD_LL_SetupStage+0x6a>
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d81c      	bhi.n	80065e6 <USBD_LL_SetupStage+0x7a>
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <USBD_LL_SetupStage+0x4a>
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d008      	beq.n	80065c6 <USBD_LL_SetupStage+0x5a>
 80065b4:	e017      	b.n	80065e6 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f9ca 	bl	8006958 <USBD_StdDevReq>
      break;
 80065c4:	e01a      	b.n	80065fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065cc:	4619      	mov	r1, r3
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fa2c 	bl	8006a2c <USBD_StdItfReq>
      break;
 80065d4:	e012      	b.n	80065fc <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f000 fa6c 	bl	8006abc <USBD_StdEPReq>
      break;
 80065e4:	e00a      	b.n	80065fc <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065ec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f001 fa47 	bl	8007a88 <USBD_LL_StallEP>
      break;
 80065fa:	bf00      	nop
  }

  return USBD_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006606:	b580      	push	{r7, lr}
 8006608:	b086      	sub	sp, #24
 800660a:	af00      	add	r7, sp, #0
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	460b      	mov	r3, r1
 8006610:	607a      	str	r2, [r7, #4]
 8006612:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d14b      	bne.n	80066b2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006620:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006628:	2b03      	cmp	r3, #3
 800662a:	d134      	bne.n	8006696 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	68da      	ldr	r2, [r3, #12]
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	429a      	cmp	r2, r3
 8006636:	d919      	bls.n	800666c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	68da      	ldr	r2, [r3, #12]
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	1ad2      	subs	r2, r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800664e:	429a      	cmp	r2, r3
 8006650:	d203      	bcs.n	800665a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006656:	b29b      	uxth	r3, r3
 8006658:	e002      	b.n	8006660 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 ff38 	bl	80074da <USBD_CtlContinueRx>
 800666a:	e038      	b.n	80066de <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800667e:	2b03      	cmp	r3, #3
 8006680:	d105      	bne.n	800668e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 ff35 	bl	80074fe <USBD_CtlSendStatus>
 8006694:	e023      	b.n	80066de <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669c:	2b05      	cmp	r3, #5
 800669e:	d11e      	bne.n	80066de <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80066a8:	2100      	movs	r1, #0
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f001 f9ec 	bl	8007a88 <USBD_LL_StallEP>
 80066b0:	e015      	b.n	80066de <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00d      	beq.n	80066da <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80066c4:	2b03      	cmp	r3, #3
 80066c6:	d108      	bne.n	80066da <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	7afa      	ldrb	r2, [r7, #11]
 80066d2:	4611      	mov	r1, r2
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	4798      	blx	r3
 80066d8:	e001      	b.n	80066de <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80066da:	2302      	movs	r3, #2
 80066dc:	e000      	b.n	80066e0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80066de:	2300      	movs	r3, #0
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b086      	sub	sp, #24
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	460b      	mov	r3, r1
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d17f      	bne.n	80067fc <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3314      	adds	r3, #20
 8006700:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006708:	2b02      	cmp	r3, #2
 800670a:	d15c      	bne.n	80067c6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	429a      	cmp	r2, r3
 8006716:	d915      	bls.n	8006744 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	1ad2      	subs	r2, r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	b29b      	uxth	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	6879      	ldr	r1, [r7, #4]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fec0 	bl	80074b6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006736:	2300      	movs	r3, #0
 8006738:	2200      	movs	r2, #0
 800673a:	2100      	movs	r1, #0
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 fa4f 	bl	8007be0 <USBD_LL_PrepareReceive>
 8006742:	e04e      	b.n	80067e2 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	6912      	ldr	r2, [r2, #16]
 800674c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006750:	fb01 f202 	mul.w	r2, r1, r2
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	2b00      	cmp	r3, #0
 8006758:	d11c      	bne.n	8006794 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006762:	429a      	cmp	r2, r3
 8006764:	d316      	bcc.n	8006794 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	689a      	ldr	r2, [r3, #8]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006770:	429a      	cmp	r2, r3
 8006772:	d20f      	bcs.n	8006794 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006774:	2200      	movs	r2, #0
 8006776:	2100      	movs	r1, #0
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f000 fe9c 	bl	80074b6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006786:	2300      	movs	r3, #0
 8006788:	2200      	movs	r2, #0
 800678a:	2100      	movs	r1, #0
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f001 fa27 	bl	8007be0 <USBD_LL_PrepareReceive>
 8006792:	e026      	b.n	80067e2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d105      	bne.n	80067b6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80067b6:	2180      	movs	r1, #128	; 0x80
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f001 f965 	bl	8007a88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80067be:	68f8      	ldr	r0, [r7, #12]
 80067c0:	f000 feb0 	bl	8007524 <USBD_CtlReceiveStatus>
 80067c4:	e00d      	b.n	80067e2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d004      	beq.n	80067da <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80067da:	2180      	movs	r1, #128	; 0x80
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 f953 	bl	8007a88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d11d      	bne.n	8006828 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f7ff fe81 	bl	80064f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80067fa:	e015      	b.n	8006828 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006802:	695b      	ldr	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d00d      	beq.n	8006824 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800680e:	2b03      	cmp	r3, #3
 8006810:	d108      	bne.n	8006824 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	7afa      	ldrb	r2, [r7, #11]
 800681c:	4611      	mov	r1, r2
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	4798      	blx	r3
 8006822:	e001      	b.n	8006828 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006824:	2302      	movs	r3, #2
 8006826:	e000      	b.n	800682a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3718      	adds	r7, #24
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b082      	sub	sp, #8
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800683a:	2340      	movs	r3, #64	; 0x40
 800683c:	2200      	movs	r2, #0
 800683e:	2100      	movs	r1, #0
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f8dc 	bl	80079fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2240      	movs	r2, #64	; 0x40
 8006852:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006856:	2340      	movs	r3, #64	; 0x40
 8006858:	2200      	movs	r2, #0
 800685a:	2180      	movs	r1, #128	; 0x80
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f001 f8ce 	bl	80079fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	2b00      	cmp	r3, #0
 8006894:	d009      	beq.n	80068aa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	6852      	ldr	r2, [r2, #4]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	4611      	mov	r1, r2
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
  }

  return USBD_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	78fa      	ldrb	r2, [r7, #3]
 80068c4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bc80      	pop	{r7}
 80068d0:	4770      	bx	lr

080068d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2204      	movs	r2, #4
 80068ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr

080068fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b083      	sub	sp, #12
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	2b04      	cmp	r3, #4
 800690a:	d105      	bne.n	8006918 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	bc80      	pop	{r7}
 8006922:	4770      	bx	lr

08006924 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006932:	2b03      	cmp	r3, #3
 8006934:	d10b      	bne.n	800694e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3708      	adds	r7, #8
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d005      	beq.n	800697e <USBD_StdDevReq+0x26>
 8006972:	2b40      	cmp	r3, #64	; 0x40
 8006974:	d84f      	bhi.n	8006a16 <USBD_StdDevReq+0xbe>
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <USBD_StdDevReq+0x36>
 800697a:	2b20      	cmp	r3, #32
 800697c:	d14b      	bne.n	8006a16 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	6839      	ldr	r1, [r7, #0]
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
      break;
 800698c:	e048      	b.n	8006a20 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	785b      	ldrb	r3, [r3, #1]
 8006992:	2b09      	cmp	r3, #9
 8006994:	d839      	bhi.n	8006a0a <USBD_StdDevReq+0xb2>
 8006996:	a201      	add	r2, pc, #4	; (adr r2, 800699c <USBD_StdDevReq+0x44>)
 8006998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699c:	080069ed 	.word	0x080069ed
 80069a0:	08006a01 	.word	0x08006a01
 80069a4:	08006a0b 	.word	0x08006a0b
 80069a8:	080069f7 	.word	0x080069f7
 80069ac:	08006a0b 	.word	0x08006a0b
 80069b0:	080069cf 	.word	0x080069cf
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	08006a0b 	.word	0x08006a0b
 80069bc:	080069e3 	.word	0x080069e3
 80069c0:	080069d9 	.word	0x080069d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80069c4:	6839      	ldr	r1, [r7, #0]
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f9dc 	bl	8006d84 <USBD_GetDescriptor>
          break;
 80069cc:	e022      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80069ce:	6839      	ldr	r1, [r7, #0]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fb3f 	bl	8007054 <USBD_SetAddress>
          break;
 80069d6:	e01d      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80069d8:	6839      	ldr	r1, [r7, #0]
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 fb7e 	bl	80070dc <USBD_SetConfig>
          break;
 80069e0:	e018      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80069e2:	6839      	ldr	r1, [r7, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fc07 	bl	80071f8 <USBD_GetConfig>
          break;
 80069ea:	e013      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc37 	bl	8007262 <USBD_GetStatus>
          break;
 80069f4:	e00e      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80069f6:	6839      	ldr	r1, [r7, #0]
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fc65 	bl	80072c8 <USBD_SetFeature>
          break;
 80069fe:	e009      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a00:	6839      	ldr	r1, [r7, #0]
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 fc74 	bl	80072f0 <USBD_ClrFeature>
          break;
 8006a08:	e004      	b.n	8006a14 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fccc 	bl	80073aa <USBD_CtlError>
          break;
 8006a12:	bf00      	nop
      }
      break;
 8006a14:	e004      	b.n	8006a20 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006a16:	6839      	ldr	r1, [r7, #0]
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 fcc6 	bl	80073aa <USBD_CtlError>
      break;
 8006a1e:	bf00      	nop
  }

  return ret;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop

08006a2c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a42:	2b40      	cmp	r3, #64	; 0x40
 8006a44:	d005      	beq.n	8006a52 <USBD_StdItfReq+0x26>
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d82e      	bhi.n	8006aa8 <USBD_StdItfReq+0x7c>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <USBD_StdItfReq+0x26>
 8006a4e:	2b20      	cmp	r3, #32
 8006a50:	d12a      	bne.n	8006aa8 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d81d      	bhi.n	8006a9a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	889b      	ldrh	r3, [r3, #4]
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d813      	bhi.n	8006a90 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	6839      	ldr	r1, [r7, #0]
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	88db      	ldrh	r3, [r3, #6]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d110      	bne.n	8006aa4 <USBD_StdItfReq+0x78>
 8006a82:	7bfb      	ldrb	r3, [r7, #15]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10d      	bne.n	8006aa4 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fd38 	bl	80074fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006a8e:	e009      	b.n	8006aa4 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fc89 	bl	80073aa <USBD_CtlError>
          break;
 8006a98:	e004      	b.n	8006aa4 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fc84 	bl	80073aa <USBD_CtlError>
          break;
 8006aa2:	e000      	b.n	8006aa6 <USBD_StdItfReq+0x7a>
          break;
 8006aa4:	bf00      	nop
      }
      break;
 8006aa6:	e004      	b.n	8006ab2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 fc7d 	bl	80073aa <USBD_CtlError>
      break;
 8006ab0:	bf00      	nop
  }

  return USBD_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3710      	adds	r7, #16
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	889b      	ldrh	r3, [r3, #4]
 8006ace:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad8:	2b40      	cmp	r3, #64	; 0x40
 8006ada:	d007      	beq.n	8006aec <USBD_StdEPReq+0x30>
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	f200 8146 	bhi.w	8006d6e <USBD_StdEPReq+0x2b2>
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <USBD_StdEPReq+0x40>
 8006ae6:	2b20      	cmp	r3, #32
 8006ae8:	f040 8141 	bne.w	8006d6e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	6839      	ldr	r1, [r7, #0]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
      break;
 8006afa:	e13d      	b.n	8006d78 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d10a      	bne.n	8006b1e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006b1a:	7bfb      	ldrb	r3, [r7, #15]
 8006b1c:	e12d      	b.n	8006d7a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	785b      	ldrb	r3, [r3, #1]
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d007      	beq.n	8006b36 <USBD_StdEPReq+0x7a>
 8006b26:	2b03      	cmp	r3, #3
 8006b28:	f300 811b 	bgt.w	8006d62 <USBD_StdEPReq+0x2a6>
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d072      	beq.n	8006c16 <USBD_StdEPReq+0x15a>
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d03a      	beq.n	8006baa <USBD_StdEPReq+0xee>
 8006b34:	e115      	b.n	8006d62 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d002      	beq.n	8006b46 <USBD_StdEPReq+0x8a>
 8006b40:	2b03      	cmp	r3, #3
 8006b42:	d015      	beq.n	8006b70 <USBD_StdEPReq+0xb4>
 8006b44:	e02b      	b.n	8006b9e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00c      	beq.n	8006b66 <USBD_StdEPReq+0xaa>
 8006b4c:	7bbb      	ldrb	r3, [r7, #14]
 8006b4e:	2b80      	cmp	r3, #128	; 0x80
 8006b50:	d009      	beq.n	8006b66 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006b52:	7bbb      	ldrb	r3, [r7, #14]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 ff96 	bl	8007a88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006b5c:	2180      	movs	r1, #128	; 0x80
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 ff92 	bl	8007a88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006b64:	e020      	b.n	8006ba8 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fc1e 	bl	80073aa <USBD_CtlError>
              break;
 8006b6e:	e01b      	b.n	8006ba8 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10e      	bne.n	8006b96 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006b78:	7bbb      	ldrb	r3, [r7, #14]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00b      	beq.n	8006b96 <USBD_StdEPReq+0xda>
 8006b7e:	7bbb      	ldrb	r3, [r7, #14]
 8006b80:	2b80      	cmp	r3, #128	; 0x80
 8006b82:	d008      	beq.n	8006b96 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	88db      	ldrh	r3, [r3, #6]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 ff79 	bl	8007a88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcb1 	bl	80074fe <USBD_CtlSendStatus>

              break;
 8006b9c:	e004      	b.n	8006ba8 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc02 	bl	80073aa <USBD_CtlError>
              break;
 8006ba6:	bf00      	nop
          }
          break;
 8006ba8:	e0e0      	b.n	8006d6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d002      	beq.n	8006bba <USBD_StdEPReq+0xfe>
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d015      	beq.n	8006be4 <USBD_StdEPReq+0x128>
 8006bb8:	e026      	b.n	8006c08 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006bba:	7bbb      	ldrb	r3, [r7, #14]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <USBD_StdEPReq+0x11e>
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	2b80      	cmp	r3, #128	; 0x80
 8006bc4:	d009      	beq.n	8006bda <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bc6:	7bbb      	ldrb	r3, [r7, #14]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 ff5c 	bl	8007a88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bd0:	2180      	movs	r1, #128	; 0x80
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 ff58 	bl	8007a88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006bd8:	e01c      	b.n	8006c14 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fbe4 	bl	80073aa <USBD_CtlError>
              break;
 8006be2:	e017      	b.n	8006c14 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	885b      	ldrh	r3, [r3, #2]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d004      	beq.n	8006c00 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 ff63 	bl	8007ac6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f000 fc7c 	bl	80074fe <USBD_CtlSendStatus>
              }
              break;
 8006c06:	e004      	b.n	8006c12 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006c08:	6839      	ldr	r1, [r7, #0]
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbcd 	bl	80073aa <USBD_CtlError>
              break;
 8006c10:	e000      	b.n	8006c14 <USBD_StdEPReq+0x158>
              break;
 8006c12:	bf00      	nop
          }
          break;
 8006c14:	e0aa      	b.n	8006d6c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d002      	beq.n	8006c26 <USBD_StdEPReq+0x16a>
 8006c20:	2b03      	cmp	r3, #3
 8006c22:	d032      	beq.n	8006c8a <USBD_StdEPReq+0x1ce>
 8006c24:	e097      	b.n	8006d56 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c26:	7bbb      	ldrb	r3, [r7, #14]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d007      	beq.n	8006c3c <USBD_StdEPReq+0x180>
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	2b80      	cmp	r3, #128	; 0x80
 8006c30:	d004      	beq.n	8006c3c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fbb8 	bl	80073aa <USBD_CtlError>
                break;
 8006c3a:	e091      	b.n	8006d60 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da0b      	bge.n	8006c5c <USBD_StdEPReq+0x1a0>
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	4413      	add	r3, r2
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	3310      	adds	r3, #16
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	3304      	adds	r3, #4
 8006c5a:	e00b      	b.n	8006c74 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c5c:	7bbb      	ldrb	r3, [r7, #14]
 8006c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	3304      	adds	r3, #4
 8006c74:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fbfb 	bl	800747e <USBD_CtlSendData>
              break;
 8006c88:	e06a      	b.n	8006d60 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006c8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	da11      	bge.n	8006cb6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	f003 020f 	and.w	r2, r3, #15
 8006c98:	6879      	ldr	r1, [r7, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	009b      	lsls	r3, r3, #2
 8006ca2:	440b      	add	r3, r1
 8006ca4:	3318      	adds	r3, #24
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d117      	bne.n	8006cdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fb7b 	bl	80073aa <USBD_CtlError>
                  break;
 8006cb4:	e054      	b.n	8006d60 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	f003 020f 	and.w	r2, r3, #15
 8006cbc:	6879      	ldr	r1, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	440b      	add	r3, r1
 8006cc8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d104      	bne.n	8006cdc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fb68 	bl	80073aa <USBD_CtlError>
                  break;
 8006cda:	e041      	b.n	8006d60 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	da0b      	bge.n	8006cfc <USBD_StdEPReq+0x240>
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	3310      	adds	r3, #16
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	e00b      	b.n	8006d14 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	3304      	adds	r3, #4
 8006d14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006d16:	7bbb      	ldrb	r3, [r7, #14]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <USBD_StdEPReq+0x266>
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	2b80      	cmp	r3, #128	; 0x80
 8006d20:	d103      	bne.n	8006d2a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
 8006d28:	e00e      	b.n	8006d48 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fee8 	bl	8007b04 <USBD_LL_IsStallEP>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e002      	b.n	8006d48 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fb95 	bl	800747e <USBD_CtlSendData>
              break;
 8006d54:	e004      	b.n	8006d60 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb26 	bl	80073aa <USBD_CtlError>
              break;
 8006d5e:	bf00      	nop
          }
          break;
 8006d60:	e004      	b.n	8006d6c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006d62:	6839      	ldr	r1, [r7, #0]
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fb20 	bl	80073aa <USBD_CtlError>
          break;
 8006d6a:	bf00      	nop
      }
      break;
 8006d6c:	e004      	b.n	8006d78 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fb1a 	bl	80073aa <USBD_CtlError>
      break;
 8006d76:	bf00      	nop
  }

  return ret;
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
	...

08006d84 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	885b      	ldrh	r3, [r3, #2]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	2b06      	cmp	r3, #6
 8006da6:	f200 8128 	bhi.w	8006ffa <USBD_GetDescriptor+0x276>
 8006daa:	a201      	add	r2, pc, #4	; (adr r2, 8006db0 <USBD_GetDescriptor+0x2c>)
 8006dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db0:	08006dcd 	.word	0x08006dcd
 8006db4:	08006de5 	.word	0x08006de5
 8006db8:	08006e25 	.word	0x08006e25
 8006dbc:	08006ffb 	.word	0x08006ffb
 8006dc0:	08006ffb 	.word	0x08006ffb
 8006dc4:	08006f9b 	.word	0x08006f9b
 8006dc8:	08006fc7 	.word	0x08006fc7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	7c12      	ldrb	r2, [r2, #16]
 8006dd8:	f107 0108 	add.w	r1, r7, #8
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4798      	blx	r3
 8006de0:	60f8      	str	r0, [r7, #12]
      break;
 8006de2:	e112      	b.n	800700a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	7c1b      	ldrb	r3, [r3, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10d      	bne.n	8006e08 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006df4:	f107 0208 	add.w	r2, r7, #8
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
 8006dfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	3301      	adds	r3, #1
 8006e02:	2202      	movs	r2, #2
 8006e04:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006e06:	e100      	b.n	800700a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	f107 0208 	add.w	r2, r7, #8
 8006e14:	4610      	mov	r0, r2
 8006e16:	4798      	blx	r3
 8006e18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	2202      	movs	r2, #2
 8006e20:	701a      	strb	r2, [r3, #0]
      break;
 8006e22:	e0f2      	b.n	800700a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	885b      	ldrh	r3, [r3, #2]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	f200 80ac 	bhi.w	8006f88 <USBD_GetDescriptor+0x204>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <USBD_GetDescriptor+0xb4>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e51 	.word	0x08006e51
 8006e3c:	08006e85 	.word	0x08006e85
 8006e40:	08006eb9 	.word	0x08006eb9
 8006e44:	08006eed 	.word	0x08006eed
 8006e48:	08006f21 	.word	0x08006f21
 8006e4c:	08006f55 	.word	0x08006f55
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00b      	beq.n	8006e74 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	7c12      	ldrb	r2, [r2, #16]
 8006e68:	f107 0108 	add.w	r1, r7, #8
 8006e6c:	4610      	mov	r0, r2
 8006e6e:	4798      	blx	r3
 8006e70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e72:	e091      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa97 	bl	80073aa <USBD_CtlError>
            err++;
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	72fb      	strb	r3, [r7, #11]
          break;
 8006e82:	e089      	b.n	8006f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	687a      	ldr	r2, [r7, #4]
 8006e9a:	7c12      	ldrb	r2, [r2, #16]
 8006e9c:	f107 0108 	add.w	r1, r7, #8
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	4798      	blx	r3
 8006ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ea6:	e077      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa7d 	bl	80073aa <USBD_CtlError>
            err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8006eb6:	e06f      	b.n	8006f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ebe:	68db      	ldr	r3, [r3, #12]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00b      	beq.n	8006edc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	7c12      	ldrb	r2, [r2, #16]
 8006ed0:	f107 0108 	add.w	r1, r7, #8
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	4798      	blx	r3
 8006ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006eda:	e05d      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006edc:	6839      	ldr	r1, [r7, #0]
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa63 	bl	80073aa <USBD_CtlError>
            err++;
 8006ee4:	7afb      	ldrb	r3, [r7, #11]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8006eea:	e055      	b.n	8006f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d00b      	beq.n	8006f10 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7c12      	ldrb	r2, [r2, #16]
 8006f04:	f107 0108 	add.w	r1, r7, #8
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
 8006f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f0e:	e043      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f10:	6839      	ldr	r1, [r7, #0]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fa49 	bl	80073aa <USBD_CtlError>
            err++;
 8006f18:	7afb      	ldrb	r3, [r7, #11]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8006f1e:	e03b      	b.n	8006f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00b      	beq.n	8006f44 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	7c12      	ldrb	r2, [r2, #16]
 8006f38:	f107 0108 	add.w	r1, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f42:	e029      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f44:	6839      	ldr	r1, [r7, #0]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fa2f 	bl	80073aa <USBD_CtlError>
            err++;
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	72fb      	strb	r3, [r7, #11]
          break;
 8006f52:	e021      	b.n	8006f98 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5a:	699b      	ldr	r3, [r3, #24]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00b      	beq.n	8006f78 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f66:	699b      	ldr	r3, [r3, #24]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	7c12      	ldrb	r2, [r2, #16]
 8006f6c:	f107 0108 	add.w	r1, r7, #8
 8006f70:	4610      	mov	r0, r2
 8006f72:	4798      	blx	r3
 8006f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f76:	e00f      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f78:	6839      	ldr	r1, [r7, #0]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 fa15 	bl	80073aa <USBD_CtlError>
            err++;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3301      	adds	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]
          break;
 8006f86:	e007      	b.n	8006f98 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa0d 	bl	80073aa <USBD_CtlError>
          err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8006f96:	e038      	b.n	800700a <USBD_GetDescriptor+0x286>
 8006f98:	e037      	b.n	800700a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	7c1b      	ldrb	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d109      	bne.n	8006fb6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006faa:	f107 0208 	add.w	r2, r7, #8
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4798      	blx	r3
 8006fb2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fb4:	e029      	b.n	800700a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f9f6 	bl	80073aa <USBD_CtlError>
        err++;
 8006fbe:	7afb      	ldrb	r3, [r7, #11]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	72fb      	strb	r3, [r7, #11]
      break;
 8006fc4:	e021      	b.n	800700a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	7c1b      	ldrb	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d10d      	bne.n	8006fea <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd6:	f107 0208 	add.w	r2, r7, #8
 8006fda:	4610      	mov	r0, r2
 8006fdc:	4798      	blx	r3
 8006fde:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	2207      	movs	r2, #7
 8006fe6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006fe8:	e00f      	b.n	800700a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 f9dc 	bl	80073aa <USBD_CtlError>
        err++;
 8006ff2:	7afb      	ldrb	r3, [r7, #11]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ff8:	e007      	b.n	800700a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006ffa:	6839      	ldr	r1, [r7, #0]
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f9d4 	bl	80073aa <USBD_CtlError>
      err++;
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	3301      	adds	r3, #1
 8007006:	72fb      	strb	r3, [r7, #11]
      break;
 8007008:	bf00      	nop
  }

  if (err != 0U)
 800700a:	7afb      	ldrb	r3, [r7, #11]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d11c      	bne.n	800704a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007010:	893b      	ldrh	r3, [r7, #8]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d011      	beq.n	800703a <USBD_GetDescriptor+0x2b6>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00d      	beq.n	800703a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	88da      	ldrh	r2, [r3, #6]
 8007022:	893b      	ldrh	r3, [r7, #8]
 8007024:	4293      	cmp	r3, r2
 8007026:	bf28      	it	cs
 8007028:	4613      	movcs	r3, r2
 800702a:	b29b      	uxth	r3, r3
 800702c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800702e:	893b      	ldrh	r3, [r7, #8]
 8007030:	461a      	mov	r2, r3
 8007032:	68f9      	ldr	r1, [r7, #12]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fa22 	bl	800747e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	88db      	ldrh	r3, [r3, #6]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d104      	bne.n	800704c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 fa5b 	bl	80074fe <USBD_CtlSendStatus>
 8007048:	e000      	b.n	800704c <USBD_GetDescriptor+0x2c8>
    return;
 800704a:	bf00      	nop
    }
  }
}
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop

08007054 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	889b      	ldrh	r3, [r3, #4]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d130      	bne.n	80070c8 <USBD_SetAddress+0x74>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	88db      	ldrh	r3, [r3, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d12c      	bne.n	80070c8 <USBD_SetAddress+0x74>
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	885b      	ldrh	r3, [r3, #2]
 8007072:	2b7f      	cmp	r3, #127	; 0x7f
 8007074:	d828      	bhi.n	80070c8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007080:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007088:	2b03      	cmp	r3, #3
 800708a:	d104      	bne.n	8007096 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f98b 	bl	80073aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007094:	e01d      	b.n	80070d2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	7bfa      	ldrb	r2, [r7, #15]
 800709a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fd5a 	bl	8007b5c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa28 	bl	80074fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070bc:	e009      	b.n	80070d2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2201      	movs	r2, #1
 80070c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070c6:	e004      	b.n	80070d2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80070c8:	6839      	ldr	r1, [r7, #0]
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 f96d 	bl	80073aa <USBD_CtlError>
  }
}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
	...

080070dc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	885b      	ldrh	r3, [r3, #2]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	4b41      	ldr	r3, [pc, #260]	; (80071f4 <USBD_SetConfig+0x118>)
 80070ee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80070f0:	4b40      	ldr	r3, [pc, #256]	; (80071f4 <USBD_SetConfig+0x118>)
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d904      	bls.n	8007102 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f955 	bl	80073aa <USBD_CtlError>
 8007100:	e075      	b.n	80071ee <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007108:	2b02      	cmp	r3, #2
 800710a:	d002      	beq.n	8007112 <USBD_SetConfig+0x36>
 800710c:	2b03      	cmp	r3, #3
 800710e:	d023      	beq.n	8007158 <USBD_SetConfig+0x7c>
 8007110:	e062      	b.n	80071d8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007112:	4b38      	ldr	r3, [pc, #224]	; (80071f4 <USBD_SetConfig+0x118>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01a      	beq.n	8007150 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800711a:	4b36      	ldr	r3, [pc, #216]	; (80071f4 <USBD_SetConfig+0x118>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2203      	movs	r2, #3
 8007128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800712c:	4b31      	ldr	r3, [pc, #196]	; (80071f4 <USBD_SetConfig+0x118>)
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff f9e8 	bl	8006508 <USBD_SetClassConfig>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d104      	bne.n	8007148 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 f932 	bl	80073aa <USBD_CtlError>
            return;
 8007146:	e052      	b.n	80071ee <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9d8 	bl	80074fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800714e:	e04e      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 f9d4 	bl	80074fe <USBD_CtlSendStatus>
        break;
 8007156:	e04a      	b.n	80071ee <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007158:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <USBD_SetConfig+0x118>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d112      	bne.n	8007186 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007168:	4b22      	ldr	r3, [pc, #136]	; (80071f4 <USBD_SetConfig+0x118>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007172:	4b20      	ldr	r3, [pc, #128]	; (80071f4 <USBD_SetConfig+0x118>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7ff f9e4 	bl	8006546 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f9bd 	bl	80074fe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007184:	e033      	b.n	80071ee <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007186:	4b1b      	ldr	r3, [pc, #108]	; (80071f4 <USBD_SetConfig+0x118>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d01d      	beq.n	80071d0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	b2db      	uxtb	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f7ff f9d2 	bl	8006546 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <USBD_SetConfig+0x118>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071ac:	4b11      	ldr	r3, [pc, #68]	; (80071f4 <USBD_SetConfig+0x118>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff f9a8 	bl	8006508 <USBD_SetClassConfig>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d104      	bne.n	80071c8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f8f2 	bl	80073aa <USBD_CtlError>
            return;
 80071c6:	e012      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f998 	bl	80074fe <USBD_CtlSendStatus>
        break;
 80071ce:	e00e      	b.n	80071ee <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f994 	bl	80074fe <USBD_CtlSendStatus>
        break;
 80071d6:	e00a      	b.n	80071ee <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f8e5 	bl	80073aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80071e0:	4b04      	ldr	r3, [pc, #16]	; (80071f4 <USBD_SetConfig+0x118>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff f9ad 	bl	8006546 <USBD_ClrClassConfig>
        break;
 80071ec:	bf00      	nop
    }
  }
}
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	20000180 	.word	0x20000180

080071f8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	88db      	ldrh	r3, [r3, #6]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d004      	beq.n	8007214 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f8cc 	bl	80073aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007212:	e022      	b.n	800725a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800721a:	2b02      	cmp	r3, #2
 800721c:	dc02      	bgt.n	8007224 <USBD_GetConfig+0x2c>
 800721e:	2b00      	cmp	r3, #0
 8007220:	dc03      	bgt.n	800722a <USBD_GetConfig+0x32>
 8007222:	e015      	b.n	8007250 <USBD_GetConfig+0x58>
 8007224:	2b03      	cmp	r3, #3
 8007226:	d00b      	beq.n	8007240 <USBD_GetConfig+0x48>
 8007228:	e012      	b.n	8007250 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	3308      	adds	r3, #8
 8007234:	2201      	movs	r2, #1
 8007236:	4619      	mov	r1, r3
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f920 	bl	800747e <USBD_CtlSendData>
        break;
 800723e:	e00c      	b.n	800725a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	3304      	adds	r3, #4
 8007244:	2201      	movs	r2, #1
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f918 	bl	800747e <USBD_CtlSendData>
        break;
 800724e:	e004      	b.n	800725a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f8a9 	bl	80073aa <USBD_CtlError>
        break;
 8007258:	bf00      	nop
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b082      	sub	sp, #8
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	3b01      	subs	r3, #1
 8007274:	2b02      	cmp	r3, #2
 8007276:	d81e      	bhi.n	80072b6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	88db      	ldrh	r3, [r3, #6]
 800727c:	2b02      	cmp	r3, #2
 800727e:	d004      	beq.n	800728a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007280:	6839      	ldr	r1, [r7, #0]
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 f891 	bl	80073aa <USBD_CtlError>
        break;
 8007288:	e01a      	b.n	80072c0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007296:	2b00      	cmp	r3, #0
 8007298:	d005      	beq.n	80072a6 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	f043 0202 	orr.w	r2, r3, #2
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	330c      	adds	r3, #12
 80072aa:	2202      	movs	r2, #2
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f8e5 	bl	800747e <USBD_CtlSendData>
      break;
 80072b4:	e004      	b.n	80072c0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f876 	bl	80073aa <USBD_CtlError>
      break;
 80072be:	bf00      	nop
  }
}
 80072c0:	bf00      	nop
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	885b      	ldrh	r3, [r3, #2]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d106      	bne.n	80072e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f90b 	bl	80074fe <USBD_CtlSendStatus>
  }
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
 80072f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	3b01      	subs	r3, #1
 8007302:	2b02      	cmp	r3, #2
 8007304:	d80b      	bhi.n	800731e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	885b      	ldrh	r3, [r3, #2]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d10c      	bne.n	8007328 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f8f1 	bl	80074fe <USBD_CtlSendStatus>
      }
      break;
 800731c:	e004      	b.n	8007328 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f842 	bl	80073aa <USBD_CtlError>
      break;
 8007326:	e000      	b.n	800732a <USBD_ClrFeature+0x3a>
      break;
 8007328:	bf00      	nop
  }
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	781a      	ldrb	r2, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	785a      	ldrb	r2, [r3, #1]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	3302      	adds	r3, #2
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	b29a      	uxth	r2, r3
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	3303      	adds	r3, #3
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	021b      	lsls	r3, r3, #8
 800735e:	b29b      	uxth	r3, r3
 8007360:	4413      	add	r3, r2
 8007362:	b29a      	uxth	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	3304      	adds	r3, #4
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	b29a      	uxth	r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	3305      	adds	r3, #5
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	021b      	lsls	r3, r3, #8
 800737a:	b29b      	uxth	r3, r3
 800737c:	4413      	add	r3, r2
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	3306      	adds	r3, #6
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b29a      	uxth	r2, r3
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	3307      	adds	r3, #7
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	b29b      	uxth	r3, r3
 8007394:	021b      	lsls	r3, r3, #8
 8007396:	b29b      	uxth	r3, r3
 8007398:	4413      	add	r3, r2
 800739a:	b29a      	uxth	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	80da      	strh	r2, [r3, #6]

}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr

080073aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b082      	sub	sp, #8
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80073b4:	2180      	movs	r1, #128	; 0x80
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fb66 	bl	8007a88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80073bc:	2100      	movs	r1, #0
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fb62 	bl	8007a88 <USBD_LL_StallEP>
}
 80073c4:	bf00      	nop
 80073c6:	3708      	adds	r7, #8
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d032      	beq.n	8007448 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f834 	bl	8007450 <USBD_GetLen>
 80073e8:	4603      	mov	r3, r0
 80073ea:	3301      	adds	r3, #1
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	b29a      	uxth	r2, r3
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	75fa      	strb	r2, [r7, #23]
 80073fc:	461a      	mov	r2, r3
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4413      	add	r3, r2
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	75fa      	strb	r2, [r7, #23]
 800740e:	461a      	mov	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	4413      	add	r3, r2
 8007414:	2203      	movs	r2, #3
 8007416:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007418:	e012      	b.n	8007440 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	60fa      	str	r2, [r7, #12]
 8007420:	7dfa      	ldrb	r2, [r7, #23]
 8007422:	1c51      	adds	r1, r2, #1
 8007424:	75f9      	strb	r1, [r7, #23]
 8007426:	4611      	mov	r1, r2
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	440a      	add	r2, r1
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	75fa      	strb	r2, [r7, #23]
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4413      	add	r3, r2
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e8      	bne.n	800741a <USBD_GetString+0x4e>
    }
  }
}
 8007448:	bf00      	nop
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800745c:	e005      	b.n	800746a <USBD_GetLen+0x1a>
  {
    len++;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	3301      	adds	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3301      	adds	r3, #1
 8007468:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1f5      	bne.n	800745e <USBD_GetLen+0xe>
  }

  return len;
 8007472:	7bfb      	ldrb	r3, [r7, #15]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr

0800747e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	60f8      	str	r0, [r7, #12]
 8007486:	60b9      	str	r1, [r7, #8]
 8007488:	4613      	mov	r3, r2
 800748a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2202      	movs	r2, #2
 8007490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007494:	88fa      	ldrh	r2, [r7, #6]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800749a:	88fa      	ldrh	r2, [r7, #6]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	68ba      	ldr	r2, [r7, #8]
 80074a4:	2100      	movs	r1, #0
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fb77 	bl	8007b9a <USBD_LL_Transmit>

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b084      	sub	sp, #16
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60f8      	str	r0, [r7, #12]
 80074be:	60b9      	str	r1, [r7, #8]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80074c4:	88fb      	ldrh	r3, [r7, #6]
 80074c6:	68ba      	ldr	r2, [r7, #8]
 80074c8:	2100      	movs	r1, #0
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fb65 	bl	8007b9a <USBD_LL_Transmit>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	4613      	mov	r3, r2
 80074e6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	2100      	movs	r1, #0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fb76 	bl	8007be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80074fe:	b580      	push	{r7, lr}
 8007500:	b082      	sub	sp, #8
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2204      	movs	r2, #4
 800750a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fb40 	bl	8007b9a <USBD_LL_Transmit>

  return USBD_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2205      	movs	r2, #5
 8007530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007534:	2300      	movs	r3, #0
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fb50 	bl	8007be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007550:	2200      	movs	r2, #0
 8007552:	490e      	ldr	r1, [pc, #56]	; (800758c <MX_USB_DEVICE_Init+0x40>)
 8007554:	480e      	ldr	r0, [pc, #56]	; (8007590 <MX_USB_DEVICE_Init+0x44>)
 8007556:	f7fe ff7d 	bl	8006454 <USBD_Init>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007560:	f7f9 fc70 	bl	8000e44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007564:	490b      	ldr	r1, [pc, #44]	; (8007594 <MX_USB_DEVICE_Init+0x48>)
 8007566:	480a      	ldr	r0, [pc, #40]	; (8007590 <MX_USB_DEVICE_Init+0x44>)
 8007568:	f7fe ff9f 	bl	80064aa <USBD_RegisterClass>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007572:	f7f9 fc67 	bl	8000e44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007576:	4806      	ldr	r0, [pc, #24]	; (8007590 <MX_USB_DEVICE_Init+0x44>)
 8007578:	f7fe ffb0 	bl	80064dc <USBD_Start>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d001      	beq.n	8007586 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007582:	f7f9 fc5f 	bl	8000e44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007586:	bf00      	nop
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	20000108 	.word	0x20000108
 8007590:	20000184 	.word	0x20000184
 8007594:	2000000c 	.word	0x2000000c

08007598 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	4603      	mov	r3, r0
 80075a0:	6039      	str	r1, [r7, #0]
 80075a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2212      	movs	r2, #18
 80075a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80075aa:	4b03      	ldr	r3, [pc, #12]	; (80075b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	20000124 	.word	0x20000124

080075bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	6039      	str	r1, [r7, #0]
 80075c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2204      	movs	r2, #4
 80075cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80075ce:	4b03      	ldr	r3, [pc, #12]	; (80075dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	20000138 	.word	0x20000138

080075e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	4603      	mov	r3, r0
 80075e8:	6039      	str	r1, [r7, #0]
 80075ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075ec:	79fb      	ldrb	r3, [r7, #7]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d105      	bne.n	80075fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	4907      	ldr	r1, [pc, #28]	; (8007614 <USBD_FS_ProductStrDescriptor+0x34>)
 80075f6:	4808      	ldr	r0, [pc, #32]	; (8007618 <USBD_FS_ProductStrDescriptor+0x38>)
 80075f8:	f7ff fee8 	bl	80073cc <USBD_GetString>
 80075fc:	e004      	b.n	8007608 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4904      	ldr	r1, [pc, #16]	; (8007614 <USBD_FS_ProductStrDescriptor+0x34>)
 8007602:	4805      	ldr	r0, [pc, #20]	; (8007618 <USBD_FS_ProductStrDescriptor+0x38>)
 8007604:	f7ff fee2 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007608:	4b02      	ldr	r3, [pc, #8]	; (8007614 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800760a:	4618      	mov	r0, r3
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	20000448 	.word	0x20000448
 8007618:	08007d30 	.word	0x08007d30

0800761c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b082      	sub	sp, #8
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	6039      	str	r1, [r7, #0]
 8007626:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	4904      	ldr	r1, [pc, #16]	; (800763c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800762c:	4804      	ldr	r0, [pc, #16]	; (8007640 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800762e:	f7ff fecd 	bl	80073cc <USBD_GetString>
  return USBD_StrDesc;
 8007632:	4b02      	ldr	r3, [pc, #8]	; (800763c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	20000448 	.word	0x20000448
 8007640:	08007d40 	.word	0x08007d40

08007644 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	4603      	mov	r3, r0
 800764c:	6039      	str	r1, [r7, #0]
 800764e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	221a      	movs	r2, #26
 8007654:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007656:	f000 f843 	bl	80076e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800765a:	4b02      	ldr	r3, [pc, #8]	; (8007664 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	2000013c 	.word	0x2000013c

08007668 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b082      	sub	sp, #8
 800766c:	af00      	add	r7, sp, #0
 800766e:	4603      	mov	r3, r0
 8007670:	6039      	str	r1, [r7, #0]
 8007672:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007674:	79fb      	ldrb	r3, [r7, #7]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d105      	bne.n	8007686 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	4907      	ldr	r1, [pc, #28]	; (800769c <USBD_FS_ConfigStrDescriptor+0x34>)
 800767e:	4808      	ldr	r0, [pc, #32]	; (80076a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007680:	f7ff fea4 	bl	80073cc <USBD_GetString>
 8007684:	e004      	b.n	8007690 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4904      	ldr	r1, [pc, #16]	; (800769c <USBD_FS_ConfigStrDescriptor+0x34>)
 800768a:	4805      	ldr	r0, [pc, #20]	; (80076a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800768c:	f7ff fe9e 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8007690:	4b02      	ldr	r3, [pc, #8]	; (800769c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000448 	.word	0x20000448
 80076a0:	08007d54 	.word	0x08007d54

080076a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	4603      	mov	r3, r0
 80076ac:	6039      	str	r1, [r7, #0]
 80076ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d105      	bne.n	80076c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	4907      	ldr	r1, [pc, #28]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076ba:	4808      	ldr	r0, [pc, #32]	; (80076dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076bc:	f7ff fe86 	bl	80073cc <USBD_GetString>
 80076c0:	e004      	b.n	80076cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80076c2:	683a      	ldr	r2, [r7, #0]
 80076c4:	4904      	ldr	r1, [pc, #16]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80076c6:	4805      	ldr	r0, [pc, #20]	; (80076dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80076c8:	f7ff fe80 	bl	80073cc <USBD_GetString>
  }
  return USBD_StrDesc;
 80076cc:	4b02      	ldr	r3, [pc, #8]	; (80076d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3708      	adds	r7, #8
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000448 	.word	0x20000448
 80076dc:	08007d60 	.word	0x08007d60

080076e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80076e6:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <Get_SerialNum+0x44>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80076ec:	4b0e      	ldr	r3, [pc, #56]	; (8007728 <Get_SerialNum+0x48>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80076f2:	4b0e      	ldr	r3, [pc, #56]	; (800772c <Get_SerialNum+0x4c>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4413      	add	r3, r2
 80076fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d009      	beq.n	800771a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007706:	2208      	movs	r2, #8
 8007708:	4909      	ldr	r1, [pc, #36]	; (8007730 <Get_SerialNum+0x50>)
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f000 f814 	bl	8007738 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007710:	2204      	movs	r2, #4
 8007712:	4908      	ldr	r1, [pc, #32]	; (8007734 <Get_SerialNum+0x54>)
 8007714:	68b8      	ldr	r0, [r7, #8]
 8007716:	f000 f80f 	bl	8007738 <IntToUnicode>
  }
}
 800771a:	bf00      	nop
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	1ffff7e8 	.word	0x1ffff7e8
 8007728:	1ffff7ec 	.word	0x1ffff7ec
 800772c:	1ffff7f0 	.word	0x1ffff7f0
 8007730:	2000013e 	.word	0x2000013e
 8007734:	2000014e 	.word	0x2000014e

08007738 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	4613      	mov	r3, r2
 8007744:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007746:	2300      	movs	r3, #0
 8007748:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]
 800774e:	e027      	b.n	80077a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	0f1b      	lsrs	r3, r3, #28
 8007754:	2b09      	cmp	r3, #9
 8007756:	d80b      	bhi.n	8007770 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	0f1b      	lsrs	r3, r3, #28
 800775c:	b2da      	uxtb	r2, r3
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4619      	mov	r1, r3
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	440b      	add	r3, r1
 8007768:	3230      	adds	r2, #48	; 0x30
 800776a:	b2d2      	uxtb	r2, r2
 800776c:	701a      	strb	r2, [r3, #0]
 800776e:	e00a      	b.n	8007786 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	0f1b      	lsrs	r3, r3, #28
 8007774:	b2da      	uxtb	r2, r3
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	4619      	mov	r1, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	440b      	add	r3, r1
 8007780:	3237      	adds	r2, #55	; 0x37
 8007782:	b2d2      	uxtb	r2, r2
 8007784:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800778c:	7dfb      	ldrb	r3, [r7, #23]
 800778e:	005b      	lsls	r3, r3, #1
 8007790:	3301      	adds	r3, #1
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	4413      	add	r3, r2
 8007796:	2200      	movs	r2, #0
 8007798:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800779a:	7dfb      	ldrb	r3, [r7, #23]
 800779c:	3301      	adds	r3, #1
 800779e:	75fb      	strb	r3, [r7, #23]
 80077a0:	7dfa      	ldrb	r2, [r7, #23]
 80077a2:	79fb      	ldrb	r3, [r7, #7]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d3d3      	bcc.n	8007750 <IntToUnicode+0x18>
  }
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr

080077b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0d      	ldr	r2, [pc, #52]	; (80077f8 <HAL_PCD_MspInit+0x44>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d113      	bne.n	80077ee <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80077c6:	4b0d      	ldr	r3, [pc, #52]	; (80077fc <HAL_PCD_MspInit+0x48>)
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <HAL_PCD_MspInit+0x48>)
 80077cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80077d0:	61d3      	str	r3, [r2, #28]
 80077d2:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <HAL_PCD_MspInit+0x48>)
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077da:	60fb      	str	r3, [r7, #12]
 80077dc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	2014      	movs	r0, #20
 80077e4:	f7f9 fd21 	bl	800122a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80077e8:	2014      	movs	r0, #20
 80077ea:	f7f9 fd3a 	bl	8001262 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	40005c00 	.word	0x40005c00
 80077fc:	40021000 	.word	0x40021000

08007800 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007814:	4619      	mov	r1, r3
 8007816:	4610      	mov	r0, r2
 8007818:	f7fe fea8 	bl	800656c <USBD_LL_SetupStage>
}
 800781c:	bf00      	nop
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	460b      	mov	r3, r1
 800782e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8007836:	78fa      	ldrb	r2, [r7, #3]
 8007838:	6879      	ldr	r1, [r7, #4]
 800783a:	4613      	mov	r3, r2
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	78fb      	ldrb	r3, [r7, #3]
 800784c:	4619      	mov	r1, r3
 800784e:	f7fe feda 	bl	8006606 <USBD_LL_DataOutStage>
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	460b      	mov	r3, r1
 8007864:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800786c:	78fa      	ldrb	r2, [r7, #3]
 800786e:	6879      	ldr	r1, [r7, #4]
 8007870:	4613      	mov	r3, r2
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	4413      	add	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	440b      	add	r3, r1
 800787a:	333c      	adds	r3, #60	; 0x3c
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	78fb      	ldrb	r3, [r7, #3]
 8007880:	4619      	mov	r1, r3
 8007882:	f7fe ff31 	bl	80066e8 <USBD_LL_DataInStage>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b082      	sub	sp, #8
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff f841 	bl	8006924 <USBD_LL_SOF>
}
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078b2:	2301      	movs	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b02      	cmp	r3, #2
 80078bc:	d001      	beq.n	80078c2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078be:	f7f9 fac1 	bl	8000e44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80078c8:	7bfa      	ldrb	r2, [r7, #15]
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fe fff1 	bl	80068b4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80078d8:	4618      	mov	r0, r3
 80078da:	f7fe ffaa 	bl	8006832 <USBD_LL_Reset>
}
 80078de:	bf00      	nop
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
	...

080078e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe ffeb 	bl	80068d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007904:	4b04      	ldr	r3, [pc, #16]	; (8007918 <HAL_PCD_SuspendCallback+0x30>)
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	4a03      	ldr	r2, [pc, #12]	; (8007918 <HAL_PCD_SuspendCallback+0x30>)
 800790a:	f043 0306 	orr.w	r3, r3, #6
 800790e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed00 	.word	0xe000ed00

0800791c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe ffe5 	bl	80068fa <USBD_LL_Resume>
}
 8007930:	bf00      	nop
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007940:	4a1f      	ldr	r2, [pc, #124]	; (80079c0 <USBD_LL_Init+0x88>)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a1d      	ldr	r2, [pc, #116]	; (80079c0 <USBD_LL_Init+0x88>)
 800794c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007950:	4b1b      	ldr	r3, [pc, #108]	; (80079c0 <USBD_LL_Init+0x88>)
 8007952:	4a1c      	ldr	r2, [pc, #112]	; (80079c4 <USBD_LL_Init+0x8c>)
 8007954:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <USBD_LL_Init+0x88>)
 8007958:	2208      	movs	r2, #8
 800795a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800795c:	4b18      	ldr	r3, [pc, #96]	; (80079c0 <USBD_LL_Init+0x88>)
 800795e:	2202      	movs	r2, #2
 8007960:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <USBD_LL_Init+0x88>)
 8007964:	2200      	movs	r2, #0
 8007966:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007968:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <USBD_LL_Init+0x88>)
 800796a:	2200      	movs	r2, #0
 800796c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800796e:	4b14      	ldr	r3, [pc, #80]	; (80079c0 <USBD_LL_Init+0x88>)
 8007970:	2200      	movs	r2, #0
 8007972:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007974:	4812      	ldr	r0, [pc, #72]	; (80079c0 <USBD_LL_Init+0x88>)
 8007976:	f7f9 fe2b 	bl	80015d0 <HAL_PCD_Init>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007980:	f7f9 fa60 	bl	8000e44 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800798a:	2318      	movs	r3, #24
 800798c:	2200      	movs	r2, #0
 800798e:	2100      	movs	r1, #0
 8007990:	f7fb fb33 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800799a:	2358      	movs	r3, #88	; 0x58
 800799c:	2200      	movs	r2, #0
 800799e:	2180      	movs	r1, #128	; 0x80
 80079a0:	f7fb fb2b 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80079aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80079ae:	2200      	movs	r2, #0
 80079b0:	2181      	movs	r1, #129	; 0x81
 80079b2:	f7fb fb22 	bl	8002ffa <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000648 	.word	0x20000648
 80079c4:	40005c00 	.word	0x40005c00

080079c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80079de:	4618      	mov	r0, r3
 80079e0:	f7f9 fef5 	bl	80017ce <HAL_PCD_Start>
 80079e4:	4603      	mov	r3, r0
 80079e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 f93c 	bl	8007c68 <USBD_Get_USB_Status>
 80079f0:	4603      	mov	r3, r0
 80079f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}

080079fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b084      	sub	sp, #16
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	70fb      	strb	r3, [r7, #3]
 8007a10:	460b      	mov	r3, r1
 8007a12:	70bb      	strb	r3, [r7, #2]
 8007a14:	4613      	mov	r3, r2
 8007a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007a26:	78bb      	ldrb	r3, [r7, #2]
 8007a28:	883a      	ldrh	r2, [r7, #0]
 8007a2a:	78f9      	ldrb	r1, [r7, #3]
 8007a2c:	f7fa f84a 	bl	8001ac4 <HAL_PCD_EP_Open>
 8007a30:	4603      	mov	r3, r0
 8007a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a34:	7bfb      	ldrb	r3, [r7, #15]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 f916 	bl	8007c68 <USBD_Get_USB_Status>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	460b      	mov	r3, r1
 8007a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007a64:	78fa      	ldrb	r2, [r7, #3]
 8007a66:	4611      	mov	r1, r2
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fa f888 	bl	8001b7e <HAL_PCD_EP_Close>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 f8f7 	bl	8007c68 <USBD_Get_USB_Status>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a94:	2300      	movs	r3, #0
 8007a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007aa2:	78fa      	ldrb	r2, [r7, #3]
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fa f919 	bl	8001cde <HAL_PCD_EP_SetStall>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f000 f8d8 	bl	8007c68 <USBD_Get_USB_Status>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	460b      	mov	r3, r1
 8007ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	4611      	mov	r1, r2
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fa f95a 	bl	8001d9e <HAL_PCD_EP_ClrStall>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 f8b9 	bl	8007c68 <USBD_Get_USB_Status>
 8007af6:	4603      	mov	r3, r0
 8007af8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	da0c      	bge.n	8007b3a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b26:	68f9      	ldr	r1, [r7, #12]
 8007b28:	1c5a      	adds	r2, r3, #1
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	4413      	add	r3, r2
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	440b      	add	r3, r1
 8007b34:	3302      	adds	r3, #2
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	e00b      	b.n	8007b52 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007b3a:	78fb      	ldrb	r3, [r7, #3]
 8007b3c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b40:	68f9      	ldr	r1, [r7, #12]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	440b      	add	r3, r1
 8007b4c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007b50:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bc80      	pop	{r7}
 8007b5a:	4770      	bx	lr

08007b5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b084      	sub	sp, #16
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b76:	78fa      	ldrb	r2, [r7, #3]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7f9 ff7d 	bl	8001a7a <HAL_PCD_SetAddress>
 8007b80:	4603      	mov	r3, r0
 8007b82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
 8007b86:	4618      	mov	r0, r3
 8007b88:	f000 f86e 	bl	8007c68 <USBD_Get_USB_Status>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b086      	sub	sp, #24
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	60f8      	str	r0, [r7, #12]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	72fb      	strb	r3, [r7, #11]
 8007baa:	4613      	mov	r3, r2
 8007bac:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bbc:	893b      	ldrh	r3, [r7, #8]
 8007bbe:	7af9      	ldrb	r1, [r7, #11]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	f7fa f855 	bl	8001c70 <HAL_PCD_EP_Transmit>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bca:	7dfb      	ldrb	r3, [r7, #23]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f000 f84b 	bl	8007c68 <USBD_Get_USB_Status>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	461a      	mov	r2, r3
 8007bec:	460b      	mov	r3, r1
 8007bee:	72fb      	strb	r3, [r7, #11]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c02:	893b      	ldrh	r3, [r7, #8]
 8007c04:	7af9      	ldrb	r1, [r7, #11]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	f7fa f801 	bl	8001c0e <HAL_PCD_EP_Receive>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f828 	bl	8007c68 <USBD_Get_USB_Status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3718      	adds	r7, #24
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007c30:	4b02      	ldr	r3, [pc, #8]	; (8007c3c <USBD_static_malloc+0x14>)
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bc80      	pop	{r7}
 8007c3a:	4770      	bx	lr
 8007c3c:	20000938 	.word	0x20000938

08007c40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]

}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bc80      	pop	{r7}
 8007c50:	4770      	bx	lr

08007c52 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c52:	b480      	push	{r7}
 8007c54:	b083      	sub	sp, #12
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bc80      	pop	{r7}
 8007c66:	4770      	bx	lr

08007c68 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c72:	2300      	movs	r3, #0
 8007c74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007c76:	79fb      	ldrb	r3, [r7, #7]
 8007c78:	2b03      	cmp	r3, #3
 8007c7a:	d817      	bhi.n	8007cac <USBD_Get_USB_Status+0x44>
 8007c7c:	a201      	add	r2, pc, #4	; (adr r2, 8007c84 <USBD_Get_USB_Status+0x1c>)
 8007c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c82:	bf00      	nop
 8007c84:	08007c95 	.word	0x08007c95
 8007c88:	08007c9b 	.word	0x08007c9b
 8007c8c:	08007ca1 	.word	0x08007ca1
 8007c90:	08007ca7 	.word	0x08007ca7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	73fb      	strb	r3, [r7, #15]
    break;
 8007c98:	e00b      	b.n	8007cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c9a:	2302      	movs	r3, #2
 8007c9c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c9e:	e008      	b.n	8007cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ca4:	e005      	b.n	8007cb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	73fb      	strb	r3, [r7, #15]
    break;
 8007caa:	e002      	b.n	8007cb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007cac:	2302      	movs	r3, #2
 8007cae:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb0:	bf00      	nop
  }
  return usb_status;
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bc80      	pop	{r7}
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop

08007cc0 <__libc_init_array>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	2600      	movs	r6, #0
 8007cc4:	4d0c      	ldr	r5, [pc, #48]	; (8007cf8 <__libc_init_array+0x38>)
 8007cc6:	4c0d      	ldr	r4, [pc, #52]	; (8007cfc <__libc_init_array+0x3c>)
 8007cc8:	1b64      	subs	r4, r4, r5
 8007cca:	10a4      	asrs	r4, r4, #2
 8007ccc:	42a6      	cmp	r6, r4
 8007cce:	d109      	bne.n	8007ce4 <__libc_init_array+0x24>
 8007cd0:	f000 f822 	bl	8007d18 <_init>
 8007cd4:	2600      	movs	r6, #0
 8007cd6:	4d0a      	ldr	r5, [pc, #40]	; (8007d00 <__libc_init_array+0x40>)
 8007cd8:	4c0a      	ldr	r4, [pc, #40]	; (8007d04 <__libc_init_array+0x44>)
 8007cda:	1b64      	subs	r4, r4, r5
 8007cdc:	10a4      	asrs	r4, r4, #2
 8007cde:	42a6      	cmp	r6, r4
 8007ce0:	d105      	bne.n	8007cee <__libc_init_array+0x2e>
 8007ce2:	bd70      	pop	{r4, r5, r6, pc}
 8007ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ce8:	4798      	blx	r3
 8007cea:	3601      	adds	r6, #1
 8007cec:	e7ee      	b.n	8007ccc <__libc_init_array+0xc>
 8007cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf2:	4798      	blx	r3
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	e7f2      	b.n	8007cde <__libc_init_array+0x1e>
 8007cf8:	08007d94 	.word	0x08007d94
 8007cfc:	08007d94 	.word	0x08007d94
 8007d00:	08007d94 	.word	0x08007d94
 8007d04:	08007d98 	.word	0x08007d98

08007d08 <memset>:
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4402      	add	r2, r0
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d100      	bne.n	8007d12 <memset+0xa>
 8007d10:	4770      	bx	lr
 8007d12:	f803 1b01 	strb.w	r1, [r3], #1
 8007d16:	e7f9      	b.n	8007d0c <memset+0x4>

08007d18 <_init>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr

08007d24 <_fini>:
 8007d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d26:	bf00      	nop
 8007d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d2a:	bc08      	pop	{r3}
 8007d2c:	469e      	mov	lr, r3
 8007d2e:	4770      	bx	lr
