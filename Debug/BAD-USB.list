
BAD-USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08008608  08008608  00018608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800866c  0800866c  00020158  2**0
                  CONTENTS
  4 .ARM          00000000  0800866c  0800866c  00020158  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800866c  0800866c  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800866c  0800866c  0001866c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008670  08008670  00018670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08008674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  20000158  080087cc  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000094c  080087cc  0002094c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae7  00000000  00000000  00020181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002616  00000000  00000000  0002bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002e280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d0  00000000  00000000  0002ec88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191e7  00000000  00000000  0002f558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7ad  00000000  00000000  0004873f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000847a3  00000000  00000000  00055eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002670  00000000  00000000  000da6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000158 	.word	0x20000158
 8000128:	00000000 	.word	0x00000000
 800012c:	080085f0 	.word	0x080085f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000015c 	.word	0x2000015c
 8000148:	080085f0 	.word	0x080085f0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f001 fb7a 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f001 fa3c 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f001 fa94 	bl	8001684 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800015c:	f007 fe62 	bl	8007e24 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8000160:	2201      	movs	r2, #1
 8000162:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000166:	48c8      	ldr	r0, [pc, #800]	; (8000488 <main+0x33c>)
 8000168:	f001 fe86 	bl	8001e78 <HAL_GPIO_WritePin>
  	  HAL_Delay(1000);
 800016c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000170:	f001 fbcc 	bl	800190c <HAL_Delay>
	  keyboardhid.MODIFIER = 0x08;
 8000174:	4bc5      	ldr	r3, [pc, #788]	; (800048c <main+0x340>)
 8000176:	2208      	movs	r2, #8
 8000178:	701a      	strb	r2, [r3, #0]
	  keyboardhid.KEYCODE1 = 0x15;
 800017a:	4bc4      	ldr	r3, [pc, #784]	; (800048c <main+0x340>)
 800017c:	2215      	movs	r2, #21
 800017e:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press GIU
 8000180:	2208      	movs	r2, #8
 8000182:	49c2      	ldr	r1, [pc, #776]	; (800048c <main+0x340>)
 8000184:	48c2      	ldr	r0, [pc, #776]	; (8000490 <main+0x344>)
 8000186:	f006 fd5d 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 800018a:	2014      	movs	r0, #20
 800018c:	f001 fbbe 	bl	800190c <HAL_Delay>
      keyboardhid.MODIFIER = 0x00;
 8000190:	4bbe      	ldr	r3, [pc, #760]	; (800048c <main+0x340>)
 8000192:	2200      	movs	r2, #0
 8000194:	701a      	strb	r2, [r3, #0]
      keyboardhid.KEYCODE1 = 0x00;
 8000196:	4bbd      	ldr	r3, [pc, #756]	; (800048c <main+0x340>)
 8000198:	2200      	movs	r2, #0
 800019a:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //ralease GIU
 800019c:	2208      	movs	r2, #8
 800019e:	49bb      	ldr	r1, [pc, #748]	; (800048c <main+0x340>)
 80001a0:	48bb      	ldr	r0, [pc, #748]	; (8000490 <main+0x344>)
 80001a2:	f006 fd4f 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 80001a6:	2014      	movs	r0, #20
 80001a8:	f001 fbb0 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x2C;
 80001ac:	4bb7      	ldr	r3, [pc, #732]	; (800048c <main+0x340>)
 80001ae:	222c      	movs	r2, #44	; 0x2c
 80001b0:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 80001b2:	2208      	movs	r2, #8
 80001b4:	49b5      	ldr	r1, [pc, #724]	; (800048c <main+0x340>)
 80001b6:	48b6      	ldr	r0, [pc, #728]	; (8000490 <main+0x344>)
 80001b8:	f006 fd44 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 80001bc:	2014      	movs	r0, #20
 80001be:	f001 fba5 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release p
 80001c2:	4bb2      	ldr	r3, [pc, #712]	; (800048c <main+0x340>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80001c8:	2208      	movs	r2, #8
 80001ca:	49b0      	ldr	r1, [pc, #704]	; (800048c <main+0x340>)
 80001cc:	48b0      	ldr	r0, [pc, #704]	; (8000490 <main+0x344>)
 80001ce:	f006 fd39 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 80001d2:	2014      	movs	r0, #20
 80001d4:	f001 fb9a 	bl	800190c <HAL_Delay>


      keyboardhid.KEYCODE1 = 0x13;
 80001d8:	4bac      	ldr	r3, [pc, #688]	; (800048c <main+0x340>)
 80001da:	2213      	movs	r2, #19
 80001dc:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 80001de:	2208      	movs	r2, #8
 80001e0:	49aa      	ldr	r1, [pc, #680]	; (800048c <main+0x340>)
 80001e2:	48ab      	ldr	r0, [pc, #684]	; (8000490 <main+0x344>)
 80001e4:	f006 fd2e 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 80001e8:	2014      	movs	r0, #20
 80001ea:	f001 fb8f 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release p
 80001ee:	4ba7      	ldr	r3, [pc, #668]	; (800048c <main+0x340>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80001f4:	2208      	movs	r2, #8
 80001f6:	49a5      	ldr	r1, [pc, #660]	; (800048c <main+0x340>)
 80001f8:	48a5      	ldr	r0, [pc, #660]	; (8000490 <main+0x344>)
 80001fa:	f006 fd23 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 80001fe:	2014      	movs	r0, #20
 8000200:	f001 fb84 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x12;
 8000204:	4ba1      	ldr	r3, [pc, #644]	; (800048c <main+0x340>)
 8000206:	2212      	movs	r2, #18
 8000208:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press o
 800020a:	2208      	movs	r2, #8
 800020c:	499f      	ldr	r1, [pc, #636]	; (800048c <main+0x340>)
 800020e:	48a0      	ldr	r0, [pc, #640]	; (8000490 <main+0x344>)
 8000210:	f006 fd18 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 8000214:	2014      	movs	r0, #20
 8000216:	f001 fb79 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release o
 800021a:	4b9c      	ldr	r3, [pc, #624]	; (800048c <main+0x340>)
 800021c:	2200      	movs	r2, #0
 800021e:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000220:	2208      	movs	r2, #8
 8000222:	499a      	ldr	r1, [pc, #616]	; (800048c <main+0x340>)
 8000224:	489a      	ldr	r0, [pc, #616]	; (8000490 <main+0x344>)
 8000226:	f006 fd0d 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 800022a:	2014      	movs	r0, #20
 800022c:	f001 fb6e 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x1A;
 8000230:	4b96      	ldr	r3, [pc, #600]	; (800048c <main+0x340>)
 8000232:	221a      	movs	r2, #26
 8000234:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press w
 8000236:	2208      	movs	r2, #8
 8000238:	4994      	ldr	r1, [pc, #592]	; (800048c <main+0x340>)
 800023a:	4895      	ldr	r0, [pc, #596]	; (8000490 <main+0x344>)
 800023c:	f006 fd02 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 8000240:	2014      	movs	r0, #20
 8000242:	f001 fb63 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release w
 8000246:	4b91      	ldr	r3, [pc, #580]	; (800048c <main+0x340>)
 8000248:	2200      	movs	r2, #0
 800024a:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800024c:	2208      	movs	r2, #8
 800024e:	498f      	ldr	r1, [pc, #572]	; (800048c <main+0x340>)
 8000250:	488f      	ldr	r0, [pc, #572]	; (8000490 <main+0x344>)
 8000252:	f006 fcf7 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 8000256:	2014      	movs	r0, #20
 8000258:	f001 fb58 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x08;
 800025c:	4b8b      	ldr	r3, [pc, #556]	; (800048c <main+0x340>)
 800025e:	2208      	movs	r2, #8
 8000260:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 8000262:	2208      	movs	r2, #8
 8000264:	4989      	ldr	r1, [pc, #548]	; (800048c <main+0x340>)
 8000266:	488a      	ldr	r0, [pc, #552]	; (8000490 <main+0x344>)
 8000268:	f006 fcec 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 800026c:	2014      	movs	r0, #20
 800026e:	f001 fb4d 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release e
 8000272:	4b86      	ldr	r3, [pc, #536]	; (800048c <main+0x340>)
 8000274:	2200      	movs	r2, #0
 8000276:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000278:	2208      	movs	r2, #8
 800027a:	4984      	ldr	r1, [pc, #528]	; (800048c <main+0x340>)
 800027c:	4884      	ldr	r0, [pc, #528]	; (8000490 <main+0x344>)
 800027e:	f006 fce1 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 8000282:	2014      	movs	r0, #20
 8000284:	f001 fb42 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x15;
 8000288:	4b80      	ldr	r3, [pc, #512]	; (800048c <main+0x340>)
 800028a:	2215      	movs	r2, #21
 800028c:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press r
 800028e:	2208      	movs	r2, #8
 8000290:	497e      	ldr	r1, [pc, #504]	; (800048c <main+0x340>)
 8000292:	487f      	ldr	r0, [pc, #508]	; (8000490 <main+0x344>)
 8000294:	f006 fcd6 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 8000298:	2014      	movs	r0, #20
 800029a:	f001 fb37 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release r
 800029e:	4b7b      	ldr	r3, [pc, #492]	; (800048c <main+0x340>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80002a4:	2208      	movs	r2, #8
 80002a6:	4979      	ldr	r1, [pc, #484]	; (800048c <main+0x340>)
 80002a8:	4879      	ldr	r0, [pc, #484]	; (8000490 <main+0x344>)
 80002aa:	f006 fccb 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 80002ae:	2014      	movs	r0, #20
 80002b0:	f001 fb2c 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x16;
 80002b4:	4b75      	ldr	r3, [pc, #468]	; (800048c <main+0x340>)
 80002b6:	2216      	movs	r2, #22
 80002b8:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 80002ba:	2208      	movs	r2, #8
 80002bc:	4973      	ldr	r1, [pc, #460]	; (800048c <main+0x340>)
 80002be:	4874      	ldr	r0, [pc, #464]	; (8000490 <main+0x344>)
 80002c0:	f006 fcc0 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 80002c4:	2014      	movs	r0, #20
 80002c6:	f001 fb21 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release s
 80002ca:	4b70      	ldr	r3, [pc, #448]	; (800048c <main+0x340>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80002d0:	2208      	movs	r2, #8
 80002d2:	496e      	ldr	r1, [pc, #440]	; (800048c <main+0x340>)
 80002d4:	486e      	ldr	r0, [pc, #440]	; (8000490 <main+0x344>)
 80002d6:	f006 fcb5 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 80002da:	2014      	movs	r0, #20
 80002dc:	f001 fb16 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x0B;
 80002e0:	4b6a      	ldr	r3, [pc, #424]	; (800048c <main+0x340>)
 80002e2:	220b      	movs	r2, #11
 80002e4:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press h
 80002e6:	2208      	movs	r2, #8
 80002e8:	4968      	ldr	r1, [pc, #416]	; (800048c <main+0x340>)
 80002ea:	4869      	ldr	r0, [pc, #420]	; (8000490 <main+0x344>)
 80002ec:	f006 fcaa 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 80002f0:	2014      	movs	r0, #20
 80002f2:	f001 fb0b 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release h
 80002f6:	4b65      	ldr	r3, [pc, #404]	; (800048c <main+0x340>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80002fc:	2208      	movs	r2, #8
 80002fe:	4963      	ldr	r1, [pc, #396]	; (800048c <main+0x340>)
 8000300:	4863      	ldr	r0, [pc, #396]	; (8000490 <main+0x344>)
 8000302:	f006 fc9f 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 8000306:	2014      	movs	r0, #20
 8000308:	f001 fb00 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x08;
 800030c:	4b5f      	ldr	r3, [pc, #380]	; (800048c <main+0x340>)
 800030e:	2208      	movs	r2, #8
 8000310:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 8000312:	2208      	movs	r2, #8
 8000314:	495d      	ldr	r1, [pc, #372]	; (800048c <main+0x340>)
 8000316:	485e      	ldr	r0, [pc, #376]	; (8000490 <main+0x344>)
 8000318:	f006 fc94 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 800031c:	2014      	movs	r0, #20
 800031e:	f001 faf5 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release e
 8000322:	4b5a      	ldr	r3, [pc, #360]	; (800048c <main+0x340>)
 8000324:	2200      	movs	r2, #0
 8000326:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000328:	2208      	movs	r2, #8
 800032a:	4958      	ldr	r1, [pc, #352]	; (800048c <main+0x340>)
 800032c:	4858      	ldr	r0, [pc, #352]	; (8000490 <main+0x344>)
 800032e:	f006 fc89 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 8000332:	2014      	movs	r0, #20
 8000334:	f001 faea 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x0F;
 8000338:	4b54      	ldr	r3, [pc, #336]	; (800048c <main+0x340>)
 800033a:	220f      	movs	r2, #15
 800033c:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press l
 800033e:	2208      	movs	r2, #8
 8000340:	4952      	ldr	r1, [pc, #328]	; (800048c <main+0x340>)
 8000342:	4853      	ldr	r0, [pc, #332]	; (8000490 <main+0x344>)
 8000344:	f006 fc7e 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 8000348:	2014      	movs	r0, #20
 800034a:	f001 fadf 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release l
 800034e:	4b4f      	ldr	r3, [pc, #316]	; (800048c <main+0x340>)
 8000350:	2200      	movs	r2, #0
 8000352:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000354:	2208      	movs	r2, #8
 8000356:	494d      	ldr	r1, [pc, #308]	; (800048c <main+0x340>)
 8000358:	484d      	ldr	r0, [pc, #308]	; (8000490 <main+0x344>)
 800035a:	f006 fc73 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 800035e:	2014      	movs	r0, #20
 8000360:	f001 fad4 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x0F;
 8000364:	4b49      	ldr	r3, [pc, #292]	; (800048c <main+0x340>)
 8000366:	220f      	movs	r2, #15
 8000368:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press l
 800036a:	2208      	movs	r2, #8
 800036c:	4947      	ldr	r1, [pc, #284]	; (800048c <main+0x340>)
 800036e:	4848      	ldr	r0, [pc, #288]	; (8000490 <main+0x344>)
 8000370:	f006 fc68 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 8000374:	2014      	movs	r0, #20
 8000376:	f001 fac9 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release l
 800037a:	4b44      	ldr	r3, [pc, #272]	; (800048c <main+0x340>)
 800037c:	2200      	movs	r2, #0
 800037e:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000380:	2208      	movs	r2, #8
 8000382:	4942      	ldr	r1, [pc, #264]	; (800048c <main+0x340>)
 8000384:	4842      	ldr	r0, [pc, #264]	; (8000490 <main+0x344>)
 8000386:	f006 fc5d 	bl	8006c44 <USBD_HID_SendReport>

      HAL_Delay(20);
 800038a:	2014      	movs	r0, #20
 800038c:	f001 fabe 	bl	800190c <HAL_Delay>

      keyboardhid.KEYCODE1 = 0x28;
 8000390:	4b3e      	ldr	r3, [pc, #248]	; (800048c <main+0x340>)
 8000392:	2228      	movs	r2, #40	; 0x28
 8000394:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <Enter>
 8000396:	2208      	movs	r2, #8
 8000398:	493c      	ldr	r1, [pc, #240]	; (800048c <main+0x340>)
 800039a:	483d      	ldr	r0, [pc, #244]	; (8000490 <main+0x344>)
 800039c:	f006 fc52 	bl	8006c44 <USBD_HID_SendReport>
      HAL_Delay(20);
 80003a0:	2014      	movs	r0, #20
 80003a2:	f001 fab3 	bl	800190c <HAL_Delay>
      keyboardhid.KEYCODE1 = 0x00;    //release <Enter>
 80003a6:	4b39      	ldr	r3, [pc, #228]	; (800048c <main+0x340>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	709a      	strb	r2, [r3, #2]
      USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80003ac:	2208      	movs	r2, #8
 80003ae:	4937      	ldr	r1, [pc, #220]	; (800048c <main+0x340>)
 80003b0:	4837      	ldr	r0, [pc, #220]	; (8000490 <main+0x344>)
 80003b2:	f006 fc47 	bl	8006c44 <USBD_HID_SendReport>

      //----------------------------
      HAL_Delay(1000);
 80003b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003ba:	f001 faa7 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 80003be:	4b33      	ldr	r3, [pc, #204]	; (800048c <main+0x340>)
 80003c0:	220c      	movs	r2, #12
 80003c2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press I
 80003c4:	2208      	movs	r2, #8
 80003c6:	4931      	ldr	r1, [pc, #196]	; (800048c <main+0x340>)
 80003c8:	4831      	ldr	r0, [pc, #196]	; (8000490 <main+0x344>)
 80003ca:	f006 fc3b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80003ce:	2032      	movs	r0, #50	; 0x32
 80003d0:	f001 fa9c 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release I
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <main+0x340>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <main+0x340>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80003e0:	2208      	movs	r2, #8
 80003e2:	492a      	ldr	r1, [pc, #168]	; (800048c <main+0x340>)
 80003e4:	482a      	ldr	r0, [pc, #168]	; (8000490 <main+0x344>)
 80003e6:	f006 fc2d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80003ea:	2032      	movs	r0, #50	; 0x32
 80003ec:	f001 fa8e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x11;
 80003f0:	4b26      	ldr	r3, [pc, #152]	; (800048c <main+0x340>)
 80003f2:	2211      	movs	r2, #17
 80003f4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press n
 80003f6:	2208      	movs	r2, #8
 80003f8:	4924      	ldr	r1, [pc, #144]	; (800048c <main+0x340>)
 80003fa:	4825      	ldr	r0, [pc, #148]	; (8000490 <main+0x344>)
 80003fc:	f006 fc22 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000400:	2032      	movs	r0, #50	; 0x32
 8000402:	f001 fa83 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release n
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <main+0x340>)
 8000408:	2200      	movs	r2, #0
 800040a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800040c:	2208      	movs	r2, #8
 800040e:	491f      	ldr	r1, [pc, #124]	; (800048c <main+0x340>)
 8000410:	481f      	ldr	r0, [pc, #124]	; (8000490 <main+0x344>)
 8000412:	f006 fc17 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000416:	2032      	movs	r0, #50	; 0x32
 8000418:	f001 fa78 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x19;
 800041c:	4b1b      	ldr	r3, [pc, #108]	; (800048c <main+0x340>)
 800041e:	2219      	movs	r2, #25
 8000420:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press v
 8000422:	2208      	movs	r2, #8
 8000424:	4919      	ldr	r1, [pc, #100]	; (800048c <main+0x340>)
 8000426:	481a      	ldr	r0, [pc, #104]	; (8000490 <main+0x344>)
 8000428:	f006 fc0c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f001 fa6d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release v
 8000432:	4b16      	ldr	r3, [pc, #88]	; (800048c <main+0x340>)
 8000434:	2200      	movs	r2, #0
 8000436:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000438:	2208      	movs	r2, #8
 800043a:	4914      	ldr	r1, [pc, #80]	; (800048c <main+0x340>)
 800043c:	4814      	ldr	r0, [pc, #80]	; (8000490 <main+0x344>)
 800043e:	f006 fc01 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000442:	2032      	movs	r0, #50	; 0x32
 8000444:	f001 fa62 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x12;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <main+0x340>)
 800044a:	2212      	movs	r2, #18
 800044c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press o
 800044e:	2208      	movs	r2, #8
 8000450:	490e      	ldr	r1, [pc, #56]	; (800048c <main+0x340>)
 8000452:	480f      	ldr	r0, [pc, #60]	; (8000490 <main+0x344>)
 8000454:	f006 fbf6 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000458:	2032      	movs	r0, #50	; 0x32
 800045a:	f001 fa57 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release o
 800045e:	4b0b      	ldr	r3, [pc, #44]	; (800048c <main+0x340>)
 8000460:	2200      	movs	r2, #0
 8000462:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000464:	2208      	movs	r2, #8
 8000466:	4909      	ldr	r1, [pc, #36]	; (800048c <main+0x340>)
 8000468:	4809      	ldr	r0, [pc, #36]	; (8000490 <main+0x344>)
 800046a:	f006 fbeb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800046e:	2032      	movs	r0, #50	; 0x32
 8000470:	f001 fa4c 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0E;
 8000474:	4b05      	ldr	r3, [pc, #20]	; (800048c <main+0x340>)
 8000476:	220e      	movs	r2, #14
 8000478:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press k
 800047a:	2208      	movs	r2, #8
 800047c:	4903      	ldr	r1, [pc, #12]	; (800048c <main+0x340>)
 800047e:	4804      	ldr	r0, [pc, #16]	; (8000490 <main+0x344>)
 8000480:	f006 fbe0 	bl	8006c44 <USBD_HID_SendReport>
 8000484:	e006      	b.n	8000494 <main+0x348>
 8000486:	bf00      	nop
 8000488:	40011000 	.word	0x40011000
 800048c:	20000174 	.word	0x20000174
 8000490:	20000184 	.word	0x20000184
              HAL_Delay(50);
 8000494:	2032      	movs	r0, #50	; 0x32
 8000496:	f001 fa39 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release k
 800049a:	4bc6      	ldr	r3, [pc, #792]	; (80007b4 <main+0x668>)
 800049c:	2200      	movs	r2, #0
 800049e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80004a0:	2208      	movs	r2, #8
 80004a2:	49c4      	ldr	r1, [pc, #784]	; (80007b4 <main+0x668>)
 80004a4:	48c4      	ldr	r0, [pc, #784]	; (80007b8 <main+0x66c>)
 80004a6:	f006 fbcd 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80004aa:	2032      	movs	r0, #50	; 0x32
 80004ac:	f001 fa2e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x08;
 80004b0:	4bc0      	ldr	r3, [pc, #768]	; (80007b4 <main+0x668>)
 80004b2:	2208      	movs	r2, #8
 80004b4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 80004b6:	2208      	movs	r2, #8
 80004b8:	49be      	ldr	r1, [pc, #760]	; (80007b4 <main+0x668>)
 80004ba:	48bf      	ldr	r0, [pc, #764]	; (80007b8 <main+0x66c>)
 80004bc:	f006 fbc2 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80004c0:	2032      	movs	r0, #50	; 0x32
 80004c2:	f001 fa23 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release e
 80004c6:	4bbb      	ldr	r3, [pc, #748]	; (80007b4 <main+0x668>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80004cc:	2208      	movs	r2, #8
 80004ce:	49b9      	ldr	r1, [pc, #740]	; (80007b4 <main+0x668>)
 80004d0:	48b9      	ldr	r0, [pc, #740]	; (80007b8 <main+0x66c>)
 80004d2:	f006 fbb7 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80004d6:	2032      	movs	r0, #50	; 0x32
 80004d8:	f001 fa18 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2D;
 80004dc:	4bb5      	ldr	r3, [pc, #724]	; (80007b4 <main+0x668>)
 80004de:	222d      	movs	r2, #45	; 0x2d
 80004e0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press -
 80004e2:	2208      	movs	r2, #8
 80004e4:	49b3      	ldr	r1, [pc, #716]	; (80007b4 <main+0x668>)
 80004e6:	48b4      	ldr	r0, [pc, #720]	; (80007b8 <main+0x66c>)
 80004e8:	f006 fbac 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80004ec:	2032      	movs	r0, #50	; 0x32
 80004ee:	f001 fa0d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release -
 80004f2:	4bb0      	ldr	r3, [pc, #704]	; (80007b4 <main+0x668>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80004f8:	2208      	movs	r2, #8
 80004fa:	49ae      	ldr	r1, [pc, #696]	; (80007b4 <main+0x668>)
 80004fc:	48ae      	ldr	r0, [pc, #696]	; (80007b8 <main+0x66c>)
 80004fe:	f006 fba1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000502:	2032      	movs	r0, #50	; 0x32
 8000504:	f001 fa02 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000508:	4baa      	ldr	r3, [pc, #680]	; (80007b4 <main+0x668>)
 800050a:	2202      	movs	r2, #2
 800050c:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x1A;
 800050e:	4ba9      	ldr	r3, [pc, #676]	; (80007b4 <main+0x668>)
 8000510:	221a      	movs	r2, #26
 8000512:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press W
 8000514:	2208      	movs	r2, #8
 8000516:	49a7      	ldr	r1, [pc, #668]	; (80007b4 <main+0x668>)
 8000518:	48a7      	ldr	r0, [pc, #668]	; (80007b8 <main+0x66c>)
 800051a:	f006 fb93 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800051e:	2032      	movs	r0, #50	; 0x32
 8000520:	f001 f9f4 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release W
 8000524:	4ba3      	ldr	r3, [pc, #652]	; (80007b4 <main+0x668>)
 8000526:	2200      	movs	r2, #0
 8000528:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 800052a:	4ba2      	ldr	r3, [pc, #648]	; (80007b4 <main+0x668>)
 800052c:	2200      	movs	r2, #0
 800052e:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000530:	2208      	movs	r2, #8
 8000532:	49a0      	ldr	r1, [pc, #640]	; (80007b4 <main+0x668>)
 8000534:	48a0      	ldr	r0, [pc, #640]	; (80007b8 <main+0x66c>)
 8000536:	f006 fb85 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800053a:	2032      	movs	r0, #50	; 0x32
 800053c:	f001 f9e6 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x08;
 8000540:	4b9c      	ldr	r3, [pc, #624]	; (80007b4 <main+0x668>)
 8000542:	2208      	movs	r2, #8
 8000544:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 8000546:	2208      	movs	r2, #8
 8000548:	499a      	ldr	r1, [pc, #616]	; (80007b4 <main+0x668>)
 800054a:	489b      	ldr	r0, [pc, #620]	; (80007b8 <main+0x66c>)
 800054c:	f006 fb7a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000550:	2032      	movs	r0, #50	; 0x32
 8000552:	f001 f9db 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release e
 8000556:	4b97      	ldr	r3, [pc, #604]	; (80007b4 <main+0x668>)
 8000558:	2200      	movs	r2, #0
 800055a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800055c:	2208      	movs	r2, #8
 800055e:	4995      	ldr	r1, [pc, #596]	; (80007b4 <main+0x668>)
 8000560:	4895      	ldr	r0, [pc, #596]	; (80007b8 <main+0x66c>)
 8000562:	f006 fb6f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000566:	2032      	movs	r0, #50	; 0x32
 8000568:	f001 f9d0 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x05;
 800056c:	4b91      	ldr	r3, [pc, #580]	; (80007b4 <main+0x668>)
 800056e:	2205      	movs	r2, #5
 8000570:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press b
 8000572:	2208      	movs	r2, #8
 8000574:	498f      	ldr	r1, [pc, #572]	; (80007b4 <main+0x668>)
 8000576:	4890      	ldr	r0, [pc, #576]	; (80007b8 <main+0x66c>)
 8000578:	f006 fb64 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800057c:	2032      	movs	r0, #50	; 0x32
 800057e:	f001 f9c5 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release b
 8000582:	4b8c      	ldr	r3, [pc, #560]	; (80007b4 <main+0x668>)
 8000584:	2200      	movs	r2, #0
 8000586:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000588:	2208      	movs	r2, #8
 800058a:	498a      	ldr	r1, [pc, #552]	; (80007b4 <main+0x668>)
 800058c:	488a      	ldr	r0, [pc, #552]	; (80007b8 <main+0x66c>)
 800058e:	f006 fb59 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000592:	2032      	movs	r0, #50	; 0x32
 8000594:	f001 f9ba 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000598:	4b86      	ldr	r3, [pc, #536]	; (80007b4 <main+0x668>)
 800059a:	2202      	movs	r2, #2
 800059c:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x15;
 800059e:	4b85      	ldr	r3, [pc, #532]	; (80007b4 <main+0x668>)
 80005a0:	2215      	movs	r2, #21
 80005a2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press R
 80005a4:	2208      	movs	r2, #8
 80005a6:	4983      	ldr	r1, [pc, #524]	; (80007b4 <main+0x668>)
 80005a8:	4883      	ldr	r0, [pc, #524]	; (80007b8 <main+0x66c>)
 80005aa:	f006 fb4b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80005ae:	2032      	movs	r0, #50	; 0x32
 80005b0:	f001 f9ac 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release R
 80005b4:	4b7f      	ldr	r3, [pc, #508]	; (80007b4 <main+0x668>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 80005ba:	4b7e      	ldr	r3, [pc, #504]	; (80007b4 <main+0x668>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80005c0:	2208      	movs	r2, #8
 80005c2:	497c      	ldr	r1, [pc, #496]	; (80007b4 <main+0x668>)
 80005c4:	487c      	ldr	r0, [pc, #496]	; (80007b8 <main+0x66c>)
 80005c6:	f006 fb3d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80005ca:	2032      	movs	r0, #50	; 0x32
 80005cc:	f001 f99e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x08;
 80005d0:	4b78      	ldr	r3, [pc, #480]	; (80007b4 <main+0x668>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 80005d6:	2208      	movs	r2, #8
 80005d8:	4976      	ldr	r1, [pc, #472]	; (80007b4 <main+0x668>)
 80005da:	4877      	ldr	r0, [pc, #476]	; (80007b8 <main+0x66c>)
 80005dc:	f006 fb32 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f001 f993 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release e
 80005e6:	4b73      	ldr	r3, [pc, #460]	; (80007b4 <main+0x668>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80005ec:	2208      	movs	r2, #8
 80005ee:	4971      	ldr	r1, [pc, #452]	; (80007b4 <main+0x668>)
 80005f0:	4871      	ldr	r0, [pc, #452]	; (80007b8 <main+0x66c>)
 80005f2:	f006 fb27 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80005f6:	2032      	movs	r0, #50	; 0x32
 80005f8:	f001 f988 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x14;
 80005fc:	4b6d      	ldr	r3, [pc, #436]	; (80007b4 <main+0x668>)
 80005fe:	2214      	movs	r2, #20
 8000600:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press q
 8000602:	2208      	movs	r2, #8
 8000604:	496b      	ldr	r1, [pc, #428]	; (80007b4 <main+0x668>)
 8000606:	486c      	ldr	r0, [pc, #432]	; (80007b8 <main+0x66c>)
 8000608:	f006 fb1c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800060c:	2032      	movs	r0, #50	; 0x32
 800060e:	f001 f97d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release q
 8000612:	4b68      	ldr	r3, [pc, #416]	; (80007b4 <main+0x668>)
 8000614:	2200      	movs	r2, #0
 8000616:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000618:	2208      	movs	r2, #8
 800061a:	4966      	ldr	r1, [pc, #408]	; (80007b4 <main+0x668>)
 800061c:	4866      	ldr	r0, [pc, #408]	; (80007b8 <main+0x66c>)
 800061e:	f006 fb11 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f001 f972 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x18;
 8000628:	4b62      	ldr	r3, [pc, #392]	; (80007b4 <main+0x668>)
 800062a:	2218      	movs	r2, #24
 800062c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press u
 800062e:	2208      	movs	r2, #8
 8000630:	4960      	ldr	r1, [pc, #384]	; (80007b4 <main+0x668>)
 8000632:	4861      	ldr	r0, [pc, #388]	; (80007b8 <main+0x66c>)
 8000634:	f006 fb06 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000638:	2032      	movs	r0, #50	; 0x32
 800063a:	f001 f967 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release u
 800063e:	4b5d      	ldr	r3, [pc, #372]	; (80007b4 <main+0x668>)
 8000640:	2200      	movs	r2, #0
 8000642:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000644:	2208      	movs	r2, #8
 8000646:	495b      	ldr	r1, [pc, #364]	; (80007b4 <main+0x668>)
 8000648:	485b      	ldr	r0, [pc, #364]	; (80007b8 <main+0x66c>)
 800064a:	f006 fafb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800064e:	2032      	movs	r0, #50	; 0x32
 8000650:	f001 f95c 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x08;
 8000654:	4b57      	ldr	r3, [pc, #348]	; (80007b4 <main+0x668>)
 8000656:	2208      	movs	r2, #8
 8000658:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 800065a:	2208      	movs	r2, #8
 800065c:	4955      	ldr	r1, [pc, #340]	; (80007b4 <main+0x668>)
 800065e:	4856      	ldr	r0, [pc, #344]	; (80007b8 <main+0x66c>)
 8000660:	f006 faf0 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f001 f951 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release e
 800066a:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <main+0x668>)
 800066c:	2200      	movs	r2, #0
 800066e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000670:	2208      	movs	r2, #8
 8000672:	4950      	ldr	r1, [pc, #320]	; (80007b4 <main+0x668>)
 8000674:	4850      	ldr	r0, [pc, #320]	; (80007b8 <main+0x66c>)
 8000676:	f006 fae5 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800067a:	2032      	movs	r0, #50	; 0x32
 800067c:	f001 f946 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 8000680:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <main+0x668>)
 8000682:	2216      	movs	r2, #22
 8000684:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 8000686:	2208      	movs	r2, #8
 8000688:	494a      	ldr	r1, [pc, #296]	; (80007b4 <main+0x668>)
 800068a:	484b      	ldr	r0, [pc, #300]	; (80007b8 <main+0x66c>)
 800068c:	f006 fada 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000690:	2032      	movs	r0, #50	; 0x32
 8000692:	f001 f93b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8000696:	4b47      	ldr	r3, [pc, #284]	; (80007b4 <main+0x668>)
 8000698:	2200      	movs	r2, #0
 800069a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800069c:	2208      	movs	r2, #8
 800069e:	4945      	ldr	r1, [pc, #276]	; (80007b4 <main+0x668>)
 80006a0:	4845      	ldr	r0, [pc, #276]	; (80007b8 <main+0x66c>)
 80006a2:	f006 facf 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80006a6:	2032      	movs	r0, #50	; 0x32
 80006a8:	f001 f930 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 80006ac:	4b41      	ldr	r3, [pc, #260]	; (80007b4 <main+0x668>)
 80006ae:	2217      	movs	r2, #23
 80006b0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 80006b2:	2208      	movs	r2, #8
 80006b4:	493f      	ldr	r1, [pc, #252]	; (80007b4 <main+0x668>)
 80006b6:	4840      	ldr	r0, [pc, #256]	; (80007b8 <main+0x66c>)
 80006b8:	f006 fac4 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80006bc:	2032      	movs	r0, #50	; 0x32
 80006be:	f001 f925 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 80006c2:	4b3c      	ldr	r3, [pc, #240]	; (80007b4 <main+0x668>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80006c8:	2208      	movs	r2, #8
 80006ca:	493a      	ldr	r1, [pc, #232]	; (80007b4 <main+0x668>)
 80006cc:	483a      	ldr	r0, [pc, #232]	; (80007b8 <main+0x66c>)
 80006ce:	f006 fab9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80006d2:	2032      	movs	r0, #50	; 0x32
 80006d4:	f001 f91a 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 80006d8:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <main+0x668>)
 80006da:	222c      	movs	r2, #44	; 0x2c
 80006dc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 80006de:	2208      	movs	r2, #8
 80006e0:	4934      	ldr	r1, [pc, #208]	; (80007b4 <main+0x668>)
 80006e2:	4835      	ldr	r0, [pc, #212]	; (80007b8 <main+0x66c>)
 80006e4:	f006 faae 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80006e8:	2032      	movs	r0, #50	; 0x32
 80006ea:	f001 f90f 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 80006ee:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <main+0x668>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80006f4:	2208      	movs	r2, #8
 80006f6:	492f      	ldr	r1, [pc, #188]	; (80007b4 <main+0x668>)
 80006f8:	482f      	ldr	r0, [pc, #188]	; (80007b8 <main+0x66c>)
 80006fa:	f006 faa3 	bl	8006c44 <USBD_HID_SendReport>

              HAL_Delay(50);
 80006fe:	2032      	movs	r0, #50	; 0x32
 8000700:	f001 f904 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x2D;
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <main+0x668>)
 8000706:	222d      	movs	r2, #45	; 0x2d
 8000708:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press -
 800070a:	2208      	movs	r2, #8
 800070c:	4929      	ldr	r1, [pc, #164]	; (80007b4 <main+0x668>)
 800070e:	482a      	ldr	r0, [pc, #168]	; (80007b8 <main+0x66c>)
 8000710:	f006 fa98 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000714:	2032      	movs	r0, #50	; 0x32
 8000716:	f001 f8f9 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release -
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <main+0x668>)
 800071c:	2200      	movs	r2, #0
 800071e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000720:	2208      	movs	r2, #8
 8000722:	4924      	ldr	r1, [pc, #144]	; (80007b4 <main+0x668>)
 8000724:	4824      	ldr	r0, [pc, #144]	; (80007b8 <main+0x66c>)
 8000726:	f006 fa8d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800072a:	2032      	movs	r0, #50	; 0x32
 800072c:	f001 f8ee 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000730:	4b20      	ldr	r3, [pc, #128]	; (80007b4 <main+0x668>)
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x18;
 8000736:	4b1f      	ldr	r3, [pc, #124]	; (80007b4 <main+0x668>)
 8000738:	2218      	movs	r2, #24
 800073a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press U
 800073c:	2208      	movs	r2, #8
 800073e:	491d      	ldr	r1, [pc, #116]	; (80007b4 <main+0x668>)
 8000740:	481d      	ldr	r0, [pc, #116]	; (80007b8 <main+0x66c>)
 8000742:	f006 fa7f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000746:	2032      	movs	r0, #50	; 0x32
 8000748:	f001 f8e0 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release U
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <main+0x668>)
 800074e:	2200      	movs	r2, #0
 8000750:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 8000752:	4b18      	ldr	r3, [pc, #96]	; (80007b4 <main+0x668>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000758:	2208      	movs	r2, #8
 800075a:	4916      	ldr	r1, [pc, #88]	; (80007b4 <main+0x668>)
 800075c:	4816      	ldr	r0, [pc, #88]	; (80007b8 <main+0x66c>)
 800075e:	f006 fa71 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000762:	2032      	movs	r0, #50	; 0x32
 8000764:	f001 f8d2 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x15;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <main+0x668>)
 800076a:	2215      	movs	r2, #21
 800076c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press r
 800076e:	2208      	movs	r2, #8
 8000770:	4910      	ldr	r1, [pc, #64]	; (80007b4 <main+0x668>)
 8000772:	4811      	ldr	r0, [pc, #68]	; (80007b8 <main+0x66c>)
 8000774:	f006 fa66 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000778:	2032      	movs	r0, #50	; 0x32
 800077a:	f001 f8c7 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release r
 800077e:	4b0d      	ldr	r3, [pc, #52]	; (80007b4 <main+0x668>)
 8000780:	2200      	movs	r2, #0
 8000782:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000784:	2208      	movs	r2, #8
 8000786:	490b      	ldr	r1, [pc, #44]	; (80007b4 <main+0x668>)
 8000788:	480b      	ldr	r0, [pc, #44]	; (80007b8 <main+0x66c>)
 800078a:	f006 fa5b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800078e:	2032      	movs	r0, #50	; 0x32
 8000790:	f001 f8bc 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <main+0x668>)
 8000796:	220c      	movs	r2, #12
 8000798:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press i
 800079a:	2208      	movs	r2, #8
 800079c:	4905      	ldr	r1, [pc, #20]	; (80007b4 <main+0x668>)
 800079e:	4806      	ldr	r0, [pc, #24]	; (80007b8 <main+0x66c>)
 80007a0:	f006 fa50 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80007a4:	2032      	movs	r0, #50	; 0x32
 80007a6:	f001 f8b1 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release i
 80007aa:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <main+0x668>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80007b0:	2208      	movs	r2, #8
 80007b2:	e003      	b.n	80007bc <main+0x670>
 80007b4:	20000174 	.word	0x20000174
 80007b8:	20000184 	.word	0x20000184
 80007bc:	49c5      	ldr	r1, [pc, #788]	; (8000ad4 <main+0x988>)
 80007be:	48c6      	ldr	r0, [pc, #792]	; (8000ad8 <main+0x98c>)
 80007c0:	f006 fa40 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80007c4:	2032      	movs	r0, #50	; 0x32
 80007c6:	f001 f8a1 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 80007ca:	4bc2      	ldr	r3, [pc, #776]	; (8000ad4 <main+0x988>)
 80007cc:	222c      	movs	r2, #44	; 0x2c
 80007ce:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 80007d0:	2208      	movs	r2, #8
 80007d2:	49c0      	ldr	r1, [pc, #768]	; (8000ad4 <main+0x988>)
 80007d4:	48c0      	ldr	r0, [pc, #768]	; (8000ad8 <main+0x98c>)
 80007d6:	f006 fa35 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80007da:	2032      	movs	r0, #50	; 0x32
 80007dc:	f001 f896 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 80007e0:	4bbc      	ldr	r3, [pc, #752]	; (8000ad4 <main+0x988>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80007e6:	2208      	movs	r2, #8
 80007e8:	49ba      	ldr	r1, [pc, #744]	; (8000ad4 <main+0x988>)
 80007ea:	48bb      	ldr	r0, [pc, #748]	; (8000ad8 <main+0x98c>)
 80007ec:	f006 fa2a 	bl	8006c44 <USBD_HID_SendReport>

              keyboardhid.MODIFIER = 0x02;
 80007f0:	4bb8      	ldr	r3, [pc, #736]	; (8000ad4 <main+0x988>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x33;
 80007f6:	4bb7      	ldr	r3, [pc, #732]	; (8000ad4 <main+0x988>)
 80007f8:	2233      	movs	r2, #51	; 0x33
 80007fa:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press :
 80007fc:	2208      	movs	r2, #8
 80007fe:	49b5      	ldr	r1, [pc, #724]	; (8000ad4 <main+0x988>)
 8000800:	48b5      	ldr	r0, [pc, #724]	; (8000ad8 <main+0x98c>)
 8000802:	f006 fa1f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000806:	2032      	movs	r0, #50	; 0x32
 8000808:	f001 f880 	bl	800190c <HAL_Delay>
              keyboardhid.MODIFIER = 0x00;
 800080c:	4bb1      	ldr	r3, [pc, #708]	; (8000ad4 <main+0x988>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x00;                            //release :
 8000812:	4bb0      	ldr	r3, [pc, #704]	; (8000ad4 <main+0x988>)
 8000814:	2200      	movs	r2, #0
 8000816:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000818:	2208      	movs	r2, #8
 800081a:	49ae      	ldr	r1, [pc, #696]	; (8000ad4 <main+0x988>)
 800081c:	48ae      	ldr	r0, [pc, #696]	; (8000ad8 <main+0x98c>)
 800081e:	f006 fa11 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000822:	2032      	movs	r0, #50	; 0x32
 8000824:	f001 f872 	bl	800190c <HAL_Delay>


              keyboardhid.KEYCODE1 = 0x34;
 8000828:	4baa      	ldr	r3, [pc, #680]	; (8000ad4 <main+0x988>)
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press '
 800082e:	2208      	movs	r2, #8
 8000830:	49a8      	ldr	r1, [pc, #672]	; (8000ad4 <main+0x988>)
 8000832:	48a9      	ldr	r0, [pc, #676]	; (8000ad8 <main+0x98c>)
 8000834:	f006 fa06 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000838:	2032      	movs	r0, #50	; 0x32
 800083a:	f001 f867 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release '
 800083e:	4ba5      	ldr	r3, [pc, #660]	; (8000ad4 <main+0x988>)
 8000840:	2200      	movs	r2, #0
 8000842:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000844:	2208      	movs	r2, #8
 8000846:	49a3      	ldr	r1, [pc, #652]	; (8000ad4 <main+0x988>)
 8000848:	48a3      	ldr	r0, [pc, #652]	; (8000ad8 <main+0x98c>)
 800084a:	f006 f9fb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800084e:	2032      	movs	r0, #50	; 0x32
 8000850:	f001 f85c 	bl	800190c <HAL_Delay>


              keyboardhid.KEYCODE1 = 0x0B;
 8000854:	4b9f      	ldr	r3, [pc, #636]	; (8000ad4 <main+0x988>)
 8000856:	220b      	movs	r2, #11
 8000858:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press h
 800085a:	2208      	movs	r2, #8
 800085c:	499d      	ldr	r1, [pc, #628]	; (8000ad4 <main+0x988>)
 800085e:	489e      	ldr	r0, [pc, #632]	; (8000ad8 <main+0x98c>)
 8000860:	f006 f9f0 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000864:	2032      	movs	r0, #50	; 0x32
 8000866:	f001 f851 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release h
 800086a:	4b9a      	ldr	r3, [pc, #616]	; (8000ad4 <main+0x988>)
 800086c:	2200      	movs	r2, #0
 800086e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000870:	2208      	movs	r2, #8
 8000872:	4998      	ldr	r1, [pc, #608]	; (8000ad4 <main+0x988>)
 8000874:	4898      	ldr	r0, [pc, #608]	; (8000ad8 <main+0x98c>)
 8000876:	f006 f9e5 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800087a:	2032      	movs	r0, #50	; 0x32
 800087c:	f001 f846 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 8000880:	4b94      	ldr	r3, [pc, #592]	; (8000ad4 <main+0x988>)
 8000882:	2217      	movs	r2, #23
 8000884:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 8000886:	2208      	movs	r2, #8
 8000888:	4992      	ldr	r1, [pc, #584]	; (8000ad4 <main+0x988>)
 800088a:	4893      	ldr	r0, [pc, #588]	; (8000ad8 <main+0x98c>)
 800088c:	f006 f9da 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000890:	2032      	movs	r0, #50	; 0x32
 8000892:	f001 f83b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 8000896:	4b8f      	ldr	r3, [pc, #572]	; (8000ad4 <main+0x988>)
 8000898:	2200      	movs	r2, #0
 800089a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800089c:	2208      	movs	r2, #8
 800089e:	498d      	ldr	r1, [pc, #564]	; (8000ad4 <main+0x988>)
 80008a0:	488d      	ldr	r0, [pc, #564]	; (8000ad8 <main+0x98c>)
 80008a2:	f006 f9cf 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80008a6:	2032      	movs	r0, #50	; 0x32
 80008a8:	f001 f830 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 80008ac:	4b89      	ldr	r3, [pc, #548]	; (8000ad4 <main+0x988>)
 80008ae:	2217      	movs	r2, #23
 80008b0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 80008b2:	2208      	movs	r2, #8
 80008b4:	4987      	ldr	r1, [pc, #540]	; (8000ad4 <main+0x988>)
 80008b6:	4888      	ldr	r0, [pc, #544]	; (8000ad8 <main+0x98c>)
 80008b8:	f006 f9c4 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80008bc:	2032      	movs	r0, #50	; 0x32
 80008be:	f001 f825 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 80008c2:	4b84      	ldr	r3, [pc, #528]	; (8000ad4 <main+0x988>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80008c8:	2208      	movs	r2, #8
 80008ca:	4982      	ldr	r1, [pc, #520]	; (8000ad4 <main+0x988>)
 80008cc:	4882      	ldr	r0, [pc, #520]	; (8000ad8 <main+0x98c>)
 80008ce:	f006 f9b9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80008d2:	2032      	movs	r0, #50	; 0x32
 80008d4:	f001 f81a 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 80008d8:	4b7e      	ldr	r3, [pc, #504]	; (8000ad4 <main+0x988>)
 80008da:	2213      	movs	r2, #19
 80008dc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 80008de:	2208      	movs	r2, #8
 80008e0:	497c      	ldr	r1, [pc, #496]	; (8000ad4 <main+0x988>)
 80008e2:	487d      	ldr	r0, [pc, #500]	; (8000ad8 <main+0x98c>)
 80008e4:	f006 f9ae 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80008e8:	2032      	movs	r0, #50	; 0x32
 80008ea:	f001 f80f 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 80008ee:	4b79      	ldr	r3, [pc, #484]	; (8000ad4 <main+0x988>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80008f4:	2208      	movs	r2, #8
 80008f6:	4977      	ldr	r1, [pc, #476]	; (8000ad4 <main+0x988>)
 80008f8:	4877      	ldr	r0, [pc, #476]	; (8000ad8 <main+0x98c>)
 80008fa:	f006 f9a3 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80008fe:	2032      	movs	r0, #50	; 0x32
 8000900:	f001 f804 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000904:	4b73      	ldr	r3, [pc, #460]	; (8000ad4 <main+0x988>)
 8000906:	2202      	movs	r2, #2
 8000908:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x33;
 800090a:	4b72      	ldr	r3, [pc, #456]	; (8000ad4 <main+0x988>)
 800090c:	2233      	movs	r2, #51	; 0x33
 800090e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press :
 8000910:	2208      	movs	r2, #8
 8000912:	4970      	ldr	r1, [pc, #448]	; (8000ad4 <main+0x988>)
 8000914:	4870      	ldr	r0, [pc, #448]	; (8000ad8 <main+0x98c>)
 8000916:	f006 f995 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800091a:	2032      	movs	r0, #50	; 0x32
 800091c:	f000 fff6 	bl	800190c <HAL_Delay>
              keyboardhid.MODIFIER = 0x00;
 8000920:	4b6c      	ldr	r3, [pc, #432]	; (8000ad4 <main+0x988>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x00;                            //release :
 8000926:	4b6b      	ldr	r3, [pc, #428]	; (8000ad4 <main+0x988>)
 8000928:	2200      	movs	r2, #0
 800092a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800092c:	2208      	movs	r2, #8
 800092e:	4969      	ldr	r1, [pc, #420]	; (8000ad4 <main+0x988>)
 8000930:	4869      	ldr	r0, [pc, #420]	; (8000ad8 <main+0x98c>)
 8000932:	f006 f987 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000936:	2032      	movs	r0, #50	; 0x32
 8000938:	f000 ffe8 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x38;
 800093c:	4b65      	ldr	r3, [pc, #404]	; (8000ad4 <main+0x988>)
 800093e:	2238      	movs	r2, #56	; 0x38
 8000940:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /
 8000942:	2208      	movs	r2, #8
 8000944:	4963      	ldr	r1, [pc, #396]	; (8000ad4 <main+0x988>)
 8000946:	4864      	ldr	r0, [pc, #400]	; (8000ad8 <main+0x98c>)
 8000948:	f006 f97c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800094c:	2032      	movs	r0, #50	; 0x32
 800094e:	f000 ffdd 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release /
 8000952:	4b60      	ldr	r3, [pc, #384]	; (8000ad4 <main+0x988>)
 8000954:	2200      	movs	r2, #0
 8000956:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000958:	2208      	movs	r2, #8
 800095a:	495e      	ldr	r1, [pc, #376]	; (8000ad4 <main+0x988>)
 800095c:	485e      	ldr	r0, [pc, #376]	; (8000ad8 <main+0x98c>)
 800095e:	f006 f971 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000962:	2032      	movs	r0, #50	; 0x32
 8000964:	f000 ffd2 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x38;
 8000968:	4b5a      	ldr	r3, [pc, #360]	; (8000ad4 <main+0x988>)
 800096a:	2238      	movs	r2, #56	; 0x38
 800096c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /
 800096e:	2208      	movs	r2, #8
 8000970:	4958      	ldr	r1, [pc, #352]	; (8000ad4 <main+0x988>)
 8000972:	4859      	ldr	r0, [pc, #356]	; (8000ad8 <main+0x98c>)
 8000974:	f006 f966 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000978:	2032      	movs	r0, #50	; 0x32
 800097a:	f000 ffc7 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release /
 800097e:	4b55      	ldr	r3, [pc, #340]	; (8000ad4 <main+0x988>)
 8000980:	2200      	movs	r2, #0
 8000982:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000984:	2208      	movs	r2, #8
 8000986:	4953      	ldr	r1, [pc, #332]	; (8000ad4 <main+0x988>)
 8000988:	4853      	ldr	r0, [pc, #332]	; (8000ad8 <main+0x98c>)
 800098a:	f006 f95b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800098e:	2032      	movs	r0, #50	; 0x32
 8000990:	f000 ffbc 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8000994:	4b4f      	ldr	r3, [pc, #316]	; (8000ad4 <main+0x988>)
 8000996:	221e      	movs	r2, #30
 8000998:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 800099a:	2208      	movs	r2, #8
 800099c:	494d      	ldr	r1, [pc, #308]	; (8000ad4 <main+0x988>)
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <main+0x98c>)
 80009a0:	f006 f950 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80009a4:	2032      	movs	r0, #50	; 0x32
 80009a6:	f000 ffb1 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 80009aa:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <main+0x988>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80009b0:	2208      	movs	r2, #8
 80009b2:	4948      	ldr	r1, [pc, #288]	; (8000ad4 <main+0x988>)
 80009b4:	4848      	ldr	r0, [pc, #288]	; (8000ad8 <main+0x98c>)
 80009b6:	f006 f945 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80009ba:	2032      	movs	r0, #50	; 0x32
 80009bc:	f000 ffa6 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x24;
 80009c0:	4b44      	ldr	r3, [pc, #272]	; (8000ad4 <main+0x988>)
 80009c2:	2224      	movs	r2, #36	; 0x24
 80009c4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 7
 80009c6:	2208      	movs	r2, #8
 80009c8:	4942      	ldr	r1, [pc, #264]	; (8000ad4 <main+0x988>)
 80009ca:	4843      	ldr	r0, [pc, #268]	; (8000ad8 <main+0x98c>)
 80009cc:	f006 f93a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80009d0:	2032      	movs	r0, #50	; 0x32
 80009d2:	f000 ff9b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 7
 80009d6:	4b3f      	ldr	r3, [pc, #252]	; (8000ad4 <main+0x988>)
 80009d8:	2200      	movs	r2, #0
 80009da:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80009dc:	2208      	movs	r2, #8
 80009de:	493d      	ldr	r1, [pc, #244]	; (8000ad4 <main+0x988>)
 80009e0:	483d      	ldr	r0, [pc, #244]	; (8000ad8 <main+0x98c>)
 80009e2:	f006 f92f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80009e6:	2032      	movs	r0, #50	; 0x32
 80009e8:	f000 ff90 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1F;
 80009ec:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <main+0x988>)
 80009ee:	221f      	movs	r2, #31
 80009f0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 2
 80009f2:	2208      	movs	r2, #8
 80009f4:	4937      	ldr	r1, [pc, #220]	; (8000ad4 <main+0x988>)
 80009f6:	4838      	ldr	r0, [pc, #224]	; (8000ad8 <main+0x98c>)
 80009f8:	f006 f924 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80009fc:	2032      	movs	r0, #50	; 0x32
 80009fe:	f000 ff85 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 2
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <main+0x988>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000a08:	2208      	movs	r2, #8
 8000a0a:	4932      	ldr	r1, [pc, #200]	; (8000ad4 <main+0x988>)
 8000a0c:	4832      	ldr	r0, [pc, #200]	; (8000ad8 <main+0x98c>)
 8000a0e:	f006 f919 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a12:	2032      	movs	r0, #50	; 0x32
 8000a14:	f000 ff7a 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <main+0x988>)
 8000a1a:	2237      	movs	r2, #55	; 0x37
 8000a1c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 8000a1e:	2208      	movs	r2, #8
 8000a20:	492c      	ldr	r1, [pc, #176]	; (8000ad4 <main+0x988>)
 8000a22:	482d      	ldr	r0, [pc, #180]	; (8000ad8 <main+0x98c>)
 8000a24:	f006 f90e 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a28:	2032      	movs	r0, #50	; 0x32
 8000a2a:	f000 ff6f 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <main+0x988>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000a34:	2208      	movs	r2, #8
 8000a36:	4927      	ldr	r1, [pc, #156]	; (8000ad4 <main+0x988>)
 8000a38:	4827      	ldr	r0, [pc, #156]	; (8000ad8 <main+0x98c>)
 8000a3a:	f006 f903 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a3e:	2032      	movs	r0, #50	; 0x32
 8000a40:	f000 ff64 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1F;
 8000a44:	4b23      	ldr	r3, [pc, #140]	; (8000ad4 <main+0x988>)
 8000a46:	221f      	movs	r2, #31
 8000a48:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 2
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	4921      	ldr	r1, [pc, #132]	; (8000ad4 <main+0x988>)
 8000a4e:	4822      	ldr	r0, [pc, #136]	; (8000ad8 <main+0x98c>)
 8000a50:	f006 f8f8 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a54:	2032      	movs	r0, #50	; 0x32
 8000a56:	f000 ff59 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 2
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <main+0x988>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000a60:	2208      	movs	r2, #8
 8000a62:	491c      	ldr	r1, [pc, #112]	; (8000ad4 <main+0x988>)
 8000a64:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <main+0x98c>)
 8000a66:	f006 f8ed 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a6a:	2032      	movs	r0, #50	; 0x32
 8000a6c:	f000 ff4e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <main+0x988>)
 8000a72:	221e      	movs	r2, #30
 8000a74:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 8000a76:	2208      	movs	r2, #8
 8000a78:	4916      	ldr	r1, [pc, #88]	; (8000ad4 <main+0x988>)
 8000a7a:	4817      	ldr	r0, [pc, #92]	; (8000ad8 <main+0x98c>)
 8000a7c:	f006 f8e2 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a80:	2032      	movs	r0, #50	; 0x32
 8000a82:	f000 ff43 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <main+0x988>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000a8c:	2208      	movs	r2, #8
 8000a8e:	4911      	ldr	r1, [pc, #68]	; (8000ad4 <main+0x988>)
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <main+0x98c>)
 8000a92:	f006 f8d7 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000a96:	2032      	movs	r0, #50	; 0x32
 8000a98:	f000 ff38 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 8000a9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <main+0x988>)
 8000a9e:	2237      	movs	r2, #55	; 0x37
 8000aa0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 8000aa2:	2208      	movs	r2, #8
 8000aa4:	490b      	ldr	r1, [pc, #44]	; (8000ad4 <main+0x988>)
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <main+0x98c>)
 8000aa8:	f006 f8cc 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000aac:	2032      	movs	r0, #50	; 0x32
 8000aae:	f000 ff2d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <main+0x988>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ab8:	2208      	movs	r2, #8
 8000aba:	4906      	ldr	r1, [pc, #24]	; (8000ad4 <main+0x988>)
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <main+0x98c>)
 8000abe:	f006 f8c1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ac2:	2032      	movs	r0, #50	; 0x32
 8000ac4:	f000 ff22 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x21;
 8000ac8:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <main+0x988>)
 8000aca:	2221      	movs	r2, #33	; 0x21
 8000acc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 4
 8000ace:	2208      	movs	r2, #8
 8000ad0:	4900      	ldr	r1, [pc, #0]	; (8000ad4 <main+0x988>)
 8000ad2:	e003      	b.n	8000adc <main+0x990>
 8000ad4:	20000174 	.word	0x20000174
 8000ad8:	20000184 	.word	0x20000184
 8000adc:	48c6      	ldr	r0, [pc, #792]	; (8000df8 <main+0xcac>)
 8000ade:	f006 f8b1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ae2:	2032      	movs	r0, #50	; 0x32
 8000ae4:	f000 ff12 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 4
 8000ae8:	4bc4      	ldr	r3, [pc, #784]	; (8000dfc <main+0xcb0>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000aee:	2208      	movs	r2, #8
 8000af0:	49c2      	ldr	r1, [pc, #776]	; (8000dfc <main+0xcb0>)
 8000af2:	48c1      	ldr	r0, [pc, #772]	; (8000df8 <main+0xcac>)
 8000af4:	f006 f8a6 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000af8:	2032      	movs	r0, #50	; 0x32
 8000afa:	f000 ff07 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x26;
 8000afe:	4bbf      	ldr	r3, [pc, #764]	; (8000dfc <main+0xcb0>)
 8000b00:	2226      	movs	r2, #38	; 0x26
 8000b02:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 9
 8000b04:	2208      	movs	r2, #8
 8000b06:	49bd      	ldr	r1, [pc, #756]	; (8000dfc <main+0xcb0>)
 8000b08:	48bb      	ldr	r0, [pc, #748]	; (8000df8 <main+0xcac>)
 8000b0a:	f006 f89b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b0e:	2032      	movs	r0, #50	; 0x32
 8000b10:	f000 fefc 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 9
 8000b14:	4bb9      	ldr	r3, [pc, #740]	; (8000dfc <main+0xcb0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	49b7      	ldr	r1, [pc, #732]	; (8000dfc <main+0xcb0>)
 8000b1e:	48b6      	ldr	r0, [pc, #728]	; (8000df8 <main+0xcac>)
 8000b20:	f006 f890 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b24:	2032      	movs	r0, #50	; 0x32
 8000b26:	f000 fef1 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 8000b2a:	4bb4      	ldr	r3, [pc, #720]	; (8000dfc <main+0xcb0>)
 8000b2c:	2237      	movs	r2, #55	; 0x37
 8000b2e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 8000b30:	2208      	movs	r2, #8
 8000b32:	49b2      	ldr	r1, [pc, #712]	; (8000dfc <main+0xcb0>)
 8000b34:	48b0      	ldr	r0, [pc, #704]	; (8000df8 <main+0xcac>)
 8000b36:	f006 f885 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f000 fee6 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 8000b40:	4bae      	ldr	r3, [pc, #696]	; (8000dfc <main+0xcb0>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b46:	2208      	movs	r2, #8
 8000b48:	49ac      	ldr	r1, [pc, #688]	; (8000dfc <main+0xcb0>)
 8000b4a:	48ab      	ldr	r0, [pc, #684]	; (8000df8 <main+0xcac>)
 8000b4c:	f006 f87a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b50:	2032      	movs	r0, #50	; 0x32
 8000b52:	f000 fedb 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8000b56:	4ba9      	ldr	r3, [pc, #676]	; (8000dfc <main+0xcb0>)
 8000b58:	221e      	movs	r2, #30
 8000b5a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	49a7      	ldr	r1, [pc, #668]	; (8000dfc <main+0xcb0>)
 8000b60:	48a5      	ldr	r0, [pc, #660]	; (8000df8 <main+0xcac>)
 8000b62:	f006 f86f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b66:	2032      	movs	r0, #50	; 0x32
 8000b68:	f000 fed0 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 8000b6c:	4ba3      	ldr	r3, [pc, #652]	; (8000dfc <main+0xcb0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b72:	2208      	movs	r2, #8
 8000b74:	49a1      	ldr	r1, [pc, #644]	; (8000dfc <main+0xcb0>)
 8000b76:	48a0      	ldr	r0, [pc, #640]	; (8000df8 <main+0xcac>)
 8000b78:	f006 f864 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b7c:	2032      	movs	r0, #50	; 0x32
 8000b7e:	f000 fec5 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x27;
 8000b82:	4b9e      	ldr	r3, [pc, #632]	; (8000dfc <main+0xcb0>)
 8000b84:	2227      	movs	r2, #39	; 0x27
 8000b86:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 0
 8000b88:	2208      	movs	r2, #8
 8000b8a:	499c      	ldr	r1, [pc, #624]	; (8000dfc <main+0xcb0>)
 8000b8c:	489a      	ldr	r0, [pc, #616]	; (8000df8 <main+0xcac>)
 8000b8e:	f006 f859 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000b92:	2032      	movs	r0, #50	; 0x32
 8000b94:	f000 feba 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 0
 8000b98:	4b98      	ldr	r3, [pc, #608]	; (8000dfc <main+0xcb0>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000b9e:	2208      	movs	r2, #8
 8000ba0:	4996      	ldr	r1, [pc, #600]	; (8000dfc <main+0xcb0>)
 8000ba2:	4895      	ldr	r0, [pc, #596]	; (8000df8 <main+0xcac>)
 8000ba4:	f006 f84e 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ba8:	2032      	movs	r0, #50	; 0x32
 8000baa:	f000 feaf 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000bae:	4b93      	ldr	r3, [pc, #588]	; (8000dfc <main+0xcb0>)
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x33;
 8000bb4:	4b91      	ldr	r3, [pc, #580]	; (8000dfc <main+0xcb0>)
 8000bb6:	2233      	movs	r2, #51	; 0x33
 8000bb8:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press :
 8000bba:	2208      	movs	r2, #8
 8000bbc:	498f      	ldr	r1, [pc, #572]	; (8000dfc <main+0xcb0>)
 8000bbe:	488e      	ldr	r0, [pc, #568]	; (8000df8 <main+0xcac>)
 8000bc0:	f006 f840 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000bc4:	2032      	movs	r0, #50	; 0x32
 8000bc6:	f000 fea1 	bl	800190c <HAL_Delay>
              keyboardhid.MODIFIER = 0x00;
 8000bca:	4b8c      	ldr	r3, [pc, #560]	; (8000dfc <main+0xcb0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x00;                            //release :
 8000bd0:	4b8a      	ldr	r3, [pc, #552]	; (8000dfc <main+0xcb0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000bd6:	2208      	movs	r2, #8
 8000bd8:	4988      	ldr	r1, [pc, #544]	; (8000dfc <main+0xcb0>)
 8000bda:	4887      	ldr	r0, [pc, #540]	; (8000df8 <main+0xcac>)
 8000bdc:	f006 f832 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000be0:	2032      	movs	r0, #50	; 0x32
 8000be2:	f000 fe93 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8000be6:	4b85      	ldr	r3, [pc, #532]	; (8000dfc <main+0xcb0>)
 8000be8:	221e      	movs	r2, #30
 8000bea:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 8000bec:	2208      	movs	r2, #8
 8000bee:	4983      	ldr	r1, [pc, #524]	; (8000dfc <main+0xcb0>)
 8000bf0:	4881      	ldr	r0, [pc, #516]	; (8000df8 <main+0xcac>)
 8000bf2:	f006 f827 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000bf6:	2032      	movs	r0, #50	; 0x32
 8000bf8:	f000 fe88 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 8000bfc:	4b7f      	ldr	r3, [pc, #508]	; (8000dfc <main+0xcb0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000c02:	2208      	movs	r2, #8
 8000c04:	497d      	ldr	r1, [pc, #500]	; (8000dfc <main+0xcb0>)
 8000c06:	487c      	ldr	r0, [pc, #496]	; (8000df8 <main+0xcac>)
 8000c08:	f006 f81c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c0c:	2032      	movs	r0, #50	; 0x32
 8000c0e:	f000 fe7d 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1F;
 8000c12:	4b7a      	ldr	r3, [pc, #488]	; (8000dfc <main+0xcb0>)
 8000c14:	221f      	movs	r2, #31
 8000c16:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 2
 8000c18:	2208      	movs	r2, #8
 8000c1a:	4978      	ldr	r1, [pc, #480]	; (8000dfc <main+0xcb0>)
 8000c1c:	4876      	ldr	r0, [pc, #472]	; (8000df8 <main+0xcac>)
 8000c1e:	f006 f811 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c22:	2032      	movs	r0, #50	; 0x32
 8000c24:	f000 fe72 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 2
 8000c28:	4b74      	ldr	r3, [pc, #464]	; (8000dfc <main+0xcb0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000c2e:	2208      	movs	r2, #8
 8000c30:	4972      	ldr	r1, [pc, #456]	; (8000dfc <main+0xcb0>)
 8000c32:	4871      	ldr	r0, [pc, #452]	; (8000df8 <main+0xcac>)
 8000c34:	f006 f806 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c38:	2032      	movs	r0, #50	; 0x32
 8000c3a:	f000 fe67 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x20;
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <main+0xcb0>)
 8000c40:	2220      	movs	r2, #32
 8000c42:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 3
 8000c44:	2208      	movs	r2, #8
 8000c46:	496d      	ldr	r1, [pc, #436]	; (8000dfc <main+0xcb0>)
 8000c48:	486b      	ldr	r0, [pc, #428]	; (8000df8 <main+0xcac>)
 8000c4a:	f005 fffb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c4e:	2032      	movs	r0, #50	; 0x32
 8000c50:	f000 fe5c 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 3
 8000c54:	4b69      	ldr	r3, [pc, #420]	; (8000dfc <main+0xcb0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000c5a:	2208      	movs	r2, #8
 8000c5c:	4967      	ldr	r1, [pc, #412]	; (8000dfc <main+0xcb0>)
 8000c5e:	4866      	ldr	r0, [pc, #408]	; (8000df8 <main+0xcac>)
 8000c60:	f005 fff0 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c64:	2032      	movs	r0, #50	; 0x32
 8000c66:	f000 fe51 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x21;
 8000c6a:	4b64      	ldr	r3, [pc, #400]	; (8000dfc <main+0xcb0>)
 8000c6c:	2221      	movs	r2, #33	; 0x21
 8000c6e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 4
 8000c70:	2208      	movs	r2, #8
 8000c72:	4962      	ldr	r1, [pc, #392]	; (8000dfc <main+0xcb0>)
 8000c74:	4860      	ldr	r0, [pc, #384]	; (8000df8 <main+0xcac>)
 8000c76:	f005 ffe5 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c7a:	2032      	movs	r0, #50	; 0x32
 8000c7c:	f000 fe46 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 4
 8000c80:	4b5e      	ldr	r3, [pc, #376]	; (8000dfc <main+0xcb0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000c86:	2208      	movs	r2, #8
 8000c88:	495c      	ldr	r1, [pc, #368]	; (8000dfc <main+0xcb0>)
 8000c8a:	485b      	ldr	r0, [pc, #364]	; (8000df8 <main+0xcac>)
 8000c8c:	f005 ffda 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000c90:	2032      	movs	r0, #50	; 0x32
 8000c92:	f000 fe3b 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x38;
 8000c96:	4b59      	ldr	r3, [pc, #356]	; (8000dfc <main+0xcb0>)
 8000c98:	2238      	movs	r2, #56	; 0x38
 8000c9a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	4957      	ldr	r1, [pc, #348]	; (8000dfc <main+0xcb0>)
 8000ca0:	4855      	ldr	r0, [pc, #340]	; (8000df8 <main+0xcac>)
 8000ca2:	f005 ffcf 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ca6:	2032      	movs	r0, #50	; 0x32
 8000ca8:	f000 fe30 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release /
 8000cac:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <main+0xcb0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000cb2:	2208      	movs	r2, #8
 8000cb4:	4951      	ldr	r1, [pc, #324]	; (8000dfc <main+0xcb0>)
 8000cb6:	4850      	ldr	r0, [pc, #320]	; (8000df8 <main+0xcac>)
 8000cb8:	f005 ffc4 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000cbc:	2032      	movs	r0, #50	; 0x32
 8000cbe:	f000 fe25 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 8000cc2:	4b4e      	ldr	r3, [pc, #312]	; (8000dfc <main+0xcb0>)
 8000cc4:	2216      	movs	r2, #22
 8000cc6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 8000cc8:	2208      	movs	r2, #8
 8000cca:	494c      	ldr	r1, [pc, #304]	; (8000dfc <main+0xcb0>)
 8000ccc:	484a      	ldr	r0, [pc, #296]	; (8000df8 <main+0xcac>)
 8000cce:	f005 ffb9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000cd2:	2032      	movs	r0, #50	; 0x32
 8000cd4:	f000 fe1a 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8000cd8:	4b48      	ldr	r3, [pc, #288]	; (8000dfc <main+0xcb0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4946      	ldr	r1, [pc, #280]	; (8000dfc <main+0xcb0>)
 8000ce2:	4845      	ldr	r0, [pc, #276]	; (8000df8 <main+0xcac>)
 8000ce4:	f005 ffae 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ce8:	2032      	movs	r0, #50	; 0x32
 8000cea:	f000 fe0f 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x06;
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <main+0xcb0>)
 8000cf0:	2206      	movs	r2, #6
 8000cf2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press c
 8000cf4:	2208      	movs	r2, #8
 8000cf6:	4941      	ldr	r1, [pc, #260]	; (8000dfc <main+0xcb0>)
 8000cf8:	483f      	ldr	r0, [pc, #252]	; (8000df8 <main+0xcac>)
 8000cfa:	f005 ffa3 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000cfe:	2032      	movs	r0, #50	; 0x32
 8000d00:	f000 fe04 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release c
 8000d04:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <main+0xcb0>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	493b      	ldr	r1, [pc, #236]	; (8000dfc <main+0xcb0>)
 8000d0e:	483a      	ldr	r0, [pc, #232]	; (8000df8 <main+0xcac>)
 8000d10:	f005 ff98 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d14:	2032      	movs	r0, #50	; 0x32
 8000d16:	f000 fdf9 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x15;
 8000d1a:	4b38      	ldr	r3, [pc, #224]	; (8000dfc <main+0xcb0>)
 8000d1c:	2215      	movs	r2, #21
 8000d1e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press r
 8000d20:	2208      	movs	r2, #8
 8000d22:	4936      	ldr	r1, [pc, #216]	; (8000dfc <main+0xcb0>)
 8000d24:	4834      	ldr	r0, [pc, #208]	; (8000df8 <main+0xcac>)
 8000d26:	f005 ff8d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	; 0x32
 8000d2c:	f000 fdee 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release r
 8000d30:	4b32      	ldr	r3, [pc, #200]	; (8000dfc <main+0xcb0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000d36:	2208      	movs	r2, #8
 8000d38:	4930      	ldr	r1, [pc, #192]	; (8000dfc <main+0xcb0>)
 8000d3a:	482f      	ldr	r0, [pc, #188]	; (8000df8 <main+0xcac>)
 8000d3c:	f005 ff82 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d40:	2032      	movs	r0, #50	; 0x32
 8000d42:	f000 fde3 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 8000d46:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <main+0xcb0>)
 8000d48:	220c      	movs	r2, #12
 8000d4a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press i
 8000d4c:	2208      	movs	r2, #8
 8000d4e:	492b      	ldr	r1, [pc, #172]	; (8000dfc <main+0xcb0>)
 8000d50:	4829      	ldr	r0, [pc, #164]	; (8000df8 <main+0xcac>)
 8000d52:	f005 ff77 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d56:	2032      	movs	r0, #50	; 0x32
 8000d58:	f000 fdd8 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release i
 8000d5c:	4b27      	ldr	r3, [pc, #156]	; (8000dfc <main+0xcb0>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000d62:	2208      	movs	r2, #8
 8000d64:	4925      	ldr	r1, [pc, #148]	; (8000dfc <main+0xcb0>)
 8000d66:	4824      	ldr	r0, [pc, #144]	; (8000df8 <main+0xcac>)
 8000d68:	f005 ff6c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d6c:	2032      	movs	r0, #50	; 0x32
 8000d6e:	f000 fdcd 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 8000d72:	4b22      	ldr	r3, [pc, #136]	; (8000dfc <main+0xcb0>)
 8000d74:	2213      	movs	r2, #19
 8000d76:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 8000d78:	2208      	movs	r2, #8
 8000d7a:	4920      	ldr	r1, [pc, #128]	; (8000dfc <main+0xcb0>)
 8000d7c:	481e      	ldr	r0, [pc, #120]	; (8000df8 <main+0xcac>)
 8000d7e:	f005 ff61 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d82:	2032      	movs	r0, #50	; 0x32
 8000d84:	f000 fdc2 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 8000d88:	4b1c      	ldr	r3, [pc, #112]	; (8000dfc <main+0xcb0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000d8e:	2208      	movs	r2, #8
 8000d90:	491a      	ldr	r1, [pc, #104]	; (8000dfc <main+0xcb0>)
 8000d92:	4819      	ldr	r0, [pc, #100]	; (8000df8 <main+0xcac>)
 8000d94:	f005 ff56 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000d98:	2032      	movs	r0, #50	; 0x32
 8000d9a:	f000 fdb7 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <main+0xcb0>)
 8000da0:	2217      	movs	r2, #23
 8000da2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 8000da4:	2208      	movs	r2, #8
 8000da6:	4915      	ldr	r1, [pc, #84]	; (8000dfc <main+0xcb0>)
 8000da8:	4813      	ldr	r0, [pc, #76]	; (8000df8 <main+0xcac>)
 8000daa:	f005 ff4b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000dae:	2032      	movs	r0, #50	; 0x32
 8000db0:	f000 fdac 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <main+0xcb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000dba:	2208      	movs	r2, #8
 8000dbc:	490f      	ldr	r1, [pc, #60]	; (8000dfc <main+0xcb0>)
 8000dbe:	480e      	ldr	r0, [pc, #56]	; (8000df8 <main+0xcac>)
 8000dc0:	f005 ff40 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000dc4:	2032      	movs	r0, #50	; 0x32
 8000dc6:	f000 fda1 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <main+0xcb0>)
 8000dcc:	2237      	movs	r2, #55	; 0x37
 8000dce:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 8000dd0:	2208      	movs	r2, #8
 8000dd2:	490a      	ldr	r1, [pc, #40]	; (8000dfc <main+0xcb0>)
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <main+0xcac>)
 8000dd6:	f005 ff35 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000dda:	2032      	movs	r0, #50	; 0x32
 8000ddc:	f000 fd96 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <main+0xcb0>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000de6:	2208      	movs	r2, #8
 8000de8:	4904      	ldr	r1, [pc, #16]	; (8000dfc <main+0xcb0>)
 8000dea:	4803      	ldr	r0, [pc, #12]	; (8000df8 <main+0xcac>)
 8000dec:	f005 ff2a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000df0:	2032      	movs	r0, #50	; 0x32
 8000df2:	f000 fd8b 	bl	800190c <HAL_Delay>
 8000df6:	e003      	b.n	8000e00 <main+0xcb4>
 8000df8:	20000184 	.word	0x20000184
 8000dfc:	20000174 	.word	0x20000174

              keyboardhid.KEYCODE1 = 0x13;
 8000e00:	4bc6      	ldr	r3, [pc, #792]	; (800111c <main+0xfd0>)
 8000e02:	2213      	movs	r2, #19
 8000e04:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 8000e06:	2208      	movs	r2, #8
 8000e08:	49c4      	ldr	r1, [pc, #784]	; (800111c <main+0xfd0>)
 8000e0a:	48c5      	ldr	r0, [pc, #788]	; (8001120 <main+0xfd4>)
 8000e0c:	f005 ff1a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e10:	2032      	movs	r0, #50	; 0x32
 8000e12:	f000 fd7b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 8000e16:	4bc1      	ldr	r3, [pc, #772]	; (800111c <main+0xfd0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	49bf      	ldr	r1, [pc, #764]	; (800111c <main+0xfd0>)
 8000e20:	48bf      	ldr	r0, [pc, #764]	; (8001120 <main+0xfd4>)
 8000e22:	f005 ff0f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e26:	2032      	movs	r0, #50	; 0x32
 8000e28:	f000 fd70 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 8000e2c:	4bbb      	ldr	r3, [pc, #748]	; (800111c <main+0xfd0>)
 8000e2e:	2216      	movs	r2, #22
 8000e30:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 8000e32:	2208      	movs	r2, #8
 8000e34:	49b9      	ldr	r1, [pc, #740]	; (800111c <main+0xfd0>)
 8000e36:	48ba      	ldr	r0, [pc, #744]	; (8001120 <main+0xfd4>)
 8000e38:	f005 ff04 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e3c:	2032      	movs	r0, #50	; 0x32
 8000e3e:	f000 fd65 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8000e42:	4bb6      	ldr	r3, [pc, #728]	; (800111c <main+0xfd0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000e48:	2208      	movs	r2, #8
 8000e4a:	49b4      	ldr	r1, [pc, #720]	; (800111c <main+0xfd0>)
 8000e4c:	48b4      	ldr	r0, [pc, #720]	; (8001120 <main+0xfd4>)
 8000e4e:	f005 fef9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e52:	2032      	movs	r0, #50	; 0x32
 8000e54:	f000 fd5a 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8000e58:	4bb0      	ldr	r3, [pc, #704]	; (800111c <main+0xfd0>)
 8000e5a:	221e      	movs	r2, #30
 8000e5c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 8000e5e:	2208      	movs	r2, #8
 8000e60:	49ae      	ldr	r1, [pc, #696]	; (800111c <main+0xfd0>)
 8000e62:	48af      	ldr	r0, [pc, #700]	; (8001120 <main+0xfd4>)
 8000e64:	f005 feee 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e68:	2032      	movs	r0, #50	; 0x32
 8000e6a:	f000 fd4f 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 8000e6e:	4bab      	ldr	r3, [pc, #684]	; (800111c <main+0xfd0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000e74:	2208      	movs	r2, #8
 8000e76:	49a9      	ldr	r1, [pc, #676]	; (800111c <main+0xfd0>)
 8000e78:	48a9      	ldr	r0, [pc, #676]	; (8001120 <main+0xfd4>)
 8000e7a:	f005 fee3 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e7e:	2032      	movs	r0, #50	; 0x32
 8000e80:	f000 fd44 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x34;
 8000e84:	4ba5      	ldr	r3, [pc, #660]	; (800111c <main+0xfd0>)
 8000e86:	2234      	movs	r2, #52	; 0x34
 8000e88:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press '
 8000e8a:	2208      	movs	r2, #8
 8000e8c:	49a3      	ldr	r1, [pc, #652]	; (800111c <main+0xfd0>)
 8000e8e:	48a4      	ldr	r0, [pc, #656]	; (8001120 <main+0xfd4>)
 8000e90:	f005 fed8 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000e94:	2032      	movs	r0, #50	; 0x32
 8000e96:	f000 fd39 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release '
 8000e9a:	4ba0      	ldr	r3, [pc, #640]	; (800111c <main+0xfd0>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	499e      	ldr	r1, [pc, #632]	; (800111c <main+0xfd0>)
 8000ea4:	489e      	ldr	r0, [pc, #632]	; (8001120 <main+0xfd4>)
 8000ea6:	f005 fecd 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000eaa:	2032      	movs	r0, #50	; 0x32
 8000eac:	f000 fd2e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 8000eb0:	4b9a      	ldr	r3, [pc, #616]	; (800111c <main+0xfd0>)
 8000eb2:	222c      	movs	r2, #44	; 0x2c
 8000eb4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	4998      	ldr	r1, [pc, #608]	; (800111c <main+0xfd0>)
 8000eba:	4899      	ldr	r0, [pc, #612]	; (8001120 <main+0xfd4>)
 8000ebc:	f005 fec2 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ec0:	2032      	movs	r0, #50	; 0x32
 8000ec2:	f000 fd23 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 8000ec6:	4b95      	ldr	r3, [pc, #596]	; (800111c <main+0xfd0>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ecc:	2208      	movs	r2, #8
 8000ece:	4993      	ldr	r1, [pc, #588]	; (800111c <main+0xfd0>)
 8000ed0:	4893      	ldr	r0, [pc, #588]	; (8001120 <main+0xfd4>)
 8000ed2:	f005 feb7 	bl	8006c44 <USBD_HID_SendReport>

              HAL_Delay(50);
 8000ed6:	2032      	movs	r0, #50	; 0x32
 8000ed8:	f000 fd18 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x2D;
 8000edc:	4b8f      	ldr	r3, [pc, #572]	; (800111c <main+0xfd0>)
 8000ede:	222d      	movs	r2, #45	; 0x2d
 8000ee0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press -
 8000ee2:	2208      	movs	r2, #8
 8000ee4:	498d      	ldr	r1, [pc, #564]	; (800111c <main+0xfd0>)
 8000ee6:	488e      	ldr	r0, [pc, #568]	; (8001120 <main+0xfd4>)
 8000ee8:	f005 feac 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000eec:	2032      	movs	r0, #50	; 0x32
 8000eee:	f000 fd0d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release -
 8000ef2:	4b8a      	ldr	r3, [pc, #552]	; (800111c <main+0xfd0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000ef8:	2208      	movs	r2, #8
 8000efa:	4988      	ldr	r1, [pc, #544]	; (800111c <main+0xfd0>)
 8000efc:	4888      	ldr	r0, [pc, #544]	; (8001120 <main+0xfd4>)
 8000efe:	f005 fea1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f02:	2032      	movs	r0, #50	; 0x32
 8000f04:	f000 fd02 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000f08:	4b84      	ldr	r3, [pc, #528]	; (800111c <main+0xfd0>)
 8000f0a:	2202      	movs	r2, #2
 8000f0c:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x12;
 8000f0e:	4b83      	ldr	r3, [pc, #524]	; (800111c <main+0xfd0>)
 8000f10:	2212      	movs	r2, #18
 8000f12:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press O
 8000f14:	2208      	movs	r2, #8
 8000f16:	4981      	ldr	r1, [pc, #516]	; (800111c <main+0xfd0>)
 8000f18:	4881      	ldr	r0, [pc, #516]	; (8001120 <main+0xfd4>)
 8000f1a:	f005 fe93 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f1e:	2032      	movs	r0, #50	; 0x32
 8000f20:	f000 fcf4 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release O
 8000f24:	4b7d      	ldr	r3, [pc, #500]	; (800111c <main+0xfd0>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 8000f2a:	4b7c      	ldr	r3, [pc, #496]	; (800111c <main+0xfd0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000f30:	2208      	movs	r2, #8
 8000f32:	497a      	ldr	r1, [pc, #488]	; (800111c <main+0xfd0>)
 8000f34:	487a      	ldr	r0, [pc, #488]	; (8001120 <main+0xfd4>)
 8000f36:	f005 fe85 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f3a:	2032      	movs	r0, #50	; 0x32
 8000f3c:	f000 fce6 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x18;
 8000f40:	4b76      	ldr	r3, [pc, #472]	; (800111c <main+0xfd0>)
 8000f42:	2218      	movs	r2, #24
 8000f44:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press u
 8000f46:	2208      	movs	r2, #8
 8000f48:	4974      	ldr	r1, [pc, #464]	; (800111c <main+0xfd0>)
 8000f4a:	4875      	ldr	r0, [pc, #468]	; (8001120 <main+0xfd4>)
 8000f4c:	f005 fe7a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f50:	2032      	movs	r0, #50	; 0x32
 8000f52:	f000 fcdb 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release u
 8000f56:	4b71      	ldr	r3, [pc, #452]	; (800111c <main+0xfd0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	496f      	ldr	r1, [pc, #444]	; (800111c <main+0xfd0>)
 8000f60:	486f      	ldr	r0, [pc, #444]	; (8001120 <main+0xfd4>)
 8000f62:	f005 fe6f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f66:	2032      	movs	r0, #50	; 0x32
 8000f68:	f000 fcd0 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 8000f6c:	4b6b      	ldr	r3, [pc, #428]	; (800111c <main+0xfd0>)
 8000f6e:	2217      	movs	r2, #23
 8000f70:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 8000f72:	2208      	movs	r2, #8
 8000f74:	4969      	ldr	r1, [pc, #420]	; (800111c <main+0xfd0>)
 8000f76:	486a      	ldr	r0, [pc, #424]	; (8001120 <main+0xfd4>)
 8000f78:	f005 fe64 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f000 fcc5 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 8000f82:	4b66      	ldr	r3, [pc, #408]	; (800111c <main+0xfd0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000f88:	2208      	movs	r2, #8
 8000f8a:	4964      	ldr	r1, [pc, #400]	; (800111c <main+0xfd0>)
 8000f8c:	4864      	ldr	r0, [pc, #400]	; (8001120 <main+0xfd4>)
 8000f8e:	f005 fe59 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f000 fcba 	bl	800190c <HAL_Delay>

              keyboardhid.MODIFIER = 0x02;
 8000f98:	4b60      	ldr	r3, [pc, #384]	; (800111c <main+0xfd0>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	701a      	strb	r2, [r3, #0]
              keyboardhid.KEYCODE1 = 0x09;
 8000f9e:	4b5f      	ldr	r3, [pc, #380]	; (800111c <main+0xfd0>)
 8000fa0:	2209      	movs	r2, #9
 8000fa2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press F
 8000fa4:	2208      	movs	r2, #8
 8000fa6:	495d      	ldr	r1, [pc, #372]	; (800111c <main+0xfd0>)
 8000fa8:	485d      	ldr	r0, [pc, #372]	; (8001120 <main+0xfd4>)
 8000faa:	f005 fe4b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000fae:	2032      	movs	r0, #50	; 0x32
 8000fb0:	f000 fcac 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release F
 8000fb4:	4b59      	ldr	r3, [pc, #356]	; (800111c <main+0xfd0>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	709a      	strb	r2, [r3, #2]
              keyboardhid.MODIFIER = 0x00;
 8000fba:	4b58      	ldr	r3, [pc, #352]	; (800111c <main+0xfd0>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]

              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000fc0:	2208      	movs	r2, #8
 8000fc2:	4956      	ldr	r1, [pc, #344]	; (800111c <main+0xfd0>)
 8000fc4:	4856      	ldr	r0, [pc, #344]	; (8001120 <main+0xfd4>)
 8000fc6:	f005 fe3d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000fca:	2032      	movs	r0, #50	; 0x32
 8000fcc:	f000 fc9e 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 8000fd0:	4b52      	ldr	r3, [pc, #328]	; (800111c <main+0xfd0>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press i
 8000fd6:	2208      	movs	r2, #8
 8000fd8:	4950      	ldr	r1, [pc, #320]	; (800111c <main+0xfd0>)
 8000fda:	4851      	ldr	r0, [pc, #324]	; (8001120 <main+0xfd4>)
 8000fdc:	f005 fe32 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000fe0:	2032      	movs	r0, #50	; 0x32
 8000fe2:	f000 fc93 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release i
 8000fe6:	4b4d      	ldr	r3, [pc, #308]	; (800111c <main+0xfd0>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8000fec:	2208      	movs	r2, #8
 8000fee:	494b      	ldr	r1, [pc, #300]	; (800111c <main+0xfd0>)
 8000ff0:	484b      	ldr	r0, [pc, #300]	; (8001120 <main+0xfd4>)
 8000ff2:	f005 fe27 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8000ff6:	2032      	movs	r0, #50	; 0x32
 8000ff8:	f000 fc88 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0F;
 8000ffc:	4b47      	ldr	r3, [pc, #284]	; (800111c <main+0xfd0>)
 8000ffe:	220f      	movs	r2, #15
 8001000:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press l
 8001002:	2208      	movs	r2, #8
 8001004:	4945      	ldr	r1, [pc, #276]	; (800111c <main+0xfd0>)
 8001006:	4846      	ldr	r0, [pc, #280]	; (8001120 <main+0xfd4>)
 8001008:	f005 fe1c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800100c:	2032      	movs	r0, #50	; 0x32
 800100e:	f000 fc7d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release l
 8001012:	4b42      	ldr	r3, [pc, #264]	; (800111c <main+0xfd0>)
 8001014:	2200      	movs	r2, #0
 8001016:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001018:	2208      	movs	r2, #8
 800101a:	4940      	ldr	r1, [pc, #256]	; (800111c <main+0xfd0>)
 800101c:	4840      	ldr	r0, [pc, #256]	; (8001120 <main+0xfd4>)
 800101e:	f005 fe11 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001022:	2032      	movs	r0, #50	; 0x32
 8001024:	f000 fc72 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x08;
 8001028:	4b3c      	ldr	r3, [pc, #240]	; (800111c <main+0xfd0>)
 800102a:	2208      	movs	r2, #8
 800102c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press e
 800102e:	2208      	movs	r2, #8
 8001030:	493a      	ldr	r1, [pc, #232]	; (800111c <main+0xfd0>)
 8001032:	483b      	ldr	r0, [pc, #236]	; (8001120 <main+0xfd4>)
 8001034:	f005 fe06 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001038:	2032      	movs	r0, #50	; 0x32
 800103a:	f000 fc67 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release e
 800103e:	4b37      	ldr	r3, [pc, #220]	; (800111c <main+0xfd0>)
 8001040:	2200      	movs	r2, #0
 8001042:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001044:	2208      	movs	r2, #8
 8001046:	4935      	ldr	r1, [pc, #212]	; (800111c <main+0xfd0>)
 8001048:	4835      	ldr	r0, [pc, #212]	; (8001120 <main+0xfd4>)
 800104a:	f005 fdfb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800104e:	2032      	movs	r0, #50	; 0x32
 8001050:	f000 fc5c 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <main+0xfd0>)
 8001056:	222c      	movs	r2, #44	; 0x2c
 8001058:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 800105a:	2208      	movs	r2, #8
 800105c:	492f      	ldr	r1, [pc, #188]	; (800111c <main+0xfd0>)
 800105e:	4830      	ldr	r0, [pc, #192]	; (8001120 <main+0xfd4>)
 8001060:	f005 fdf0 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001064:	2032      	movs	r0, #50	; 0x32
 8001066:	f000 fc51 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 800106a:	4b2c      	ldr	r3, [pc, #176]	; (800111c <main+0xfd0>)
 800106c:	2200      	movs	r2, #0
 800106e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001070:	2208      	movs	r2, #8
 8001072:	492a      	ldr	r1, [pc, #168]	; (800111c <main+0xfd0>)
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <main+0xfd4>)
 8001076:	f005 fde5 	bl	8006c44 <USBD_HID_SendReport>

              HAL_Delay(50);
 800107a:	2032      	movs	r0, #50	; 0x32
 800107c:	f000 fc46 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x34;
 8001080:	4b26      	ldr	r3, [pc, #152]	; (800111c <main+0xfd0>)
 8001082:	2234      	movs	r2, #52	; 0x34
 8001084:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press '
 8001086:	2208      	movs	r2, #8
 8001088:	4924      	ldr	r1, [pc, #144]	; (800111c <main+0xfd0>)
 800108a:	4825      	ldr	r0, [pc, #148]	; (8001120 <main+0xfd4>)
 800108c:	f005 fdda 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001090:	2032      	movs	r0, #50	; 0x32
 8001092:	f000 fc3b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release '
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <main+0xfd0>)
 8001098:	2200      	movs	r2, #0
 800109a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800109c:	2208      	movs	r2, #8
 800109e:	491f      	ldr	r1, [pc, #124]	; (800111c <main+0xfd0>)
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <main+0xfd4>)
 80010a2:	f005 fdcf 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80010a6:	2032      	movs	r0, #50	; 0x32
 80010a8:	f000 fc30 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;                            //release .
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <main+0xfd0>)
 80010ae:	2237      	movs	r2, #55	; 0x37
 80010b0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 80010b2:	2208      	movs	r2, #8
 80010b4:	4919      	ldr	r1, [pc, #100]	; (800111c <main+0xfd0>)
 80010b6:	481a      	ldr	r0, [pc, #104]	; (8001120 <main+0xfd4>)
 80010b8:	f005 fdc4 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80010bc:	2032      	movs	r0, #50	; 0x32
 80010be:	f000 fc25 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <main+0xfd0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80010c8:	2208      	movs	r2, #8
 80010ca:	4914      	ldr	r1, [pc, #80]	; (800111c <main+0xfd0>)
 80010cc:	4814      	ldr	r0, [pc, #80]	; (8001120 <main+0xfd4>)
 80010ce:	f005 fdb9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80010d2:	2032      	movs	r0, #50	; 0x32
 80010d4:	f000 fc1a 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x38;
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <main+0xfd0>)
 80010da:	2238      	movs	r2, #56	; 0x38
 80010dc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press /
 80010de:	2208      	movs	r2, #8
 80010e0:	490e      	ldr	r1, [pc, #56]	; (800111c <main+0xfd0>)
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <main+0xfd4>)
 80010e4:	f005 fdae 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80010e8:	2032      	movs	r0, #50	; 0x32
 80010ea:	f000 fc0f 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release /
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <main+0xfd0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80010f4:	2208      	movs	r2, #8
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <main+0xfd0>)
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <main+0xfd4>)
 80010fa:	f005 fda3 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80010fe:	2032      	movs	r0, #50	; 0x32
 8001100:	f000 fc04 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <main+0xfd0>)
 8001106:	2216      	movs	r2, #22
 8001108:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 800110a:	2208      	movs	r2, #8
 800110c:	4903      	ldr	r1, [pc, #12]	; (800111c <main+0xfd0>)
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <main+0xfd4>)
 8001110:	f005 fd98 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001114:	2032      	movs	r0, #50	; 0x32
 8001116:	f000 fbf9 	bl	800190c <HAL_Delay>
 800111a:	e003      	b.n	8001124 <main+0xfd8>
 800111c:	20000174 	.word	0x20000174
 8001120:	20000184 	.word	0x20000184
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8001124:	4bc7      	ldr	r3, [pc, #796]	; (8001444 <main+0x12f8>)
 8001126:	2200      	movs	r2, #0
 8001128:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800112a:	2208      	movs	r2, #8
 800112c:	49c5      	ldr	r1, [pc, #788]	; (8001444 <main+0x12f8>)
 800112e:	48c6      	ldr	r0, [pc, #792]	; (8001448 <main+0x12fc>)
 8001130:	f005 fd88 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001134:	2032      	movs	r0, #50	; 0x32
 8001136:	f000 fbe9 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x06;
 800113a:	4bc2      	ldr	r3, [pc, #776]	; (8001444 <main+0x12f8>)
 800113c:	2206      	movs	r2, #6
 800113e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press c
 8001140:	2208      	movs	r2, #8
 8001142:	49c0      	ldr	r1, [pc, #768]	; (8001444 <main+0x12f8>)
 8001144:	48c0      	ldr	r0, [pc, #768]	; (8001448 <main+0x12fc>)
 8001146:	f005 fd7d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800114a:	2032      	movs	r0, #50	; 0x32
 800114c:	f000 fbde 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release c
 8001150:	4bbc      	ldr	r3, [pc, #752]	; (8001444 <main+0x12f8>)
 8001152:	2200      	movs	r2, #0
 8001154:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001156:	2208      	movs	r2, #8
 8001158:	49ba      	ldr	r1, [pc, #744]	; (8001444 <main+0x12f8>)
 800115a:	48bb      	ldr	r0, [pc, #748]	; (8001448 <main+0x12fc>)
 800115c:	f005 fd72 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001160:	2032      	movs	r0, #50	; 0x32
 8001162:	f000 fbd3 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x15;
 8001166:	4bb7      	ldr	r3, [pc, #732]	; (8001444 <main+0x12f8>)
 8001168:	2215      	movs	r2, #21
 800116a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press r
 800116c:	2208      	movs	r2, #8
 800116e:	49b5      	ldr	r1, [pc, #724]	; (8001444 <main+0x12f8>)
 8001170:	48b5      	ldr	r0, [pc, #724]	; (8001448 <main+0x12fc>)
 8001172:	f005 fd67 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001176:	2032      	movs	r0, #50	; 0x32
 8001178:	f000 fbc8 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release r
 800117c:	4bb1      	ldr	r3, [pc, #708]	; (8001444 <main+0x12f8>)
 800117e:	2200      	movs	r2, #0
 8001180:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001182:	2208      	movs	r2, #8
 8001184:	49af      	ldr	r1, [pc, #700]	; (8001444 <main+0x12f8>)
 8001186:	48b0      	ldr	r0, [pc, #704]	; (8001448 <main+0x12fc>)
 8001188:	f005 fd5c 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800118c:	2032      	movs	r0, #50	; 0x32
 800118e:	f000 fbbd 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 8001192:	4bac      	ldr	r3, [pc, #688]	; (8001444 <main+0x12f8>)
 8001194:	220c      	movs	r2, #12
 8001196:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press i
 8001198:	2208      	movs	r2, #8
 800119a:	49aa      	ldr	r1, [pc, #680]	; (8001444 <main+0x12f8>)
 800119c:	48aa      	ldr	r0, [pc, #680]	; (8001448 <main+0x12fc>)
 800119e:	f005 fd51 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f000 fbb2 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release i
 80011a8:	4ba6      	ldr	r3, [pc, #664]	; (8001444 <main+0x12f8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80011ae:	2208      	movs	r2, #8
 80011b0:	49a4      	ldr	r1, [pc, #656]	; (8001444 <main+0x12f8>)
 80011b2:	48a5      	ldr	r0, [pc, #660]	; (8001448 <main+0x12fc>)
 80011b4:	f005 fd46 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80011b8:	2032      	movs	r0, #50	; 0x32
 80011ba:	f000 fba7 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 80011be:	4ba1      	ldr	r3, [pc, #644]	; (8001444 <main+0x12f8>)
 80011c0:	2213      	movs	r2, #19
 80011c2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 80011c4:	2208      	movs	r2, #8
 80011c6:	499f      	ldr	r1, [pc, #636]	; (8001444 <main+0x12f8>)
 80011c8:	489f      	ldr	r0, [pc, #636]	; (8001448 <main+0x12fc>)
 80011ca:	f005 fd3b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80011ce:	2032      	movs	r0, #50	; 0x32
 80011d0:	f000 fb9c 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 80011d4:	4b9b      	ldr	r3, [pc, #620]	; (8001444 <main+0x12f8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80011da:	2208      	movs	r2, #8
 80011dc:	4999      	ldr	r1, [pc, #612]	; (8001444 <main+0x12f8>)
 80011de:	489a      	ldr	r0, [pc, #616]	; (8001448 <main+0x12fc>)
 80011e0:	f005 fd30 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80011e4:	2032      	movs	r0, #50	; 0x32
 80011e6:	f000 fb91 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 80011ea:	4b96      	ldr	r3, [pc, #600]	; (8001444 <main+0x12f8>)
 80011ec:	2217      	movs	r2, #23
 80011ee:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 80011f0:	2208      	movs	r2, #8
 80011f2:	4994      	ldr	r1, [pc, #592]	; (8001444 <main+0x12f8>)
 80011f4:	4894      	ldr	r0, [pc, #592]	; (8001448 <main+0x12fc>)
 80011f6:	f005 fd25 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80011fa:	2032      	movs	r0, #50	; 0x32
 80011fc:	f000 fb86 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 8001200:	4b90      	ldr	r3, [pc, #576]	; (8001444 <main+0x12f8>)
 8001202:	2200      	movs	r2, #0
 8001204:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001206:	2208      	movs	r2, #8
 8001208:	498e      	ldr	r1, [pc, #568]	; (8001444 <main+0x12f8>)
 800120a:	488f      	ldr	r0, [pc, #572]	; (8001448 <main+0x12fc>)
 800120c:	f005 fd1a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f000 fb7b 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 8001216:	4b8b      	ldr	r3, [pc, #556]	; (8001444 <main+0x12f8>)
 8001218:	2237      	movs	r2, #55	; 0x37
 800121a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 800121c:	2208      	movs	r2, #8
 800121e:	4989      	ldr	r1, [pc, #548]	; (8001444 <main+0x12f8>)
 8001220:	4889      	ldr	r0, [pc, #548]	; (8001448 <main+0x12fc>)
 8001222:	f005 fd0f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001226:	2032      	movs	r0, #50	; 0x32
 8001228:	f000 fb70 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 800122c:	4b85      	ldr	r3, [pc, #532]	; (8001444 <main+0x12f8>)
 800122e:	2200      	movs	r2, #0
 8001230:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001232:	2208      	movs	r2, #8
 8001234:	4983      	ldr	r1, [pc, #524]	; (8001444 <main+0x12f8>)
 8001236:	4884      	ldr	r0, [pc, #528]	; (8001448 <main+0x12fc>)
 8001238:	f005 fd04 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800123c:	2032      	movs	r0, #50	; 0x32
 800123e:	f000 fb65 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 8001242:	4b80      	ldr	r3, [pc, #512]	; (8001444 <main+0x12f8>)
 8001244:	2213      	movs	r2, #19
 8001246:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 8001248:	2208      	movs	r2, #8
 800124a:	497e      	ldr	r1, [pc, #504]	; (8001444 <main+0x12f8>)
 800124c:	487e      	ldr	r0, [pc, #504]	; (8001448 <main+0x12fc>)
 800124e:	f005 fcf9 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001252:	2032      	movs	r0, #50	; 0x32
 8001254:	f000 fb5a 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <main+0x12f8>)
 800125a:	2200      	movs	r2, #0
 800125c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800125e:	2208      	movs	r2, #8
 8001260:	4978      	ldr	r1, [pc, #480]	; (8001444 <main+0x12f8>)
 8001262:	4879      	ldr	r0, [pc, #484]	; (8001448 <main+0x12fc>)
 8001264:	f005 fcee 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001268:	2032      	movs	r0, #50	; 0x32
 800126a:	f000 fb4f 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 800126e:	4b75      	ldr	r3, [pc, #468]	; (8001444 <main+0x12f8>)
 8001270:	2216      	movs	r2, #22
 8001272:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 8001274:	2208      	movs	r2, #8
 8001276:	4973      	ldr	r1, [pc, #460]	; (8001444 <main+0x12f8>)
 8001278:	4873      	ldr	r0, [pc, #460]	; (8001448 <main+0x12fc>)
 800127a:	f005 fce3 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800127e:	2032      	movs	r0, #50	; 0x32
 8001280:	f000 fb44 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8001284:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <main+0x12f8>)
 8001286:	2200      	movs	r2, #0
 8001288:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800128a:	2208      	movs	r2, #8
 800128c:	496d      	ldr	r1, [pc, #436]	; (8001444 <main+0x12f8>)
 800128e:	486e      	ldr	r0, [pc, #440]	; (8001448 <main+0x12fc>)
 8001290:	f005 fcd8 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001294:	2032      	movs	r0, #50	; 0x32
 8001296:	f000 fb39 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <main+0x12f8>)
 800129c:	221e      	movs	r2, #30
 800129e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 80012a0:	2208      	movs	r2, #8
 80012a2:	4968      	ldr	r1, [pc, #416]	; (8001444 <main+0x12f8>)
 80012a4:	4868      	ldr	r0, [pc, #416]	; (8001448 <main+0x12fc>)
 80012a6:	f005 fccd 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80012aa:	2032      	movs	r0, #50	; 0x32
 80012ac:	f000 fb2e 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <main+0x12f8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80012b6:	2208      	movs	r2, #8
 80012b8:	4962      	ldr	r1, [pc, #392]	; (8001444 <main+0x12f8>)
 80012ba:	4863      	ldr	r0, [pc, #396]	; (8001448 <main+0x12fc>)
 80012bc:	f005 fcc2 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80012c0:	2032      	movs	r0, #50	; 0x32
 80012c2:	f000 fb23 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x34;
 80012c6:	4b5f      	ldr	r3, [pc, #380]	; (8001444 <main+0x12f8>)
 80012c8:	2234      	movs	r2, #52	; 0x34
 80012ca:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press '
 80012cc:	2208      	movs	r2, #8
 80012ce:	495d      	ldr	r1, [pc, #372]	; (8001444 <main+0x12f8>)
 80012d0:	485d      	ldr	r0, [pc, #372]	; (8001448 <main+0x12fc>)
 80012d2:	f005 fcb7 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80012d6:	2032      	movs	r0, #50	; 0x32
 80012d8:	f000 fb18 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release '
 80012dc:	4b59      	ldr	r3, [pc, #356]	; (8001444 <main+0x12f8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80012e2:	2208      	movs	r2, #8
 80012e4:	4957      	ldr	r1, [pc, #348]	; (8001444 <main+0x12f8>)
 80012e6:	4858      	ldr	r0, [pc, #352]	; (8001448 <main+0x12fc>)
 80012e8:	f005 fcac 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80012ec:	2032      	movs	r0, #50	; 0x32
 80012ee:	f000 fb0d 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x33;
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <main+0x12f8>)
 80012f4:	2233      	movs	r2, #51	; 0x33
 80012f6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press ;
 80012f8:	2208      	movs	r2, #8
 80012fa:	4952      	ldr	r1, [pc, #328]	; (8001444 <main+0x12f8>)
 80012fc:	4852      	ldr	r0, [pc, #328]	; (8001448 <main+0x12fc>)
 80012fe:	f005 fca1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001302:	2032      	movs	r0, #50	; 0x32
 8001304:	f000 fb02 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release ;
 8001308:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <main+0x12f8>)
 800130a:	2200      	movs	r2, #0
 800130c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800130e:	2208      	movs	r2, #8
 8001310:	494c      	ldr	r1, [pc, #304]	; (8001444 <main+0x12f8>)
 8001312:	484d      	ldr	r0, [pc, #308]	; (8001448 <main+0x12fc>)
 8001314:	f005 fc96 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f000 faf7 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <main+0x12f8>)
 8001320:	222c      	movs	r2, #44	; 0x2c
 8001322:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 8001324:	2208      	movs	r2, #8
 8001326:	4947      	ldr	r1, [pc, #284]	; (8001444 <main+0x12f8>)
 8001328:	4847      	ldr	r0, [pc, #284]	; (8001448 <main+0x12fc>)
 800132a:	f005 fc8b 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800132e:	2032      	movs	r0, #50	; 0x32
 8001330:	f000 faec 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 8001334:	4b43      	ldr	r3, [pc, #268]	; (8001444 <main+0x12f8>)
 8001336:	2200      	movs	r2, #0
 8001338:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800133a:	2208      	movs	r2, #8
 800133c:	4941      	ldr	r1, [pc, #260]	; (8001444 <main+0x12f8>)
 800133e:	4842      	ldr	r0, [pc, #264]	; (8001448 <main+0x12fc>)
 8001340:	f005 fc80 	bl	8006c44 <USBD_HID_SendReport>

              HAL_Delay(50);
 8001344:	2032      	movs	r0, #50	; 0x32
 8001346:	f000 fae1 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x37;
 800134a:	4b3e      	ldr	r3, [pc, #248]	; (8001444 <main+0x12f8>)
 800134c:	2237      	movs	r2, #55	; 0x37
 800134e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 8001350:	2208      	movs	r2, #8
 8001352:	493c      	ldr	r1, [pc, #240]	; (8001444 <main+0x12f8>)
 8001354:	483c      	ldr	r0, [pc, #240]	; (8001448 <main+0x12fc>)
 8001356:	f005 fc75 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800135a:	2032      	movs	r0, #50	; 0x32
 800135c:	f000 fad6 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 8001360:	4b38      	ldr	r3, [pc, #224]	; (8001444 <main+0x12f8>)
 8001362:	2200      	movs	r2, #0
 8001364:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001366:	2208      	movs	r2, #8
 8001368:	4936      	ldr	r1, [pc, #216]	; (8001444 <main+0x12f8>)
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <main+0x12fc>)
 800136c:	f005 fc6a 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001370:	2032      	movs	r0, #50	; 0x32
 8001372:	f000 facb 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x31;
 8001376:	4b33      	ldr	r3, [pc, #204]	; (8001444 <main+0x12f8>)
 8001378:	2231      	movs	r2, #49	; 0x31
 800137a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press
 800137c:	2208      	movs	r2, #8
 800137e:	4931      	ldr	r1, [pc, #196]	; (8001444 <main+0x12f8>)
 8001380:	4831      	ldr	r0, [pc, #196]	; (8001448 <main+0x12fc>)
 8001382:	f005 fc5f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001386:	2032      	movs	r0, #50	; 0x32
 8001388:	f000 fac0 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release
 800138c:	4b2d      	ldr	r3, [pc, #180]	; (8001444 <main+0x12f8>)
 800138e:	2200      	movs	r2, #0
 8001390:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001392:	2208      	movs	r2, #8
 8001394:	492b      	ldr	r1, [pc, #172]	; (8001444 <main+0x12f8>)
 8001396:	482c      	ldr	r0, [pc, #176]	; (8001448 <main+0x12fc>)
 8001398:	f005 fc54 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800139c:	2032      	movs	r0, #50	; 0x32
 800139e:	f000 fab5 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <main+0x12f8>)
 80013a4:	2216      	movs	r2, #22
 80013a6:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 80013a8:	2208      	movs	r2, #8
 80013aa:	4926      	ldr	r1, [pc, #152]	; (8001444 <main+0x12f8>)
 80013ac:	4826      	ldr	r0, [pc, #152]	; (8001448 <main+0x12fc>)
 80013ae:	f005 fc49 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80013b2:	2032      	movs	r0, #50	; 0x32
 80013b4:	f000 faaa 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 80013b8:	4b22      	ldr	r3, [pc, #136]	; (8001444 <main+0x12f8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80013be:	2208      	movs	r2, #8
 80013c0:	4920      	ldr	r1, [pc, #128]	; (8001444 <main+0x12f8>)
 80013c2:	4821      	ldr	r0, [pc, #132]	; (8001448 <main+0x12fc>)
 80013c4:	f005 fc3e 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	; 0x32
 80013ca:	f000 fa9f 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x06;
 80013ce:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <main+0x12f8>)
 80013d0:	2206      	movs	r2, #6
 80013d2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press c
 80013d4:	2208      	movs	r2, #8
 80013d6:	491b      	ldr	r1, [pc, #108]	; (8001444 <main+0x12f8>)
 80013d8:	481b      	ldr	r0, [pc, #108]	; (8001448 <main+0x12fc>)
 80013da:	f005 fc33 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80013de:	2032      	movs	r0, #50	; 0x32
 80013e0:	f000 fa94 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release c
 80013e4:	4b17      	ldr	r3, [pc, #92]	; (8001444 <main+0x12f8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80013ea:	2208      	movs	r2, #8
 80013ec:	4915      	ldr	r1, [pc, #84]	; (8001444 <main+0x12f8>)
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <main+0x12fc>)
 80013f0:	f005 fc28 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80013f4:	2032      	movs	r0, #50	; 0x32
 80013f6:	f000 fa89 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x15;
 80013fa:	4b12      	ldr	r3, [pc, #72]	; (8001444 <main+0x12f8>)
 80013fc:	2215      	movs	r2, #21
 80013fe:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press r
 8001400:	2208      	movs	r2, #8
 8001402:	4910      	ldr	r1, [pc, #64]	; (8001444 <main+0x12f8>)
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <main+0x12fc>)
 8001406:	f005 fc1d 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800140a:	2032      	movs	r0, #50	; 0x32
 800140c:	f000 fa7e 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release r
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <main+0x12f8>)
 8001412:	2200      	movs	r2, #0
 8001414:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001416:	2208      	movs	r2, #8
 8001418:	490a      	ldr	r1, [pc, #40]	; (8001444 <main+0x12f8>)
 800141a:	480b      	ldr	r0, [pc, #44]	; (8001448 <main+0x12fc>)
 800141c:	f005 fc12 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f000 fa73 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x0C;
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <main+0x12f8>)
 8001428:	220c      	movs	r2, #12
 800142a:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press i
 800142c:	2208      	movs	r2, #8
 800142e:	4905      	ldr	r1, [pc, #20]	; (8001444 <main+0x12f8>)
 8001430:	4805      	ldr	r0, [pc, #20]	; (8001448 <main+0x12fc>)
 8001432:	f005 fc07 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001436:	2032      	movs	r0, #50	; 0x32
 8001438:	f000 fa68 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release i
 800143c:	4b01      	ldr	r3, [pc, #4]	; (8001444 <main+0x12f8>)
 800143e:	2200      	movs	r2, #0
 8001440:	709a      	strb	r2, [r3, #2]
 8001442:	e003      	b.n	800144c <main+0x1300>
 8001444:	20000174 	.word	0x20000174
 8001448:	20000184 	.word	0x20000184
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 800144c:	2208      	movs	r2, #8
 800144e:	495d      	ldr	r1, [pc, #372]	; (80015c4 <main+0x1478>)
 8001450:	485d      	ldr	r0, [pc, #372]	; (80015c8 <main+0x147c>)
 8001452:	f005 fbf7 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001456:	2032      	movs	r0, #50	; 0x32
 8001458:	f000 fa58 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 800145c:	4b59      	ldr	r3, [pc, #356]	; (80015c4 <main+0x1478>)
 800145e:	2213      	movs	r2, #19
 8001460:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 8001462:	2208      	movs	r2, #8
 8001464:	4957      	ldr	r1, [pc, #348]	; (80015c4 <main+0x1478>)
 8001466:	4858      	ldr	r0, [pc, #352]	; (80015c8 <main+0x147c>)
 8001468:	f005 fbec 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800146c:	2032      	movs	r0, #50	; 0x32
 800146e:	f000 fa4d 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 8001472:	4b54      	ldr	r3, [pc, #336]	; (80015c4 <main+0x1478>)
 8001474:	2200      	movs	r2, #0
 8001476:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001478:	2208      	movs	r2, #8
 800147a:	4952      	ldr	r1, [pc, #328]	; (80015c4 <main+0x1478>)
 800147c:	4852      	ldr	r0, [pc, #328]	; (80015c8 <main+0x147c>)
 800147e:	f005 fbe1 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001482:	2032      	movs	r0, #50	; 0x32
 8001484:	f000 fa42 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x17;
 8001488:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <main+0x1478>)
 800148a:	2217      	movs	r2, #23
 800148c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press t
 800148e:	2208      	movs	r2, #8
 8001490:	494c      	ldr	r1, [pc, #304]	; (80015c4 <main+0x1478>)
 8001492:	484d      	ldr	r0, [pc, #308]	; (80015c8 <main+0x147c>)
 8001494:	f005 fbd6 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001498:	2032      	movs	r0, #50	; 0x32
 800149a:	f000 fa37 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release t
 800149e:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <main+0x1478>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80014a4:	2208      	movs	r2, #8
 80014a6:	4947      	ldr	r1, [pc, #284]	; (80015c4 <main+0x1478>)
 80014a8:	4847      	ldr	r0, [pc, #284]	; (80015c8 <main+0x147c>)
 80014aa:	f005 fbcb 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80014ae:	2032      	movs	r0, #50	; 0x32
 80014b0:	f000 fa2c 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x37;
 80014b4:	4b43      	ldr	r3, [pc, #268]	; (80015c4 <main+0x1478>)
 80014b6:	2237      	movs	r2, #55	; 0x37
 80014b8:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press .
 80014ba:	2208      	movs	r2, #8
 80014bc:	4941      	ldr	r1, [pc, #260]	; (80015c4 <main+0x1478>)
 80014be:	4842      	ldr	r0, [pc, #264]	; (80015c8 <main+0x147c>)
 80014c0:	f005 fbc0 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80014c4:	2032      	movs	r0, #50	; 0x32
 80014c6:	f000 fa21 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release .
 80014ca:	4b3e      	ldr	r3, [pc, #248]	; (80015c4 <main+0x1478>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80014d0:	2208      	movs	r2, #8
 80014d2:	493c      	ldr	r1, [pc, #240]	; (80015c4 <main+0x1478>)
 80014d4:	483c      	ldr	r0, [pc, #240]	; (80015c8 <main+0x147c>)
 80014d6:	f005 fbb5 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80014da:	2032      	movs	r0, #50	; 0x32
 80014dc:	f000 fa16 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x13;
 80014e0:	4b38      	ldr	r3, [pc, #224]	; (80015c4 <main+0x1478>)
 80014e2:	2213      	movs	r2, #19
 80014e4:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press p
 80014e6:	2208      	movs	r2, #8
 80014e8:	4936      	ldr	r1, [pc, #216]	; (80015c4 <main+0x1478>)
 80014ea:	4837      	ldr	r0, [pc, #220]	; (80015c8 <main+0x147c>)
 80014ec:	f005 fbaa 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 80014f0:	2032      	movs	r0, #50	; 0x32
 80014f2:	f000 fa0b 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release p
 80014f6:	4b33      	ldr	r3, [pc, #204]	; (80015c4 <main+0x1478>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80014fc:	2208      	movs	r2, #8
 80014fe:	4931      	ldr	r1, [pc, #196]	; (80015c4 <main+0x1478>)
 8001500:	4831      	ldr	r0, [pc, #196]	; (80015c8 <main+0x147c>)
 8001502:	f005 fb9f 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001506:	2032      	movs	r0, #50	; 0x32
 8001508:	f000 fa00 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x16;
 800150c:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <main+0x1478>)
 800150e:	2216      	movs	r2, #22
 8001510:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press s
 8001512:	2208      	movs	r2, #8
 8001514:	492b      	ldr	r1, [pc, #172]	; (80015c4 <main+0x1478>)
 8001516:	482c      	ldr	r0, [pc, #176]	; (80015c8 <main+0x147c>)
 8001518:	f005 fb94 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800151c:	2032      	movs	r0, #50	; 0x32
 800151e:	f000 f9f5 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release s
 8001522:	4b28      	ldr	r3, [pc, #160]	; (80015c4 <main+0x1478>)
 8001524:	2200      	movs	r2, #0
 8001526:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001528:	2208      	movs	r2, #8
 800152a:	4926      	ldr	r1, [pc, #152]	; (80015c4 <main+0x1478>)
 800152c:	4826      	ldr	r0, [pc, #152]	; (80015c8 <main+0x147c>)
 800152e:	f005 fb89 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001532:	2032      	movs	r0, #50	; 0x32
 8001534:	f000 f9ea 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x1E;
 8001538:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <main+0x1478>)
 800153a:	221e      	movs	r2, #30
 800153c:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press 1
 800153e:	2208      	movs	r2, #8
 8001540:	4920      	ldr	r1, [pc, #128]	; (80015c4 <main+0x1478>)
 8001542:	4821      	ldr	r0, [pc, #132]	; (80015c8 <main+0x147c>)
 8001544:	f005 fb7e 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001548:	2032      	movs	r0, #50	; 0x32
 800154a:	f000 f9df 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release 1
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <main+0x1478>)
 8001550:	2200      	movs	r2, #0
 8001552:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001554:	2208      	movs	r2, #8
 8001556:	491b      	ldr	r1, [pc, #108]	; (80015c4 <main+0x1478>)
 8001558:	481b      	ldr	r0, [pc, #108]	; (80015c8 <main+0x147c>)
 800155a:	f005 fb73 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 800155e:	2032      	movs	r0, #50	; 0x32
 8001560:	f000 f9d4 	bl	800190c <HAL_Delay>

              keyboardhid.KEYCODE1 = 0x2C;
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <main+0x1478>)
 8001566:	222c      	movs	r2, #44	; 0x2c
 8001568:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <SPACE>
 800156a:	2208      	movs	r2, #8
 800156c:	4915      	ldr	r1, [pc, #84]	; (80015c4 <main+0x1478>)
 800156e:	4816      	ldr	r0, [pc, #88]	; (80015c8 <main+0x147c>)
 8001570:	f005 fb68 	bl	8006c44 <USBD_HID_SendReport>
              HAL_Delay(50);
 8001574:	2032      	movs	r0, #50	; 0x32
 8001576:	f000 f9c9 	bl	800190c <HAL_Delay>
              keyboardhid.KEYCODE1 = 0x00;                            //release <SPACE>
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <main+0x1478>)
 800157c:	2200      	movs	r2, #0
 800157e:	709a      	strb	r2, [r3, #2]
              USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 8001580:	2208      	movs	r2, #8
 8001582:	4910      	ldr	r1, [pc, #64]	; (80015c4 <main+0x1478>)
 8001584:	4810      	ldr	r0, [pc, #64]	; (80015c8 <main+0x147c>)
 8001586:	f005 fb5d 	bl	8006c44 <USBD_HID_SendReport>

              HAL_Delay(50);
 800158a:	2032      	movs	r0, #50	; 0x32
 800158c:	f000 f9be 	bl	800190c <HAL_Delay>


			keyboardhid.KEYCODE1 = 0x28;
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <main+0x1478>)
 8001592:	2228      	movs	r2, #40	; 0x28
 8001594:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));    //press <Enter>
 8001596:	2208      	movs	r2, #8
 8001598:	490a      	ldr	r1, [pc, #40]	; (80015c4 <main+0x1478>)
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <main+0x147c>)
 800159c:	f005 fb52 	bl	8006c44 <USBD_HID_SendReport>
			HAL_Delay(50);
 80015a0:	2032      	movs	r0, #50	; 0x32
 80015a2:	f000 f9b3 	bl	800190c <HAL_Delay>
			keyboardhid.KEYCODE1 = 0x00;    //release <Enter>
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <main+0x1478>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	709a      	strb	r2, [r3, #2]
			USBD_HID_SendReport(&hUsbDeviceFS,&keyboardhid,sizeof(keyboardhid));
 80015ac:	2208      	movs	r2, #8
 80015ae:	4905      	ldr	r1, [pc, #20]	; (80015c4 <main+0x1478>)
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <main+0x147c>)
 80015b2:	f005 fb47 	bl	8006c44 <USBD_HID_SendReport>




      //HACKED!!!
      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015bc:	4803      	ldr	r0, [pc, #12]	; (80015cc <main+0x1480>)
 80015be:	f000 fc5b 	bl	8001e78 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <main+0x1476>
 80015c4:	20000174 	.word	0x20000174
 80015c8:	20000184 	.word	0x20000184
 80015cc:	40011000 	.word	0x40011000

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015da:	2228      	movs	r2, #40	; 0x28
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f006 fffe 	bl	80085e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001600:	2301      	movs	r3, #1
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001604:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160e:	2301      	movs	r3, #1
 8001610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800161a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800161c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001626:	4618      	mov	r0, r3
 8001628:	f002 f996 	bl	8003958 <HAL_RCC_OscConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001632:	f000 f873 	bl	800171c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001636:	230f      	movs	r3, #15
 8001638:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001646:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	2102      	movs	r1, #2
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc02 	bl	8003e5c <HAL_RCC_ClockConfig>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800165e:	f000 f85d 	bl	800171c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001662:	2310      	movs	r3, #16
 8001664:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	4618      	mov	r0, r3
 800166e:	f002 fd51 	bl	8004114 <HAL_RCCEx_PeriphCLKConfig>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001678:	f000 f850 	bl	800171c <Error_Handler>
  }
}
 800167c:	bf00      	nop
 800167e:	3750      	adds	r7, #80	; 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <MX_GPIO_Init+0x90>)
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	4a1d      	ldr	r2, [pc, #116]	; (8001714 <MX_GPIO_Init+0x90>)
 800169e:	f043 0310 	orr.w	r3, r3, #16
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <MX_GPIO_Init+0x90>)
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b18      	ldr	r3, [pc, #96]	; (8001714 <MX_GPIO_Init+0x90>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <MX_GPIO_Init+0x90>)
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <MX_GPIO_Init+0x90>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0320 	and.w	r3, r3, #32
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <MX_GPIO_Init+0x90>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	4a11      	ldr	r2, [pc, #68]	; (8001714 <MX_GPIO_Init+0x90>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6193      	str	r3, [r2, #24]
 80016d4:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_GPIO_Init+0x90>)
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0304 	and.w	r3, r3, #4
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016e0:	2200      	movs	r2, #0
 80016e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_GPIO_Init+0x94>)
 80016e8:	f000 fbc6 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f2:	2301      	movs	r3, #1
 80016f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	4804      	ldr	r0, [pc, #16]	; (8001718 <MX_GPIO_Init+0x94>)
 8001706:	f000 fa33 	bl	8001b70 <HAL_GPIO_Init>

}
 800170a:	bf00      	nop
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40021000 	.word	0x40021000
 8001718:	40011000 	.word	0x40011000

0800171c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001720:	b672      	cpsid	i
}
 8001722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001724:	e7fe      	b.n	8001724 <Error_Handler+0x8>
	...

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <HAL_MspInit+0x5c>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	4a14      	ldr	r2, [pc, #80]	; (8001784 <HAL_MspInit+0x5c>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6193      	str	r3, [r2, #24]
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_MspInit+0x5c>)
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_MspInit+0x5c>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <HAL_MspInit+0x5c>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001750:	61d3      	str	r3, [r2, #28]
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <HAL_MspInit+0x5c>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_MspInit+0x60>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_MspInit+0x60>)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177a:	bf00      	nop
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <NMI_Handler+0x4>

08001792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <HardFault_Handler+0x4>

08001798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <MemManage_Handler+0x4>

0800179e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <BusFault_Handler+0x4>

080017a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <UsageFault_Handler+0x4>

080017aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d2:	f000 f87f 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80017e2:	f000 fc86 	bl	80020f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000648 	.word	0x20000648

080017f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017fc:	f7ff fff8 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480b      	ldr	r0, [pc, #44]	; (8001830 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001802:	490c      	ldr	r1, [pc, #48]	; (8001834 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001804:	4a0c      	ldr	r2, [pc, #48]	; (8001838 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a09      	ldr	r2, [pc, #36]	; (800183c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001818:	4c09      	ldr	r4, [pc, #36]	; (8001840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f006 feb7 	bl	8008598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800182a:	f7fe fc8f 	bl	800014c <main>
  bx lr
 800182e:	4770      	bx	lr
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001838:	08008674 	.word	0x08008674
  ldr r2, =_sbss
 800183c:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001840:	2000094c 	.word	0x2000094c

08001844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC1_2_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_Init+0x28>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_Init+0x28>)
 8001852:	f043 0310 	orr.w	r3, r3, #16
 8001856:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001858:	2003      	movs	r0, #3
 800185a:	f000 f947 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185e:	200f      	movs	r0, #15
 8001860:	f000 f808 	bl	8001874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001864:	f7ff ff60 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40022000 	.word	0x40022000

08001874 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x54>)
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <HAL_InitTick+0x58>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800188a:	fbb3 f3f1 	udiv	r3, r3, r1
 800188e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f95f 	bl	8001b56 <HAL_SYSTICK_Config>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e00e      	b.n	80018c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b0f      	cmp	r3, #15
 80018a6:	d80a      	bhi.n	80018be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f000 f927 	bl	8001b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b4:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_InitTick+0x5c>)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e000      	b.n	80018c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000004 	.word	0x20000004

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <HAL_IncTick+0x1c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_IncTick+0x20>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <HAL_IncTick+0x20>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	20000008 	.word	0x20000008
 80018f4:	2000017c 	.word	0x2000017c

080018f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b02      	ldr	r3, [pc, #8]	; (8001908 <HAL_GetTick+0x10>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr
 8001908:	2000017c 	.word	0x2000017c

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff fff0 	bl	80018f8 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffe0 	bl	80018f8 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4906      	ldr	r1, [pc, #24]	; (80019ec <__NVIC_EnableIRQ+0x34>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100

080019f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	6039      	str	r1, [r7, #0]
 80019fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	db0a      	blt.n	8001a1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	490c      	ldr	r1, [pc, #48]	; (8001a3c <__NVIC_SetPriority+0x4c>)
 8001a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0e:	0112      	lsls	r2, r2, #4
 8001a10:	b2d2      	uxtb	r2, r2
 8001a12:	440b      	add	r3, r1
 8001a14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a18:	e00a      	b.n	8001a30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4908      	ldr	r1, [pc, #32]	; (8001a40 <__NVIC_SetPriority+0x50>)
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	f003 030f 	and.w	r3, r3, #15
 8001a26:	3b04      	subs	r3, #4
 8001a28:	0112      	lsls	r2, r2, #4
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	761a      	strb	r2, [r3, #24]
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	60b9      	str	r1, [r7, #8]
 8001a4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	f1c3 0307 	rsb	r3, r3, #7
 8001a5e:	2b04      	cmp	r3, #4
 8001a60:	bf28      	it	cs
 8001a62:	2304      	movcs	r3, #4
 8001a64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2b06      	cmp	r3, #6
 8001a6c:	d902      	bls.n	8001a74 <NVIC_EncodePriority+0x30>
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3b03      	subs	r3, #3
 8001a72:	e000      	b.n	8001a76 <NVIC_EncodePriority+0x32>
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	f04f 32ff 	mov.w	r2, #4294967295
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43da      	mvns	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	401a      	ands	r2, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43d9      	mvns	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	4313      	orrs	r3, r2
         );
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	3724      	adds	r7, #36	; 0x24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff90 	bl	80019f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff2d 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b14:	f7ff ff42 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	6978      	ldr	r0, [r7, #20]
 8001b20:	f7ff ff90 	bl	8001a44 <NVIC_EncodePriority>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff5f 	bl	80019f0 <__NVIC_SetPriority>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ff35 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff ffa2 	bl	8001aa8 <SysTick_Config>
 8001b64:	4603      	mov	r3, r0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e169      	b.n	8001e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8158 	bne.w	8001e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4a98      	ldr	r2, [pc, #608]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a96      	ldr	r2, [pc, #600]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a94      	ldr	r2, [pc, #592]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a92      	ldr	r2, [pc, #584]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a90      	ldr	r2, [pc, #576]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <HAL_GPIO_Init+0x2b4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80b1 	beq.w	8001e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_Init+0x1ec>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_Init+0x1e8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3d      	ldr	r2, [pc, #244]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e004      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	f002 0203 	and.w	r2, r2, #3
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	4093      	lsls	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d6e:	492f      	ldr	r1, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	492c      	ldr	r1, [pc, #176]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	608b      	str	r3, [r1, #8]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4928      	ldr	r1, [pc, #160]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60cb      	str	r3, [r1, #12]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4918      	ldr	r1, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001de8:	685a      	ldr	r2, [r3, #4]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4914      	ldr	r1, [pc, #80]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d021      	beq.n	8001e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e021      	b.n	8001e52 <HAL_GPIO_Init+0x2e2>
 8001e0e:	bf00      	nop
 8001e10:	10320000 	.word	0x10320000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10220000 	.word	0x10220000
 8001e1c:	10210000 	.word	0x10210000
 8001e20:	10120000 	.word	0x10120000
 8001e24:	10110000 	.word	0x10110000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40011400 	.word	0x40011400
 8001e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4909      	ldr	r1, [pc, #36]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f ae8e 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	372c      	adds	r7, #44	; 0x2c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e94:	e003      	b.n	8001e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	041a      	lsls	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eaa:	b08b      	sub	sp, #44	; 0x2c
 8001eac:	af06      	add	r7, sp, #24
 8001eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0f1      	b.n	800209e <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d106      	bne.n	8001ed4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f006 f8dc 	bl	800808c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 f9f3 	bl	80042cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	687e      	ldr	r6, [r7, #4]
 8001eee:	466d      	mov	r5, sp
 8001ef0:	f106 0410 	add.w	r4, r6, #16
 8001ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	602b      	str	r3, [r5, #0]
 8001efc:	1d33      	adds	r3, r6, #4
 8001efe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f00:	6838      	ldr	r0, [r7, #0]
 8001f02:	f002 f9bd 	bl	8004280 <USB_CoreInit>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0c2      	b.n	800209e <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 f9ee 	bl	8004300 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e040      	b.n	8001fac <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f2a:	7bfb      	ldrb	r3, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	4613      	mov	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	4413      	add	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	440b      	add	r3, r1
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4413      	add	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	440b      	add	r3, r1
 8001f64:	3303      	adds	r3, #3
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	6879      	ldr	r1, [r7, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	440b      	add	r3, r1
 8001f78:	3338      	adds	r3, #56	; 0x38
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4413      	add	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	440b      	add	r3, r1
 8001f8c:	333c      	adds	r3, #60	; 0x3c
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3340      	adds	r3, #64	; 0x40
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d3b9      	bcc.n	8001f2a <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e044      	b.n	8002046 <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	440b      	add	r3, r1
 8001fca:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	440b      	add	r3, r1
 8002038:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	3301      	adds	r3, #1
 8002044:	73fb      	strb	r3, [r7, #15]
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	d3b5      	bcc.n	8001fbc <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	603b      	str	r3, [r7, #0]
 8002056:	687e      	ldr	r6, [r7, #4]
 8002058:	466d      	mov	r5, sp
 800205a:	f106 0410 	add.w	r4, r6, #16
 800205e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	1d33      	adds	r3, r6, #4
 8002068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206a:	6838      	ldr	r0, [r7, #0]
 800206c:	f002 f954 	bl	8004318 <USB_DevInit>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2202      	movs	r2, #2
 800207a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e00d      	b.n	800209e <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fbd5 	bl	8006846 <USB_DevDisconnect>

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b082      	sub	sp, #8
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_PCD_Start+0x16>
 80020b8:	2302      	movs	r3, #2
 80020ba:	e016      	b.n	80020ea <HAL_PCD_Start+0x44>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 f8e9 	bl	80042a0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80020ce:	2101      	movs	r1, #1
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f006 fa2a 	bl	800852a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fba9 	bl	8006832 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b088      	sub	sp, #32
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f004 fbab 	bl	800685a <USB_ReadInterrupts>
 8002104:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d003      	beq.n	8002118 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fb04 	bl	800271e <PCD_EP_ISR_Handler>

    return;
 8002116:	e119      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800212a:	b29a      	uxth	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002134:	b292      	uxth	r2, r2
 8002136:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f006 f821 	bl	8008182 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002140:	2100      	movs	r1, #0
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f905 	bl	8002352 <HAL_PCD_SetAddress>

    return;
 8002148:	e100      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00c      	beq.n	800216e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800215c:	b29a      	uxth	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002166:	b292      	uxth	r2, r2
 8002168:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800216c:	e0ee      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00c      	beq.n	8002192 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002180:	b29a      	uxth	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800218a:	b292      	uxth	r2, r2
 800218c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002190:	e0dc      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d027      	beq.n	80021ec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0204 	bic.w	r2, r2, #4
 80021ae:	b292      	uxth	r2, r2
 80021b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80021bc:	b29a      	uxth	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0208 	bic.w	r2, r2, #8
 80021c6:	b292      	uxth	r2, r2
 80021c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f006 f811 	bl	80081f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021e4:	b292      	uxth	r2, r2
 80021e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80021ea:	e0af      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8083 	beq.w	80022fe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	77fb      	strb	r3, [r7, #31]
 80021fc:	e010      	b.n	8002220 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	7ffb      	ldrb	r3, [r7, #31]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	441a      	add	r2, r3
 800220a:	7ffb      	ldrb	r3, [r7, #31]
 800220c:	8812      	ldrh	r2, [r2, #0]
 800220e:	b292      	uxth	r2, r2
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	3320      	adds	r3, #32
 8002214:	443b      	add	r3, r7
 8002216:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	3301      	adds	r3, #1
 800221e:	77fb      	strb	r3, [r7, #31]
 8002220:	7ffb      	ldrb	r3, [r7, #31]
 8002222:	2b07      	cmp	r3, #7
 8002224:	d9eb      	bls.n	80021fe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	b292      	uxth	r2, r2
 800223a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002246:	b29a      	uxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f022 0201 	bic.w	r2, r2, #1
 8002250:	b292      	uxth	r2, r2
 8002252:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002256:	bf00      	nop
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002260:	b29b      	uxth	r3, r3
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f6      	beq.n	8002258 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002272:	b29a      	uxth	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227c:	b292      	uxth	r2, r2
 800227e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	77fb      	strb	r3, [r7, #31]
 8002286:	e00f      	b.n	80022a8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6812      	ldr	r2, [r2, #0]
 800228e:	4611      	mov	r1, r2
 8002290:	7ffa      	ldrb	r2, [r7, #31]
 8002292:	0092      	lsls	r2, r2, #2
 8002294:	440a      	add	r2, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	3320      	adds	r3, #32
 800229a:	443b      	add	r3, r7
 800229c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80022a0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80022a2:	7ffb      	ldrb	r3, [r7, #31]
 80022a4:	3301      	adds	r3, #1
 80022a6:	77fb      	strb	r3, [r7, #31]
 80022a8:	7ffb      	ldrb	r3, [r7, #31]
 80022aa:	2b07      	cmp	r3, #7
 80022ac:	d9ec      	bls.n	8002288 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f042 0208 	orr.w	r2, r2, #8
 80022c0:	b292      	uxth	r2, r2
 80022c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022d8:	b292      	uxth	r2, r2
 80022da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0204 	orr.w	r2, r2, #4
 80022f0:	b292      	uxth	r2, r2
 80022f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f005 ff62 	bl	80081c0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80022fc:	e026      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00f      	beq.n	8002328 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002310:	b29a      	uxth	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231a:	b292      	uxth	r2, r2
 800231c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f005 ff20 	bl	8008166 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002326:	e011      	b.n	800234c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00c      	beq.n	800234c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002344:	b292      	uxth	r2, r2
 8002346:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800234a:	bf00      	nop
  }
}
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	460b      	mov	r3, r1
 800235c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_PCD_SetAddress+0x1a>
 8002368:	2302      	movs	r3, #2
 800236a:	e013      	b.n	8002394 <HAL_PCD_SetAddress+0x42>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f004 fa41 	bl	800680c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002392:	2300      	movs	r3, #0
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	70fb      	strb	r3, [r7, #3]
 80023ae:	460b      	mov	r3, r1
 80023b0:	803b      	strh	r3, [r7, #0]
 80023b2:	4613      	mov	r3, r2
 80023b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80023ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	da0e      	bge.n	80023e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80023c2:	78fb      	ldrb	r3, [r7, #3]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2201      	movs	r2, #1
 80023dc:	705a      	strb	r2, [r3, #1]
 80023de:	e00e      	b.n	80023fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	f003 0207 	and.w	r2, r3, #7
 80023e6:	4613      	mov	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80023fe:	78fb      	ldrb	r3, [r7, #3]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800240a:	883a      	ldrh	r2, [r7, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	78ba      	ldrb	r2, [r7, #2]
 8002414:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002416:	78bb      	ldrb	r3, [r7, #2]
 8002418:	2b02      	cmp	r3, #2
 800241a:	d102      	bne.n	8002422 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_PCD_EP_Open+0x94>
 800242c:	2302      	movs	r3, #2
 800242e:	e00e      	b.n	800244e <HAL_PCD_EP_Open+0xb2>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68f9      	ldr	r1, [r7, #12]
 800243e:	4618      	mov	r0, r3
 8002440:	f001 ff8a 	bl	8004358 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800244c:	7afb      	ldrb	r3, [r7, #11]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b084      	sub	sp, #16
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002466:	2b00      	cmp	r3, #0
 8002468:	da0e      	bge.n	8002488 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	705a      	strb	r2, [r3, #1]
 8002486:	e00e      	b.n	80024a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002488:	78fb      	ldrb	r3, [r7, #3]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80024a6:	78fb      	ldrb	r3, [r7, #3]
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_PCD_EP_Close+0x6a>
 80024bc:	2302      	movs	r3, #2
 80024be:	e00e      	b.n	80024de <HAL_PCD_EP_Close+0x88>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f002 fb02 	bl	8004ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	460b      	mov	r3, r1
 80024f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024f6:	7afb      	ldrb	r3, [r7, #11]
 80024f8:	f003 0207 	and.w	r2, r3, #7
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4413      	add	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2200      	movs	r2, #0
 800251e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2200      	movs	r2, #0
 8002524:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002526:	7afb      	ldrb	r3, [r7, #11]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	b2da      	uxtb	r2, r3
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6979      	ldr	r1, [r7, #20]
 8002538:	4618      	mov	r0, r3
 800253a:	f002 fcb9 	bl	8004eb0 <USB_EPStartXfer>

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	460b      	mov	r3, r1
 8002556:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002558:	7afb      	ldrb	r3, [r7, #11]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2200      	movs	r2, #0
 800258c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2201      	movs	r2, #1
 8002592:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002594:	7afb      	ldrb	r3, [r7, #11]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	b2da      	uxtb	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6979      	ldr	r1, [r7, #20]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f002 fc82 	bl	8004eb0 <USB_EPStartXfer>

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b084      	sub	sp, #16
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	f003 0207 	and.w	r2, r3, #7
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d901      	bls.n	80025d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04c      	b.n	800266e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	da0e      	bge.n	80025fa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025dc:	78fb      	ldrb	r3, [r7, #3]
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	4613      	mov	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	705a      	strb	r2, [r3, #1]
 80025f8:	e00c      	b.n	8002614 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800261a:	78fb      	ldrb	r3, [r7, #3]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	b2da      	uxtb	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_PCD_EP_SetStall+0x7e>
 8002630:	2302      	movs	r3, #2
 8002632:	e01c      	b.n	800266e <HAL_PCD_EP_SetStall+0xb8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68f9      	ldr	r1, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f003 ffe5 	bl	8006612 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800265c:	4619      	mov	r1, r3
 800265e:	4610      	mov	r0, r2
 8002660:	f004 f90a 	bl	8006878 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	f003 020f 	and.w	r2, r3, #15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d901      	bls.n	8002694 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e040      	b.n	8002716 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002694:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002698:	2b00      	cmp	r3, #0
 800269a:	da0e      	bge.n	80026ba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	705a      	strb	r2, [r3, #1]
 80026b8:	e00e      	b.n	80026d8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	f003 0207 	and.w	r2, r3, #7
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	4413      	add	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_PCD_EP_ClrStall+0x82>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e00e      	b.n	8002716 <HAL_PCD_EP_ClrStall+0xa0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68f9      	ldr	r1, [r7, #12]
 8002706:	4618      	mov	r0, r3
 8002708:	f003 ffd3 	bl	80066b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b096      	sub	sp, #88	; 0x58
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002726:	e3bf      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
  {
    wIstr = hpcd->Instance->ISTR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002734:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8002742:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002746:	2b00      	cmp	r3, #0
 8002748:	f040 8179 	bne.w	8002a3e <PCD_EP_ISR_Handler+0x320>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800274c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	2b00      	cmp	r3, #0
 8002756:	d152      	bne.n	80027fe <PCD_EP_ISR_Handler+0xe0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002768:	81fb      	strh	r3, [r7, #14]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	89fb      	ldrh	r3, [r7, #14]
 8002770:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002774:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002778:	b29b      	uxth	r3, r3
 800277a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3328      	adds	r3, #40	; 0x28
 8002780:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	3302      	adds	r3, #2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6812      	ldr	r2, [r2, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80027aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80027ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b0:	695a      	ldr	r2, [r3, #20]
 80027b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	441a      	add	r2, r3
 80027b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027ba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80027bc:	2100      	movs	r1, #0
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f005 fcb7 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 836b 	beq.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
 80027d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 8366 	bne.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b292      	uxth	r2, r2
 80027f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027fc:	e354      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002804:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002810:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002814:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002818:	2b00      	cmp	r3, #0
 800281a:	d034      	beq.n	8002886 <PCD_EP_ISR_Handler+0x168>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002824:	b29b      	uxth	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	3306      	adds	r3, #6
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	4413      	add	r3, r2
 800283a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002846:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002854:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002858:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800285a:	b29b      	uxth	r3, r3
 800285c:	f004 f85c 	bl	8006918 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29a      	uxth	r2, r3
 8002868:	f640 738f 	movw	r3, #3983	; 0xf8f
 800286c:	4013      	ands	r3, r2
 800286e:	823b      	strh	r3, [r7, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	8a3a      	ldrh	r2, [r7, #16]
 8002876:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800287a:	b292      	uxth	r2, r2
 800287c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f005 fc2a 	bl	80080d8 <HAL_PCD_SetupStageCallback>
 8002884:	e310      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002886:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800288a:	2b00      	cmp	r3, #0
 800288c:	f280 830c 	bge.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	881b      	ldrh	r3, [r3, #0]
 8002896:	b29a      	uxth	r2, r3
 8002898:	f640 738f 	movw	r3, #3983	; 0xf8f
 800289c:	4013      	ands	r3, r2
 800289e:	83fb      	strh	r3, [r7, #30]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	8bfa      	ldrh	r2, [r7, #30]
 80028a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028aa:	b292      	uxth	r2, r2
 80028ac:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	3306      	adds	r3, #6
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80028d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d019      	beq.n	8002916 <PCD_EP_ISR_Handler+0x1f8>
 80028e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d015      	beq.n	8002916 <PCD_EP_ISR_Handler+0x1f8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6818      	ldr	r0, [r3, #0]
 80028ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f0:	6959      	ldr	r1, [r3, #20]
 80028f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80028f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f004 f80c 	bl	8006918 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002906:	69db      	ldr	r3, [r3, #28]
 8002908:	441a      	add	r2, r3
 800290a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800290c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800290e:	2100      	movs	r1, #0
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f005 fbf3 	bl	80080fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002920:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002928:	2b00      	cmp	r3, #0
 800292a:	f040 82bd 	bne.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
 800292e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002932:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800293a:	f000 82b5 	beq.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800294c:	b29b      	uxth	r3, r3
 800294e:	461a      	mov	r2, r3
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	4413      	add	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800295c:	617b      	str	r3, [r7, #20]
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002968:	b29a      	uxth	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	801a      	strh	r2, [r3, #0]
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b3e      	cmp	r3, #62	; 0x3e
 8002974:	d91d      	bls.n	80029b2 <PCD_EP_ISR_Handler+0x294>
 8002976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	647b      	str	r3, [r7, #68]	; 0x44
 800297e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <PCD_EP_ISR_Handler+0x272>
 800298a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800298c:	3b01      	subs	r3, #1
 800298e:	647b      	str	r3, [r7, #68]	; 0x44
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	881b      	ldrh	r3, [r3, #0]
 8002994:	b29a      	uxth	r2, r3
 8002996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002998:	b29b      	uxth	r3, r3
 800299a:	029b      	lsls	r3, r3, #10
 800299c:	b29b      	uxth	r3, r3
 800299e:	4313      	orrs	r3, r2
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	e026      	b.n	8002a00 <PCD_EP_ISR_Handler+0x2e2>
 80029b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d10a      	bne.n	80029d0 <PCD_EP_ISR_Handler+0x2b2>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	b29b      	uxth	r3, r3
 80029c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	801a      	strh	r2, [r3, #0]
 80029ce:	e017      	b.n	8002a00 <PCD_EP_ISR_Handler+0x2e2>
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
 80029d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d002      	beq.n	80029ea <PCD_EP_ISR_Handler+0x2cc>
 80029e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029e6:	3301      	adds	r3, #1
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	029b      	lsls	r3, r3, #10
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	4313      	orrs	r3, r2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a10:	827b      	strh	r3, [r7, #18]
 8002a12:	8a7b      	ldrh	r3, [r7, #18]
 8002a14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002a18:	827b      	strh	r3, [r7, #18]
 8002a1a:	8a7b      	ldrh	r3, [r7, #18]
 8002a1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a20:	827b      	strh	r3, [r7, #18]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	8a7b      	ldrh	r3, [r7, #18]
 8002a28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8013      	strh	r3, [r2, #0]
 8002a3c:	e234      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	881b      	ldrh	r3, [r3, #0]
 8002a4e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a52:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f280 80fc 	bge.w	8002c54 <PCD_EP_ISR_Handler+0x536>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002a72:	4013      	ands	r3, r2
 8002a74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002a8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002a92:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8002a96:	4613      	mov	r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4413      	add	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002aa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aaa:	7b1b      	ldrb	r3, [r3, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d125      	bne.n	8002afc <PCD_EP_ISR_Handler+0x3de>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad2:	881b      	ldrh	r3, [r3, #0]
 8002ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ad8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8002adc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8092 	beq.w	8002c0a <PCD_EP_ISR_Handler+0x4ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6818      	ldr	r0, [r3, #0]
 8002aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002aec:	6959      	ldr	r1, [r3, #20]
 8002aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002af0:	88da      	ldrh	r2, [r3, #6]
 8002af2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002af6:	f003 ff0f 	bl	8006918 <USB_ReadPMA>
 8002afa:	e086      	b.n	8002c0a <PCD_EP_ISR_Handler+0x4ec>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002afe:	78db      	ldrb	r3, [r3, #3]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d10a      	bne.n	8002b1a <PCD_EP_ISR_Handler+0x3fc>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002b04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002b08:	461a      	mov	r2, r3
 8002b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9d9 	bl	8002ec4 <HAL_PCD_EP_DB_Receive>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002b18:	e077      	b.n	8002c0a <PCD_EP_ISR_Handler+0x4ec>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	881b      	ldrh	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b34:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	441a      	add	r2, r3
 8002b46:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002b4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	461a      	mov	r2, r3
 8002b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	881b      	ldrh	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d024      	beq.n	8002bc2 <PCD_EP_ISR_Handler+0x4a4>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	461a      	mov	r2, r3
 8002b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3302      	adds	r3, #2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ba0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002ba4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d02e      	beq.n	8002c0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb2:	6959      	ldr	r1, [r3, #20]
 8002bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bb6:	891a      	ldrh	r2, [r3, #8]
 8002bb8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bbc:	f003 feac 	bl	8006918 <USB_ReadPMA>
 8002bc0:	e023      	b.n	8002c0a <PCD_EP_ISR_Handler+0x4ec>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	461a      	mov	r2, r3
 8002bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3306      	adds	r3, #6
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	6812      	ldr	r2, [r2, #0]
 8002bde:	4413      	add	r3, r2
 8002be0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002be4:	881b      	ldrh	r3, [r3, #0]
 8002be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002bea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8002bee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d009      	beq.n	8002c0a <PCD_EP_ISR_Handler+0x4ec>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6818      	ldr	r0, [r3, #0]
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	6959      	ldr	r1, [r3, #20]
 8002bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c00:	895a      	ldrh	r2, [r3, #10]
 8002c02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c06:	f003 fe87 	bl	8006918 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c12:	441a      	add	r2, r3
 8002c14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c16:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002c18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002c20:	441a      	add	r2, r3
 8002c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c24:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <PCD_EP_ISR_Handler+0x51c>
 8002c2e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d206      	bcs.n	8002c48 <PCD_EP_ISR_Handler+0x52a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	4619      	mov	r1, r3
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f005 fa5b 	bl	80080fc <HAL_PCD_DataOutStageCallback>
 8002c46:	e005      	b.n	8002c54 <PCD_EP_ISR_Handler+0x536>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 f92e 	bl	8004eb0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002c54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8123 	beq.w	8002ea8 <PCD_EP_ISR_Handler+0x78a>
      {
        ep = &hpcd->IN_ep[epindex];
 8002c62:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	4413      	add	r3, r2
 8002c74:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c90:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cb4:	78db      	ldrb	r3, [r3, #3]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 80a2 	bne.w	8002e00 <PCD_EP_ISR_Handler+0x6e2>
        {
          ep->xfer_len = 0U;
 8002cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002cc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cc4:	7b1b      	ldrb	r3, [r3, #12]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f000 8093 	beq.w	8002df2 <PCD_EP_ISR_Handler+0x6d4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002ccc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d046      	beq.n	8002d66 <PCD_EP_ISR_Handler+0x648>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cda:	785b      	ldrb	r3, [r3, #1]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d126      	bne.n	8002d2e <PCD_EP_ISR_Handler+0x610>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	4413      	add	r3, r2
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	011a      	lsls	r2, r3, #4
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	4413      	add	r3, r2
 8002d02:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d06:	623b      	str	r3, [r7, #32]
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	801a      	strh	r2, [r3, #0]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	801a      	strh	r2, [r3, #0]
 8002d2c:	e061      	b.n	8002df2 <PCD_EP_ISR_Handler+0x6d4>
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d15d      	bne.n	8002df2 <PCD_EP_ISR_Handler+0x6d4>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	4413      	add	r3, r2
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	011a      	lsls	r2, r3, #4
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	4413      	add	r3, r2
 8002d58:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d60:	2200      	movs	r2, #0
 8002d62:	801a      	strh	r2, [r3, #0]
 8002d64:	e045      	b.n	8002df2 <PCD_EP_ISR_Handler+0x6d4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6e:	785b      	ldrb	r3, [r3, #1]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d126      	bne.n	8002dc2 <PCD_EP_ISR_Handler+0x6a4>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	637b      	str	r3, [r7, #52]	; 0x34
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	4413      	add	r3, r2
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	011a      	lsls	r2, r3, #4
 8002d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d94:	4413      	add	r3, r2
 8002d96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	801a      	strh	r2, [r3, #0]
 8002dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dae:	881b      	ldrh	r3, [r3, #0]
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002db6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dbe:	801a      	strh	r2, [r3, #0]
 8002dc0:	e017      	b.n	8002df2 <PCD_EP_ISR_Handler+0x6d4>
 8002dc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d113      	bne.n	8002df2 <PCD_EP_ISR_Handler+0x6d4>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd8:	4413      	add	r3, r2
 8002dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	011a      	lsls	r2, r3, #4
 8002de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de4:	4413      	add	r3, r2
 8002de6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dee:	2200      	movs	r2, #0
 8002df0:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	4619      	mov	r1, r3
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f005 f99a 	bl	8008132 <HAL_PCD_DataInStageCallback>
 8002dfe:	e053      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002e00:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d146      	bne.n	8002e9a <PCD_EP_ISR_Handler+0x77c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	461a      	mov	r2, r3
 8002e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	00db      	lsls	r3, r3, #3
 8002e1e:	4413      	add	r3, r2
 8002e20:	3302      	adds	r3, #2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	4413      	add	r3, r2
 8002e2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e34:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e3a:	699a      	ldr	r2, [r3, #24]
 8002e3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d907      	bls.n	8002e54 <PCD_EP_ISR_Handler+0x736>
            {
              ep->xfer_len -= TxPctSize;
 8002e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e46:	699a      	ldr	r2, [r3, #24]
 8002e48:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e4c:	1ad2      	subs	r2, r2, r3
 8002e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e50:	619a      	str	r2, [r3, #24]
 8002e52:	e002      	b.n	8002e5a <PCD_EP_ISR_Handler+0x73c>
            }
            else
            {
              ep->xfer_len = 0U;
 8002e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e56:	2200      	movs	r2, #0
 8002e58:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d106      	bne.n	8002e70 <PCD_EP_ISR_Handler+0x752>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4619      	mov	r1, r3
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f005 f962 	bl	8008132 <HAL_PCD_DataInStageCallback>
 8002e6e:	e01b      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e78:	441a      	add	r2, r3
 8002e7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002e86:	441a      	add	r2, r3
 8002e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 f80c 	bl	8004eb0 <USB_EPStartXfer>
 8002e98:	e006      	b.n	8002ea8 <PCD_EP_ISR_Handler+0x78a>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002e9a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f91b 	bl	80030de <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f6ff ac37 	blt.w	8002728 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3758      	adds	r7, #88	; 0x58
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d07e      	beq.n	8002fda <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	4413      	add	r3, r2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	4413      	add	r3, r2
 8002efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	8b7b      	ldrh	r3, [r7, #26]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d306      	bcc.n	8002f1e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	8b7b      	ldrh	r3, [r7, #26]
 8002f16:	1ad2      	subs	r2, r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	619a      	str	r2, [r3, #24]
 8002f1c:	e002      	b.n	8002f24 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2200      	movs	r2, #0
 8002f22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d123      	bne.n	8002f74 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f46:	833b      	strh	r3, [r7, #24]
 8002f48:	8b3b      	ldrh	r3, [r7, #24]
 8002f4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002f4e:	833b      	strh	r3, [r7, #24]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	441a      	add	r2, r3
 8002f5e:	8b3b      	ldrh	r3, [r7, #24]
 8002f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01f      	beq.n	8002fbe <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f98:	82fb      	strh	r3, [r7, #22]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	441a      	add	r2, r3
 8002fa8:	8afb      	ldrh	r3, [r7, #22]
 8002faa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002fbe:	8b7b      	ldrh	r3, [r7, #26]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8087 	beq.w	80030d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6959      	ldr	r1, [r3, #20]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	891a      	ldrh	r2, [r3, #8]
 8002fd2:	8b7b      	ldrh	r3, [r7, #26]
 8002fd4:	f003 fca0 	bl	8006918 <USB_ReadPMA>
 8002fd8:	e07c      	b.n	80030d4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	3306      	adds	r3, #6
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003002:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	8b7b      	ldrh	r3, [r7, #26]
 800300a:	429a      	cmp	r2, r3
 800300c:	d306      	bcc.n	800301c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	8b7b      	ldrh	r3, [r7, #26]
 8003014:	1ad2      	subs	r2, r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	619a      	str	r2, [r3, #24]
 800301a:	e002      	b.n	8003022 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2200      	movs	r2, #0
 8003020:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d123      	bne.n	8003072 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	881b      	ldrh	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003044:	83fb      	strh	r3, [r7, #30]
 8003046:	8bfb      	ldrh	r3, [r7, #30]
 8003048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800304c:	83fb      	strh	r3, [r7, #30]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	441a      	add	r2, r3
 800305c:	8bfb      	ldrh	r3, [r7, #30]
 800305e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003062:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800306e:	b29b      	uxth	r3, r3
 8003070:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11f      	bne.n	80030bc <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003096:	83bb      	strh	r3, [r7, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	441a      	add	r2, r3
 80030a6:	8bbb      	ldrh	r3, [r7, #28]
 80030a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80030bc:	8b7b      	ldrh	r3, [r7, #26]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d008      	beq.n	80030d4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	6959      	ldr	r1, [r3, #20]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	895a      	ldrh	r2, [r3, #10]
 80030ce:	8b7b      	ldrh	r3, [r7, #26]
 80030d0:	f003 fc22 	bl	8006918 <USB_ReadPMA>
    }
  }

  return count;
 80030d4:	8b7b      	ldrh	r3, [r7, #26]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b0a4      	sub	sp, #144	; 0x90
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 81dd 	beq.w	80034b2 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003100:	b29b      	uxth	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	4413      	add	r3, r2
 800310c:	3302      	adds	r3, #2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	4413      	add	r3, r2
 8003116:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003120:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800312c:	429a      	cmp	r2, r3
 800312e:	d907      	bls.n	8003140 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	699a      	ldr	r2, [r3, #24]
 8003134:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003138:	1ad2      	subs	r2, r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	619a      	str	r2, [r3, #24]
 800313e:	e002      	b.n	8003146 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2200      	movs	r2, #0
 8003144:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	f040 80b9 	bne.w	80032c2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	785b      	ldrb	r3, [r3, #1]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d126      	bne.n	80031a6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003166:	b29b      	uxth	r3, r3
 8003168:	461a      	mov	r2, r3
 800316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316c:	4413      	add	r3, r2
 800316e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	011a      	lsls	r2, r3, #4
 8003176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003178:	4413      	add	r3, r2
 800317a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800317e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003182:	881b      	ldrh	r3, [r3, #0]
 8003184:	b29b      	uxth	r3, r3
 8003186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800318a:	b29a      	uxth	r2, r3
 800318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318e:	801a      	strh	r2, [r3, #0]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	b29b      	uxth	r3, r3
 8003196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800319a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800319e:	b29a      	uxth	r2, r3
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	801a      	strh	r2, [r3, #0]
 80031a4:	e01a      	b.n	80031dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	785b      	ldrb	r3, [r3, #1]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d116      	bne.n	80031dc <HAL_PCD_EP_DB_Transmit+0xfe>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031bc:	b29b      	uxth	r3, r3
 80031be:	461a      	mov	r2, r3
 80031c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031c2:	4413      	add	r3, r2
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	011a      	lsls	r2, r3, #4
 80031cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ce:	4413      	add	r3, r2
 80031d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031d4:	633b      	str	r3, [r7, #48]	; 0x30
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2200      	movs	r2, #0
 80031da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	627b      	str	r3, [r7, #36]	; 0x24
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d126      	bne.n	8003238 <HAL_PCD_EP_DB_Transmit+0x15a>
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	011a      	lsls	r2, r3, #4
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800321c:	b29a      	uxth	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	801a      	strh	r2, [r3, #0]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	b29b      	uxth	r3, r3
 8003228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800322c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003230:	b29a      	uxth	r2, r3
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	801a      	strh	r2, [r3, #0]
 8003236:	e017      	b.n	8003268 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	785b      	ldrb	r3, [r3, #1]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d113      	bne.n	8003268 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003248:	b29b      	uxth	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	4413      	add	r3, r2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	011a      	lsls	r2, r3, #4
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	4413      	add	r3, r2
 800325c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003260:	623b      	str	r3, [r7, #32]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	2200      	movs	r2, #0
 8003266:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	4619      	mov	r1, r3
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f004 ff5f 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 82fc 	beq.w	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	461a      	mov	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800329a:	82fb      	strh	r3, [r7, #22]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	8afb      	ldrh	r3, [r7, #22]
 80032ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032bc:	b29b      	uxth	r3, r3
 80032be:	8013      	strh	r3, [r2, #0]
 80032c0:	e2da      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d021      	beq.n	8003310 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	4413      	add	r3, r2
 80032da:	881b      	ldrh	r3, [r3, #0]
 80032dc:	b29b      	uxth	r3, r3
 80032de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	461a      	mov	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	441a      	add	r2, r3
 80032f8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80032fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003304:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800330c:	b29b      	uxth	r3, r3
 800330e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003316:	2b01      	cmp	r3, #1
 8003318:	f040 82ae 	bne.w	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003324:	441a      	add	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003332:	441a      	add	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	6a1a      	ldr	r2, [r3, #32]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	429a      	cmp	r2, r3
 8003342:	d30b      	bcc.n	800335c <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	6a1a      	ldr	r2, [r3, #32]
 8003350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003354:	1ad2      	subs	r2, r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	621a      	str	r2, [r3, #32]
 800335a:	e017      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003364:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003374:	e00a      	b.n	800338c <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	785b      	ldrb	r3, [r3, #1]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d165      	bne.n	8003460 <HAL_PCD_EP_DB_Transmit+0x382>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033a8:	4413      	add	r3, r2
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	011a      	lsls	r2, r3, #4
 80033b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033b4:	4413      	add	r3, r2
 80033b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80033ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80033bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d0:	2b3e      	cmp	r3, #62	; 0x3e
 80033d2:	d91d      	bls.n	8003410 <HAL_PCD_EP_DB_Transmit+0x332>
 80033d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d8:	095b      	lsrs	r3, r3, #5
 80033da:	64bb      	str	r3, [r7, #72]	; 0x48
 80033dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033e0:	f003 031f 	and.w	r3, r3, #31
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x310>
 80033e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033ea:	3b01      	subs	r3, #1
 80033ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	4313      	orrs	r3, r2
 80033fe:	b29b      	uxth	r3, r3
 8003400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003408:	b29a      	uxth	r2, r3
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	801a      	strh	r2, [r3, #0]
 800340e:	e044      	b.n	800349a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10a      	bne.n	800342e <HAL_PCD_EP_DB_Transmit+0x350>
 8003418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b29b      	uxth	r3, r3
 800341e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003422:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003426:	b29a      	uxth	r2, r3
 8003428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342a:	801a      	strh	r2, [r3, #0]
 800342c:	e035      	b.n	800349a <HAL_PCD_EP_DB_Transmit+0x3bc>
 800342e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003432:	085b      	lsrs	r3, r3, #1
 8003434:	64bb      	str	r3, [r7, #72]	; 0x48
 8003436:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003444:	3301      	adds	r3, #1
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
 8003448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29a      	uxth	r2, r3
 800344e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003450:	b29b      	uxth	r3, r3
 8003452:	029b      	lsls	r3, r3, #10
 8003454:	b29b      	uxth	r3, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	b29a      	uxth	r2, r3
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800345c:	801a      	strh	r2, [r3, #0]
 800345e:	e01c      	b.n	800349a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	785b      	ldrb	r3, [r3, #1]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d118      	bne.n	800349a <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	647b      	str	r3, [r7, #68]	; 0x44
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003476:	b29b      	uxth	r3, r3
 8003478:	461a      	mov	r2, r3
 800347a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800347c:	4413      	add	r3, r2
 800347e:	647b      	str	r3, [r7, #68]	; 0x44
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	011a      	lsls	r2, r3, #4
 8003486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003488:	4413      	add	r3, r2
 800348a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800348e:	643b      	str	r3, [r7, #64]	; 0x40
 8003490:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003494:	b29a      	uxth	r2, r3
 8003496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003498:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	6959      	ldr	r1, [r3, #20]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	891a      	ldrh	r2, [r3, #8]
 80034a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	f003 f9ef 	bl	800688e <USB_WritePMA>
 80034b0:	e1e2      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	461a      	mov	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	3306      	adds	r3, #6
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034da:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d307      	bcc.n	80034fa <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80034f2:	1ad2      	subs	r2, r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	619a      	str	r2, [r3, #24]
 80034f8:	e002      	b.n	8003500 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	2b00      	cmp	r3, #0
 8003506:	f040 80c0 	bne.w	800368a <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	785b      	ldrb	r3, [r3, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d126      	bne.n	8003560 <HAL_PCD_EP_DB_Transmit+0x482>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003520:	b29b      	uxth	r3, r3
 8003522:	461a      	mov	r2, r3
 8003524:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003526:	4413      	add	r3, r2
 8003528:	67fb      	str	r3, [r7, #124]	; 0x7c
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	011a      	lsls	r2, r3, #4
 8003530:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003532:	4413      	add	r3, r2
 8003534:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003538:	67bb      	str	r3, [r7, #120]	; 0x78
 800353a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b29b      	uxth	r3, r3
 8003540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003544:	b29a      	uxth	r2, r3
 8003546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003548:	801a      	strh	r2, [r3, #0]
 800354a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003554:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003558:	b29a      	uxth	r2, r3
 800355a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355c:	801a      	strh	r2, [r3, #0]
 800355e:	e01a      	b.n	8003596 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	785b      	ldrb	r3, [r3, #1]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d116      	bne.n	8003596 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	667b      	str	r3, [r7, #100]	; 0x64
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003576:	b29b      	uxth	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800357c:	4413      	add	r3, r2
 800357e:	667b      	str	r3, [r7, #100]	; 0x64
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	011a      	lsls	r2, r3, #4
 8003586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003588:	4413      	add	r3, r2
 800358a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
 8003590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003592:	2200      	movs	r2, #0
 8003594:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	677b      	str	r3, [r7, #116]	; 0x74
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	785b      	ldrb	r3, [r3, #1]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d12b      	bne.n	80035fc <HAL_PCD_EP_DB_Transmit+0x51e>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	461a      	mov	r2, r3
 80035b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b8:	4413      	add	r3, r2
 80035ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	011a      	lsls	r2, r3, #4
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	4413      	add	r3, r2
 80035c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80035ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80035ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035da:	b29a      	uxth	r2, r3
 80035dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e0:	801a      	strh	r2, [r3, #0]
 80035e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80035f8:	801a      	strh	r2, [r3, #0]
 80035fa:	e017      	b.n	800362c <HAL_PCD_EP_DB_Transmit+0x54e>
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	785b      	ldrb	r3, [r3, #1]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d113      	bne.n	800362c <HAL_PCD_EP_DB_Transmit+0x54e>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800360c:	b29b      	uxth	r3, r3
 800360e:	461a      	mov	r2, r3
 8003610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003612:	4413      	add	r3, r2
 8003614:	677b      	str	r3, [r7, #116]	; 0x74
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	011a      	lsls	r2, r3, #4
 800361c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361e:	4413      	add	r3, r2
 8003620:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003624:	673b      	str	r3, [r7, #112]	; 0x70
 8003626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003628:	2200      	movs	r2, #0
 800362a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4619      	mov	r1, r3
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f004 fd7d 	bl	8008132 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003638:	88fb      	ldrh	r3, [r7, #6]
 800363a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 811a 	bne.w	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4413      	add	r3, r2
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800365a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	441a      	add	r2, r3
 8003670:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003674:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003678:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800367c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003684:	b29b      	uxth	r3, r3
 8003686:	8013      	strh	r3, [r2, #0]
 8003688:	e0f6      	b.n	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d121      	bne.n	80036d8 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	461a      	mov	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	881b      	ldrh	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ae:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	461a      	mov	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	441a      	add	r2, r3
 80036c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80036c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036de:	2b01      	cmp	r3, #1
 80036e0:	f040 80ca 	bne.w	8003878 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	695a      	ldr	r2, [r3, #20]
 80036e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036ec:	441a      	add	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80036fa:	441a      	add	r2, r3
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	6a1a      	ldr	r2, [r3, #32]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d30b      	bcc.n	8003724 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6a1a      	ldr	r2, [r3, #32]
 8003718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800371c:	1ad2      	subs	r2, r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	621a      	str	r2, [r3, #32]
 8003722:	e017      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d108      	bne.n	800373e <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800372c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003730:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800373c:	e00a      	b.n	8003754 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2200      	movs	r2, #0
 800374a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	657b      	str	r3, [r7, #84]	; 0x54
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d165      	bne.n	800382e <HAL_PCD_EP_DB_Transmit+0x750>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003776:	4413      	add	r3, r2
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	011a      	lsls	r2, r3, #4
 8003780:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003782:	4413      	add	r3, r2
 8003784:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003788:	65bb      	str	r3, [r7, #88]	; 0x58
 800378a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29b      	uxth	r3, r3
 8003790:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003794:	b29a      	uxth	r2, r3
 8003796:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003798:	801a      	strh	r2, [r3, #0]
 800379a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800379e:	2b3e      	cmp	r3, #62	; 0x3e
 80037a0:	d91d      	bls.n	80037de <HAL_PCD_EP_DB_Transmit+0x700>
 80037a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80037aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d102      	bne.n	80037bc <HAL_PCD_EP_DB_Transmit+0x6de>
 80037b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037b8:	3b01      	subs	r3, #1
 80037ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80037bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	029b      	lsls	r3, r3, #10
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	e041      	b.n	8003862 <HAL_PCD_EP_DB_Transmit+0x784>
 80037de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10a      	bne.n	80037fc <HAL_PCD_EP_DB_Transmit+0x71e>
 80037e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f8:	801a      	strh	r2, [r3, #0]
 80037fa:	e032      	b.n	8003862 <HAL_PCD_EP_DB_Transmit+0x784>
 80037fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003800:	085b      	lsrs	r3, r3, #1
 8003802:	66bb      	str	r3, [r7, #104]	; 0x68
 8003804:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_PCD_EP_DB_Transmit+0x738>
 8003810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003812:	3301      	adds	r3, #1
 8003814:	66bb      	str	r3, [r7, #104]	; 0x68
 8003816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	b29a      	uxth	r2, r3
 800381c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800381e:	b29b      	uxth	r3, r3
 8003820:	029b      	lsls	r3, r3, #10
 8003822:	b29b      	uxth	r3, r3
 8003824:	4313      	orrs	r3, r2
 8003826:	b29a      	uxth	r2, r3
 8003828:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800382a:	801a      	strh	r2, [r3, #0]
 800382c:	e019      	b.n	8003862 <HAL_PCD_EP_DB_Transmit+0x784>
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	785b      	ldrb	r3, [r3, #1]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d115      	bne.n	8003862 <HAL_PCD_EP_DB_Transmit+0x784>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003844:	4413      	add	r3, r2
 8003846:	657b      	str	r3, [r7, #84]	; 0x54
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003850:	4413      	add	r3, r2
 8003852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003856:	653b      	str	r3, [r7, #80]	; 0x50
 8003858:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385c:	b29a      	uxth	r2, r3
 800385e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003860:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6959      	ldr	r1, [r3, #20]
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	895a      	ldrh	r2, [r3, #10]
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003872:	b29b      	uxth	r3, r3
 8003874:	f003 f80b 	bl	800688e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	881b      	ldrh	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003892:	82bb      	strh	r3, [r7, #20]
 8003894:	8abb      	ldrh	r3, [r7, #20]
 8003896:	f083 0310 	eor.w	r3, r3, #16
 800389a:	82bb      	strh	r3, [r7, #20]
 800389c:	8abb      	ldrh	r3, [r7, #20]
 800389e:	f083 0320 	eor.w	r3, r3, #32
 80038a2:	82bb      	strh	r3, [r7, #20]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	8abb      	ldrh	r3, [r7, #20]
 80038b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80038b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80038bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3790      	adds	r7, #144	; 0x90
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b087      	sub	sp, #28
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	60f8      	str	r0, [r7, #12]
 80038da:	607b      	str	r3, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	817b      	strh	r3, [r7, #10]
 80038e0:	4613      	mov	r3, r2
 80038e2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80038e4:	897b      	ldrh	r3, [r7, #10]
 80038e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00b      	beq.n	8003908 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4413      	add	r3, r2
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	e009      	b.n	800391c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003908:	897a      	ldrh	r2, [r7, #10]
 800390a:	4613      	mov	r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	4413      	add	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800391c:	893b      	ldrh	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d107      	bne.n	8003932 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2200      	movs	r2, #0
 8003926:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	b29a      	uxth	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	80da      	strh	r2, [r3, #6]
 8003930:	e00b      	b.n	800394a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2201      	movs	r2, #1
 8003936:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	b29a      	uxth	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	0c1b      	lsrs	r3, r3, #16
 8003944:	b29a      	uxth	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	371c      	adds	r7, #28
 8003950:	46bd      	mov	sp, r7
 8003952:	bc80      	pop	{r7}
 8003954:	4770      	bx	lr
	...

08003958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e272      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 8087 	beq.w	8003a86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b04      	cmp	r3, #4
 8003982:	d00c      	beq.n	800399e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003984:	4b8f      	ldr	r3, [pc, #572]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d112      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5e>
 8003990:	4b8c      	ldr	r3, [pc, #560]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399c:	d10b      	bne.n	80039b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d06c      	beq.n	8003a84 <HAL_RCC_OscConfig+0x12c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d168      	bne.n	8003a84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e24c      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039be:	d106      	bne.n	80039ce <HAL_RCC_OscConfig+0x76>
 80039c0:	4b80      	ldr	r3, [pc, #512]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a7f      	ldr	r2, [pc, #508]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e02e      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10c      	bne.n	80039f0 <HAL_RCC_OscConfig+0x98>
 80039d6:	4b7b      	ldr	r3, [pc, #492]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a7a      	ldr	r2, [pc, #488]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a77      	ldr	r2, [pc, #476]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e01d      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCC_OscConfig+0xbc>
 80039fa:	4b72      	ldr	r3, [pc, #456]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a71      	ldr	r2, [pc, #452]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a04:	6013      	str	r3, [r2, #0]
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6e      	ldr	r2, [pc, #440]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	e00b      	b.n	8003a2c <HAL_RCC_OscConfig+0xd4>
 8003a14:	4b6b      	ldr	r3, [pc, #428]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a6a      	ldr	r2, [pc, #424]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1e:	6013      	str	r3, [r2, #0]
 8003a20:	4b68      	ldr	r3, [pc, #416]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a67      	ldr	r2, [pc, #412]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d013      	beq.n	8003a5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd ff60 	bl	80018f8 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7fd ff5c 	bl	80018f8 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e200      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b5d      	ldr	r3, [pc, #372]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xe4>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5c:	f7fd ff4c 	bl	80018f8 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fd ff48 	bl	80018f8 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e1ec      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b53      	ldr	r3, [pc, #332]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x10c>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d063      	beq.n	8003b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a92:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003a9e:	4b49      	ldr	r3, [pc, #292]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d11c      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x18c>
 8003aaa:	4b46      	ldr	r3, [pc, #280]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d116      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab6:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_RCC_OscConfig+0x176>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d001      	beq.n	8003ace <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e1c0      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	4939      	ldr	r1, [pc, #228]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae2:	e03a      	b.n	8003b5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d020      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fd ff01 	bl	80018f8 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fefd 	bl	80018f8 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e1a1      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0c:	4b2d      	ldr	r3, [pc, #180]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	4927      	ldr	r1, [pc, #156]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
 8003b2c:	e015      	b.n	8003b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b26      	ldr	r3, [pc, #152]	; (8003bc8 <HAL_RCC_OscConfig+0x270>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7fd fee0 	bl	80018f8 <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b3c:	f7fd fedc 	bl	80018f8 <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e180      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1f0      	bne.n	8003b3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d03a      	beq.n	8003bdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d019      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003b70:	2201      	movs	r2, #1
 8003b72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b74:	f7fd fec0 	bl	80018f8 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b7c:	f7fd febc 	bl	80018f8 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e160      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8e:	4b0d      	ldr	r3, [pc, #52]	; (8003bc4 <HAL_RCC_OscConfig+0x26c>)
 8003b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f0      	beq.n	8003b7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f000 fa9c 	bl	80040d8 <RCC_Delay>
 8003ba0:	e01c      	b.n	8003bdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_OscConfig+0x274>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fd fea6 	bl	80018f8 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bae:	e00f      	b.n	8003bd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fd fea2 	bl	80018f8 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d908      	bls.n	8003bd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e146      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
 8003bc2:	bf00      	nop
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	42420000 	.word	0x42420000
 8003bcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd0:	4b92      	ldr	r3, [pc, #584]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e9      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80a6 	beq.w	8003d36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bee:	4b8b      	ldr	r3, [pc, #556]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfa:	4b88      	ldr	r3, [pc, #544]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	4a87      	ldr	r2, [pc, #540]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	61d3      	str	r3, [r2, #28]
 8003c06:	4b85      	ldr	r3, [pc, #532]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b82      	ldr	r3, [pc, #520]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b7f      	ldr	r3, [pc, #508]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a7e      	ldr	r2, [pc, #504]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fe63 	bl	80018f8 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fd fe5f 	bl	80018f8 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b64      	cmp	r3, #100	; 0x64
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e103      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b75      	ldr	r3, [pc, #468]	; (8003e20 <HAL_RCC_OscConfig+0x4c8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x312>
 8003c5c:	4b6f      	ldr	r3, [pc, #444]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	4a6e      	ldr	r2, [pc, #440]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6213      	str	r3, [r2, #32]
 8003c68:	e02d      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x334>
 8003c72:	4b6a      	ldr	r3, [pc, #424]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	4a69      	ldr	r2, [pc, #420]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c78:	f023 0301 	bic.w	r3, r3, #1
 8003c7c:	6213      	str	r3, [r2, #32]
 8003c7e:	4b67      	ldr	r3, [pc, #412]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	4a66      	ldr	r2, [pc, #408]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c84:	f023 0304 	bic.w	r3, r3, #4
 8003c88:	6213      	str	r3, [r2, #32]
 8003c8a:	e01c      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	2b05      	cmp	r3, #5
 8003c92:	d10c      	bne.n	8003cae <HAL_RCC_OscConfig+0x356>
 8003c94:	4b61      	ldr	r3, [pc, #388]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4a60      	ldr	r2, [pc, #384]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6213      	str	r3, [r2, #32]
 8003ca0:	4b5e      	ldr	r3, [pc, #376]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	4a5d      	ldr	r2, [pc, #372]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003ca6:	f043 0301 	orr.w	r3, r3, #1
 8003caa:	6213      	str	r3, [r2, #32]
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0x36e>
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a5a      	ldr	r2, [pc, #360]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	f023 0301 	bic.w	r3, r3, #1
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	4b58      	ldr	r3, [pc, #352]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cbc:	6a1b      	ldr	r3, [r3, #32]
 8003cbe:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	f023 0304 	bic.w	r3, r3, #4
 8003cc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d015      	beq.n	8003cfa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cce:	f7fd fe13 	bl	80018f8 <HAL_GetTick>
 8003cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	e00a      	b.n	8003cec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd6:	f7fd fe0f 	bl	80018f8 <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0b1      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0ee      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x37e>
 8003cf8:	e014      	b.n	8003d24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfa:	f7fd fdfd 	bl	80018f8 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d00:	e00a      	b.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d02:	f7fd fdf9 	bl	80018f8 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e09b      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d18:	4b40      	ldr	r3, [pc, #256]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1ee      	bne.n	8003d02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b3c      	ldr	r3, [pc, #240]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a3b      	ldr	r2, [pc, #236]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	69db      	ldr	r3, [r3, #28]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8087 	beq.w	8003e4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d40:	4b36      	ldr	r3, [pc, #216]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 030c 	and.w	r3, r3, #12
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d061      	beq.n	8003e10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d146      	bne.n	8003de2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d54:	4b33      	ldr	r3, [pc, #204]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5a:	f7fd fdcd 	bl	80018f8 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d62:	f7fd fdc9 	bl	80018f8 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e06d      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d74:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f0      	bne.n	8003d62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d88:	d108      	bne.n	8003d9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	4921      	ldr	r1, [pc, #132]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a19      	ldr	r1, [r3, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	430b      	orrs	r3, r1
 8003dae:	491b      	ldr	r1, [pc, #108]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fd fd9d 	bl	80018f8 <HAL_GetTick>
 8003dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dc2:	f7fd fd99 	bl	80018f8 <HAL_GetTick>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e03d      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd4:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x46a>
 8003de0:	e035      	b.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de2:	4b10      	ldr	r3, [pc, #64]	; (8003e24 <HAL_RCC_OscConfig+0x4cc>)
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de8:	f7fd fd86 	bl	80018f8 <HAL_GetTick>
 8003dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df0:	f7fd fd82 	bl	80018f8 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e026      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e02:	4b06      	ldr	r3, [pc, #24]	; (8003e1c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1f0      	bne.n	8003df0 <HAL_RCC_OscConfig+0x498>
 8003e0e:	e01e      	b.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e019      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40007000 	.word	0x40007000
 8003e24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_OscConfig+0x500>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3718      	adds	r7, #24
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}
 8003e58:	40021000 	.word	0x40021000

08003e5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e0d0      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d910      	bls.n	8003ea0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b67      	ldr	r3, [pc, #412]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 0207 	bic.w	r2, r3, #7
 8003e86:	4965      	ldr	r1, [pc, #404]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b63      	ldr	r3, [pc, #396]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0b8      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eb8:	4b59      	ldr	r3, [pc, #356]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ebe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003ec2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed0:	4b53      	ldr	r3, [pc, #332]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4a52      	ldr	r2, [pc, #328]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003eda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003edc:	4b50      	ldr	r3, [pc, #320]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	494d      	ldr	r1, [pc, #308]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d040      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d107      	bne.n	8003f12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b47      	ldr	r3, [pc, #284]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d115      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e07f      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d107      	bne.n	8003f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f1a:	4b41      	ldr	r3, [pc, #260]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d109      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e073      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e06b      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 0203 	bic.w	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	4936      	ldr	r1, [pc, #216]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f4c:	f7fd fcd4 	bl	80018f8 <HAL_GetTick>
 8003f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f52:	e00a      	b.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f54:	f7fd fcd0 	bl	80018f8 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e053      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f6a:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 020c 	and.w	r2, r3, #12
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d1eb      	bne.n	8003f54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d210      	bcs.n	8003fac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b24      	ldr	r3, [pc, #144]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f023 0207 	bic.w	r2, r3, #7
 8003f92:	4922      	ldr	r1, [pc, #136]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCC_ClockConfig+0x1c0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e032      	b.n	8004012 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fb8:	4b19      	ldr	r3, [pc, #100]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	4916      	ldr	r1, [pc, #88]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d009      	beq.n	8003fea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003fd6:	4b12      	ldr	r3, [pc, #72]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	00db      	lsls	r3, r3, #3
 8003fe4:	490e      	ldr	r1, [pc, #56]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003fea:	f000 f821 	bl	8004030 <HAL_RCC_GetSysClockFreq>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	490a      	ldr	r1, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffc:	5ccb      	ldrb	r3, [r1, r3]
 8003ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8004002:	4a09      	ldr	r2, [pc, #36]	; (8004028 <HAL_RCC_ClockConfig+0x1cc>)
 8004004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004006:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1d0>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fc32 	bl	8001874 <HAL_InitTick>

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40022000 	.word	0x40022000
 8004020:	40021000 	.word	0x40021000
 8004024:	08008648 	.word	0x08008648
 8004028:	20000000 	.word	0x20000000
 800402c:	20000004 	.word	0x20000004

08004030 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	2300      	movs	r3, #0
 800403c:	60bb      	str	r3, [r7, #8]
 800403e:	2300      	movs	r3, #0
 8004040:	617b      	str	r3, [r7, #20]
 8004042:	2300      	movs	r3, #0
 8004044:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800404a:	4b1e      	ldr	r3, [pc, #120]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d002      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0x30>
 800405a:	2b08      	cmp	r3, #8
 800405c:	d003      	beq.n	8004066 <HAL_RCC_GetSysClockFreq+0x36>
 800405e:	e027      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004062:	613b      	str	r3, [r7, #16]
      break;
 8004064:	e027      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	0c9b      	lsrs	r3, r3, #18
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	4a17      	ldr	r2, [pc, #92]	; (80040cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004070:	5cd3      	ldrb	r3, [r2, r3]
 8004072:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	0c5b      	lsrs	r3, r3, #17
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a0d      	ldr	r2, [pc, #52]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004092:	fb03 f202 	mul.w	r2, r3, r2
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e004      	b.n	80040aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040a4:	fb02 f303 	mul.w	r3, r2, r3
 80040a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	613b      	str	r3, [r7, #16]
      break;
 80040ae:	e002      	b.n	80040b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040b0:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80040b2:	613b      	str	r3, [r7, #16]
      break;
 80040b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b6:	693b      	ldr	r3, [r7, #16]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bc80      	pop	{r7}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	007a1200 	.word	0x007a1200
 80040cc:	08008658 	.word	0x08008658
 80040d0:	08008668 	.word	0x08008668
 80040d4:	003d0900 	.word	0x003d0900

080040d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <RCC_Delay+0x34>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <RCC_Delay+0x38>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0a5b      	lsrs	r3, r3, #9
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80040f4:	bf00      	nop
  }
  while (Delay --);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	60fa      	str	r2, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f9      	bne.n	80040f4 <RCC_Delay+0x1c>
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr
 800410c:	20000000 	.word	0x20000000
 8004110:	10624dd3 	.word	0x10624dd3

08004114 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	613b      	str	r3, [r7, #16]
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d07d      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004134:	4b4f      	ldr	r3, [pc, #316]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004136:	69db      	ldr	r3, [r3, #28]
 8004138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10d      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004140:	4b4c      	ldr	r3, [pc, #304]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	4a4b      	ldr	r2, [pc, #300]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800414a:	61d3      	str	r3, [r2, #28]
 800414c:	4b49      	ldr	r3, [pc, #292]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004158:	2301      	movs	r3, #1
 800415a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800415c:	4b46      	ldr	r3, [pc, #280]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d118      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a42      	ldr	r2, [pc, #264]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800416e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004174:	f7fd fbc0 	bl	80018f8 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417a:	e008      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800417c:	f7fd fbbc 	bl	80018f8 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b64      	cmp	r3, #100	; 0x64
 8004188:	d901      	bls.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e06d      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800418e:	4b3a      	ldr	r3, [pc, #232]	; (8004278 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800419a:	4b36      	ldr	r3, [pc, #216]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02e      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d027      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b8:	4b2e      	ldr	r3, [pc, #184]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041c2:	4b2e      	ldr	r3, [pc, #184]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041c8:	4b2c      	ldr	r3, [pc, #176]	; (800427c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041ce:	4a29      	ldr	r2, [pc, #164]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d014      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd fb8b 	bl	80018f8 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd fb87 	bl	80018f8 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e036      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041fe:	6a1b      	ldr	r3, [r3, #32]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0ee      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004208:	4b1a      	ldr	r3, [pc, #104]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	4917      	ldr	r1, [pc, #92]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004216:	4313      	orrs	r3, r2
 8004218:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b14      	ldr	r3, [pc, #80]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	4a13      	ldr	r2, [pc, #76]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800422a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004238:	4b0e      	ldr	r3, [pc, #56]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	490b      	ldr	r1, [pc, #44]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	4313      	orrs	r3, r2
 8004248:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40021000 	.word	0x40021000
 8004278:	40007000 	.word	0x40007000
 800427c:	42420440 	.word	0x42420440

08004280 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004280:	b084      	sub	sp, #16
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
 800428a:	f107 0014 	add.w	r0, r7, #20
 800428e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	b004      	add	sp, #16
 800429e:	4770      	bx	lr

080042a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042b0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042b4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80042d4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80042d8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	4013      	ands	r3, r2
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bc80      	pop	{r7}
 80042fe:	4770      	bx	lr

08004300 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	bc80      	pop	{r7}
 8004316:	4770      	bx	lr

08004318 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004318:	b084      	sub	sp, #16
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
 8004322:	f107 0014 	add.w	r0, r7, #20
 8004326:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	b004      	add	sp, #16
 8004356:	4770      	bx	lr

08004358 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004358:	b480      	push	{r7}
 800435a:	b09d      	sub	sp, #116	; 0x74
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d81f      	bhi.n	80043ca <USB_ActivateEndpoint+0x72>
 800438a:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <USB_ActivateEndpoint+0x38>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043a1 	.word	0x080043a1
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043d3 	.word	0x080043d3
 800439c:	080043af 	.word	0x080043af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80043a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043ac:	e012      	b.n	80043d4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80043ae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043b2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80043b6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043ba:	e00b      	b.n	80043d4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80043bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043c4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80043c8:	e004      	b.n	80043d4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80043d0:	e000      	b.n	80043d4 <USB_ActivateEndpoint+0x7c>
      break;
 80043d2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	441a      	add	r2, r3
 80043de:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800440c:	b29a      	uxth	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	4313      	orrs	r3, r2
 8004416:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800442c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004438:	b29b      	uxth	r3, r3
 800443a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	7b1b      	ldrb	r3, [r3, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	f040 8178 	bne.w	8004736 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	785b      	ldrb	r3, [r3, #1]
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8084 	beq.w	8004558 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	61bb      	str	r3, [r7, #24]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800445a:	b29b      	uxth	r3, r3
 800445c:	461a      	mov	r2, r3
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	4413      	add	r3, r2
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	011a      	lsls	r2, r3, #4
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	88db      	ldrh	r3, [r3, #6]
 8004478:	085b      	lsrs	r3, r3, #1
 800447a:	b29b      	uxth	r3, r3
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	827b      	strh	r3, [r7, #18]
 8004492:	8a7b      	ldrh	r3, [r7, #18]
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <USB_ActivateEndpoint+0x17c>
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	4413      	add	r3, r2
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	823b      	strh	r3, [r7, #16]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	8a3b      	ldrh	r3, [r7, #16]
 80044c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	78db      	ldrb	r3, [r3, #3]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d020      	beq.n	800451e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044f2:	81bb      	strh	r3, [r7, #12]
 80044f4:	89bb      	ldrh	r3, [r7, #12]
 80044f6:	f083 0320 	eor.w	r3, r3, #32
 80044fa:	81bb      	strh	r3, [r7, #12]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	441a      	add	r2, r3
 8004506:	89bb      	ldrh	r3, [r7, #12]
 8004508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004518:	b29b      	uxth	r3, r3
 800451a:	8013      	strh	r3, [r2, #0]
 800451c:	e2d5      	b.n	8004aca <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004534:	81fb      	strh	r3, [r7, #14]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	89fb      	ldrh	r3, [r7, #14]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
 8004556:	e2b8      	b.n	8004aca <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	633b      	str	r3, [r7, #48]	; 0x30
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	4413      	add	r3, r2
 800456a:	633b      	str	r3, [r7, #48]	; 0x30
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	011a      	lsls	r2, r3, #4
 8004572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004574:	4413      	add	r3, r2
 8004576:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	88db      	ldrh	r3, [r3, #6]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	005b      	lsls	r3, r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004596:	b29b      	uxth	r3, r3
 8004598:	461a      	mov	r2, r3
 800459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459c:	4413      	add	r3, r2
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	011a      	lsls	r2, r3, #4
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	4413      	add	r3, r2
 80045aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b3e      	cmp	r3, #62	; 0x3e
 80045c6:	d91d      	bls.n	8004604 <USB_ActivateEndpoint+0x2ac>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 031f 	and.w	r3, r3, #31
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d102      	bne.n	80045e2 <USB_ActivateEndpoint+0x28a>
 80045dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045de:	3b01      	subs	r3, #1
 80045e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	b29a      	uxth	r2, r3
 80045e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	029b      	lsls	r3, r3, #10
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	4313      	orrs	r3, r2
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045fc:	b29a      	uxth	r2, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	e026      	b.n	8004652 <USB_ActivateEndpoint+0x2fa>
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <USB_ActivateEndpoint+0x2ca>
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	881b      	ldrh	r3, [r3, #0]
 8004610:	b29b      	uxth	r3, r3
 8004612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461a:	b29a      	uxth	r2, r3
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	801a      	strh	r2, [r3, #0]
 8004620:	e017      	b.n	8004652 <USB_ActivateEndpoint+0x2fa>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	66bb      	str	r3, [r7, #104]	; 0x68
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <USB_ActivateEndpoint+0x2e4>
 8004636:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004638:	3301      	adds	r3, #1
 800463a:	66bb      	str	r3, [r7, #104]	; 0x68
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	b29a      	uxth	r2, r3
 8004642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004644:	b29b      	uxth	r3, r3
 8004646:	029b      	lsls	r3, r3, #10
 8004648:	b29b      	uxth	r3, r3
 800464a:	4313      	orrs	r3, r2
 800464c:	b29a      	uxth	r2, r3
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	881b      	ldrh	r3, [r3, #0]
 800465e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004660:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d01b      	beq.n	80046a2 <USB_ActivateEndpoint+0x34a>
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	881b      	ldrh	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800467c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004680:	843b      	strh	r3, [r7, #32]
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	8c3b      	ldrh	r3, [r7, #32]
 800468e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004696:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800469a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469e:	b29b      	uxth	r3, r3
 80046a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d124      	bne.n	80046f4 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c0:	83bb      	strh	r3, [r7, #28]
 80046c2:	8bbb      	ldrh	r3, [r7, #28]
 80046c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046c8:	83bb      	strh	r3, [r7, #28]
 80046ca:	8bbb      	ldrh	r3, [r7, #28]
 80046cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046d0:	83bb      	strh	r3, [r7, #28]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	441a      	add	r2, r3
 80046dc:	8bbb      	ldrh	r3, [r7, #28]
 80046de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	8013      	strh	r3, [r2, #0]
 80046f2:	e1ea      	b.n	8004aca <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	83fb      	strh	r3, [r7, #30]
 800470c:	8bfb      	ldrh	r3, [r7, #30]
 800470e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004712:	83fb      	strh	r3, [r7, #30]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	8bfb      	ldrh	r3, [r7, #30]
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
 8004734:	e1c9      	b.n	8004aca <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	78db      	ldrb	r3, [r3, #3]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d11e      	bne.n	800477c <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	881b      	ldrh	r3, [r3, #0]
 800474a:	b29b      	uxth	r3, r3
 800474c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004754:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	441a      	add	r2, r3
 8004762:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800476a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800476e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	b29b      	uxth	r3, r3
 8004778:	8013      	strh	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800478e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004792:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	441a      	add	r2, r3
 80047a0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80047a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	461a      	mov	r2, r3
 80047c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c8:	4413      	add	r3, r2
 80047ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	011a      	lsls	r2, r3, #4
 80047d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047da:	65bb      	str	r3, [r7, #88]	; 0x58
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	891b      	ldrh	r3, [r3, #8]
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	005b      	lsls	r3, r3, #1
 80047e6:	b29a      	uxth	r2, r3
 80047e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	657b      	str	r3, [r7, #84]	; 0x54
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	461a      	mov	r2, r3
 80047fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fc:	4413      	add	r3, r2
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	011a      	lsls	r2, r3, #4
 8004806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004808:	4413      	add	r3, r2
 800480a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800480e:	653b      	str	r3, [r7, #80]	; 0x50
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	895b      	ldrh	r3, [r3, #10]
 8004814:	085b      	lsrs	r3, r3, #1
 8004816:	b29b      	uxth	r3, r3
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800481e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	785b      	ldrb	r3, [r3, #1]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f040 8093 	bne.w	8004950 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800483a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800483e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01b      	beq.n	800487e <USB_ActivateEndpoint+0x526>
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	881b      	ldrh	r3, [r3, #0]
 8004852:	b29b      	uxth	r3, r3
 8004854:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004858:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800485c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	441a      	add	r2, r3
 8004868:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800486a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800486e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004872:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800487a:	b29b      	uxth	r3, r3
 800487c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	881b      	ldrh	r3, [r3, #0]
 800488a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800488c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d01b      	beq.n	80048ce <USB_ActivateEndpoint+0x576>
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048ac:	877b      	strh	r3, [r7, #58]	; 0x3a
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80048ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4413      	add	r3, r2
 80048d8:	881b      	ldrh	r3, [r3, #0]
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e4:	873b      	strh	r3, [r7, #56]	; 0x38
 80048e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048e8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80048ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048f0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	441a      	add	r2, r3
 8004900:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004902:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004906:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800490a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800490e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004912:	b29b      	uxth	r3, r3
 8004914:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800492c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	441a      	add	r2, r3
 8004938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800493a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800493e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494a:	b29b      	uxth	r3, r3
 800494c:	8013      	strh	r3, [r2, #0]
 800494e:	e0bc      	b.n	8004aca <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004960:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004964:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01d      	beq.n	80049a8 <USB_ActivateEndpoint+0x650>
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800497e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004982:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	441a      	add	r2, r3
 8004990:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800499c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	881b      	ldrh	r3, [r3, #0]
 80049b4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80049b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80049bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d01d      	beq.n	8004a00 <USB_ActivateEndpoint+0x6a8>
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049da:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80049ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	78db      	ldrb	r3, [r3, #3]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d024      	beq.n	8004a52 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a26:	f083 0320 	eor.w	r3, r3, #32
 8004a2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
 8004a50:	e01d      	b.n	8004a8e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	881b      	ldrh	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004a7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aa4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	441a      	add	r2, r3
 8004ab2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004aca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3774      	adds	r7, #116	; 0x74
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bc80      	pop	{r7}
 8004ad6:	4770      	bx	lr

08004ad8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b08d      	sub	sp, #52	; 0x34
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	7b1b      	ldrb	r3, [r3, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 808e 	bne.w	8004c08 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	785b      	ldrb	r3, [r3, #1]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d044      	beq.n	8004b7e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4413      	add	r3, r2
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	81bb      	strh	r3, [r7, #12]
 8004b02:	89bb      	ldrh	r3, [r7, #12]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <USB_DeactivateEndpoint+0x6c>
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	881b      	ldrh	r3, [r3, #0]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b22:	817b      	strh	r3, [r7, #10]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b5a:	813b      	strh	r3, [r7, #8]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	781b      	ldrb	r3, [r3, #0]
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	893b      	ldrh	r3, [r7, #8]
 8004b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	8013      	strh	r3, [r2, #0]
 8004b7c:	e192      	b.n	8004ea4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	881b      	ldrh	r3, [r3, #0]
 8004b8a:	827b      	strh	r3, [r7, #18]
 8004b8c:	8a7b      	ldrh	r3, [r7, #18]
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01b      	beq.n	8004bce <USB_DeactivateEndpoint+0xf6>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bac:	823b      	strh	r3, [r7, #16]
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	441a      	add	r2, r3
 8004bb8:	8a3b      	ldrh	r3, [r7, #16]
 8004bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	81fb      	strh	r3, [r7, #14]
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	781b      	ldrb	r3, [r3, #0]
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	441a      	add	r2, r3
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	8013      	strh	r3, [r2, #0]
 8004c06:	e14d      	b.n	8004ea4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 80a5 	bne.w	8004d5c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	843b      	strh	r3, [r7, #32]
 8004c20:	8c3b      	ldrh	r3, [r7, #32]
 8004c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d01b      	beq.n	8004c62 <USB_DeactivateEndpoint+0x18a>
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	881b      	ldrh	r3, [r3, #0]
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c40:	83fb      	strh	r3, [r7, #30]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	8bfb      	ldrh	r3, [r7, #30]
 8004c4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	881b      	ldrh	r3, [r3, #0]
 8004c6e:	83bb      	strh	r3, [r7, #28]
 8004c70:	8bbb      	ldrh	r3, [r7, #28]
 8004c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01b      	beq.n	8004cb2 <USB_DeactivateEndpoint+0x1da>
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c90:	837b      	strh	r3, [r7, #26]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	441a      	add	r2, r3
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004caa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	4413      	add	r3, r2
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cc8:	833b      	strh	r3, [r7, #24]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	441a      	add	r2, r3
 8004cd4:	8b3b      	ldrh	r3, [r7, #24]
 8004cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d00:	82fb      	strh	r3, [r7, #22]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	441a      	add	r2, r3
 8004d0c:	8afb      	ldrh	r3, [r7, #22]
 8004d0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d38:	82bb      	strh	r3, [r7, #20]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	441a      	add	r2, r3
 8004d44:	8abb      	ldrh	r3, [r7, #20]
 8004d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	8013      	strh	r3, [r2, #0]
 8004d5a:	e0a3      	b.n	8004ea4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004d6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01b      	beq.n	8004dac <USB_DeactivateEndpoint+0x2d4>
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	441a      	add	r2, r3
 8004d96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004d98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	881b      	ldrh	r3, [r3, #0]
 8004db8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004dba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01b      	beq.n	8004dfc <USB_DeactivateEndpoint+0x324>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dda:	853b      	strh	r3, [r7, #40]	; 0x28
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	441a      	add	r2, r3
 8004de6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	781b      	ldrb	r3, [r3, #0]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	4413      	add	r3, r2
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e12:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	441a      	add	r2, r3
 8004e1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e4a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	441a      	add	r2, r3
 8004e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004e58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	881b      	ldrh	r3, [r3, #0]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e82:	847b      	strh	r3, [r7, #34]	; 0x22
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	441a      	add	r2, r3
 8004e8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3734      	adds	r7, #52	; 0x34
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bc80      	pop	{r7}
 8004eae:	4770      	bx	lr

08004eb0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b0c2      	sub	sp, #264	; 0x108
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004ebe:	6018      	str	r0, [r3, #0]
 8004ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ec8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	785b      	ldrb	r3, [r3, #1]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f040 86b7 	bne.w	8005c4a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004edc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	699a      	ldr	r2, [r3, #24]
 8004ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d908      	bls.n	8004f0a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004f08:	e007      	b.n	8004f1a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004f0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	7b1b      	ldrb	r3, [r3, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d13a      	bne.n	8004fa0 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6959      	ldr	r1, [r3, #20]
 8004f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	88da      	ldrh	r2, [r3, #6]
 8004f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8004f4c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8004f50:	6800      	ldr	r0, [r0, #0]
 8004f52:	f001 fc9c 	bl	800688e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	613b      	str	r3, [r7, #16]
 8004f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	011a      	lsls	r2, r3, #4
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	f000 be1f 	b.w	8005bde <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	78db      	ldrb	r3, [r3, #3]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	f040 8462 	bne.w	8005876 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	f240 83df 	bls.w	800578e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004fde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	881b      	ldrh	r3, [r3, #0]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	441a      	add	r2, r3
 8005014:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005018:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800501c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005020:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005028:	b29b      	uxth	r3, r3
 800502a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800502c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800503c:	1ad2      	subs	r2, r2, r3
 800503e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005042:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800504a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800504e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	b29b      	uxth	r3, r3
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 81c7 	beq.w	8005400 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	633b      	str	r3, [r7, #48]	; 0x30
 800507e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d177      	bne.n	800517e <USB_EPStartXfer+0x2ce>
 800508e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	62bb      	str	r3, [r7, #40]	; 0x28
 800509a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800509e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	461a      	mov	r2, r3
 80050ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ae:	4413      	add	r3, r2
 80050b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80050b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	011a      	lsls	r2, r3, #4
 80050c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c2:	4413      	add	r3, r2
 80050c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050c8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d4:	b29a      	uxth	r2, r3
 80050d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d8:	801a      	strh	r2, [r3, #0]
 80050da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050de:	2b3e      	cmp	r3, #62	; 0x3e
 80050e0:	d921      	bls.n	8005126 <USB_EPStartXfer+0x276>
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80050ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d104      	bne.n	8005102 <USB_EPStartXfer+0x252>
 80050f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80050fc:	3b01      	subs	r3, #1
 80050fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	881b      	ldrh	r3, [r3, #0]
 8005106:	b29a      	uxth	r2, r3
 8005108:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800510c:	b29b      	uxth	r3, r3
 800510e:	029b      	lsls	r3, r3, #10
 8005110:	b29b      	uxth	r3, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	b29b      	uxth	r3, r3
 8005116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800511a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800511e:	b29a      	uxth	r2, r3
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	801a      	strh	r2, [r3, #0]
 8005124:	e050      	b.n	80051c8 <USB_EPStartXfer+0x318>
 8005126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <USB_EPStartXfer+0x294>
 800512e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005130:	881b      	ldrh	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800513c:	b29a      	uxth	r2, r3
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	e041      	b.n	80051c8 <USB_EPStartXfer+0x318>
 8005144:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005148:	085b      	lsrs	r3, r3, #1
 800514a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800514e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d004      	beq.n	8005164 <USB_EPStartXfer+0x2b4>
 800515a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800515e:	3301      	adds	r3, #1
 8005160:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	4313      	orrs	r3, r2
 8005176:	b29a      	uxth	r2, r3
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e024      	b.n	80051c8 <USB_EPStartXfer+0x318>
 800517e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005182:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11c      	bne.n	80051c8 <USB_EPStartXfer+0x318>
 800518e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005192:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a2:	4413      	add	r3, r2
 80051a4:	633b      	str	r3, [r7, #48]	; 0x30
 80051a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	4413      	add	r3, r2
 80051b8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	895b      	ldrh	r3, [r3, #10]
 80051d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80051dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6959      	ldr	r1, [r3, #20]
 80051e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80051ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80051f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80051f6:	6800      	ldr	r0, [r0, #0]
 80051f8:	f001 fb49 	bl	800688e <USB_WritePMA>
            ep->xfer_buff += len;
 80051fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005200:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	695a      	ldr	r2, [r3, #20]
 8005208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800520c:	441a      	add	r2, r3
 800520e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005212:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800521a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800521e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	429a      	cmp	r2, r3
 8005234:	d90f      	bls.n	8005256 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6a1a      	ldr	r2, [r3, #32]
 8005242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005246:	1ad2      	subs	r2, r2, r3
 8005248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800524c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	621a      	str	r2, [r3, #32]
 8005254:	e00e      	b.n	8005274 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800525a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8005266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800526a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2200      	movs	r2, #0
 8005272:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d177      	bne.n	8005374 <USB_EPStartXfer+0x4c4>
 8005284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005288:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	61bb      	str	r3, [r7, #24]
 8005290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800529e:	b29b      	uxth	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	4413      	add	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
 80052a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80052ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	011a      	lsls	r2, r3, #4
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	4413      	add	r3, r2
 80052ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052d4:	2b3e      	cmp	r3, #62	; 0x3e
 80052d6:	d921      	bls.n	800531c <USB_EPStartXfer+0x46c>
 80052d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80052e6:	f003 031f 	and.w	r3, r3, #31
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <USB_EPStartXfer+0x448>
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f2:	3b01      	subs	r3, #1
 80052f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005302:	b29b      	uxth	r3, r3
 8005304:	029b      	lsls	r3, r3, #10
 8005306:	b29b      	uxth	r3, r3
 8005308:	4313      	orrs	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005314:	b29a      	uxth	r2, r3
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e056      	b.n	80053ca <USB_EPStartXfer+0x51a>
 800531c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <USB_EPStartXfer+0x48a>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	881b      	ldrh	r3, [r3, #0]
 8005328:	b29b      	uxth	r3, r3
 800532a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800532e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005332:	b29a      	uxth	r2, r3
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	801a      	strh	r2, [r3, #0]
 8005338:	e047      	b.n	80053ca <USB_EPStartXfer+0x51a>
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <USB_EPStartXfer+0x4aa>
 8005350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005354:	3301      	adds	r3, #1
 8005356:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	b29a      	uxth	r2, r3
 8005360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005364:	b29b      	uxth	r3, r3
 8005366:	029b      	lsls	r3, r3, #10
 8005368:	b29b      	uxth	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	b29a      	uxth	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	801a      	strh	r2, [r3, #0]
 8005372:	e02a      	b.n	80053ca <USB_EPStartXfer+0x51a>
 8005374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	785b      	ldrb	r3, [r3, #1]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d122      	bne.n	80053ca <USB_EPStartXfer+0x51a>
 8005384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005388:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800539e:	b29b      	uxth	r3, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	4413      	add	r3, r2
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	011a      	lsls	r2, r3, #4
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053be:	61fb      	str	r3, [r7, #28]
 80053c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80053ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	891b      	ldrh	r3, [r3, #8]
 80053d6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80053de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6959      	ldr	r1, [r3, #20]
 80053e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80053f0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80053f4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	f001 fa48 	bl	800688e <USB_WritePMA>
 80053fe:	e3ee      	b.n	8005bde <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	785b      	ldrb	r3, [r3, #1]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d177      	bne.n	8005500 <USB_EPStartXfer+0x650>
 8005410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005414:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	64bb      	str	r3, [r7, #72]	; 0x48
 800541c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005420:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800542a:	b29b      	uxth	r3, r3
 800542c:	461a      	mov	r2, r3
 800542e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005430:	4413      	add	r3, r2
 8005432:	64bb      	str	r3, [r7, #72]	; 0x48
 8005434:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	011a      	lsls	r2, r3, #4
 8005442:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005444:	4413      	add	r3, r2
 8005446:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800544a:	647b      	str	r3, [r7, #68]	; 0x44
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005456:	b29a      	uxth	r2, r3
 8005458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800545a:	801a      	strh	r2, [r3, #0]
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005460:	2b3e      	cmp	r3, #62	; 0x3e
 8005462:	d921      	bls.n	80054a8 <USB_EPStartXfer+0x5f8>
 8005464:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005472:	f003 031f 	and.w	r3, r3, #31
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <USB_EPStartXfer+0x5d4>
 800547a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800547e:	3b01      	subs	r3, #1
 8005480:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005486:	881b      	ldrh	r3, [r3, #0]
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800548e:	b29b      	uxth	r3, r3
 8005490:	029b      	lsls	r3, r3, #10
 8005492:	b29b      	uxth	r3, r3
 8005494:	4313      	orrs	r3, r2
 8005496:	b29b      	uxth	r3, r3
 8005498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e056      	b.n	8005556 <USB_EPStartXfer+0x6a6>
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <USB_EPStartXfer+0x616>
 80054b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054be:	b29a      	uxth	r2, r3
 80054c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054c2:	801a      	strh	r2, [r3, #0]
 80054c4:	e047      	b.n	8005556 <USB_EPStartXfer+0x6a6>
 80054c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054ca:	085b      	lsrs	r3, r3, #1
 80054cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d004      	beq.n	80054e6 <USB_EPStartXfer+0x636>
 80054dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054e0:	3301      	adds	r3, #1
 80054e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80054e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4313      	orrs	r3, r2
 80054f8:	b29a      	uxth	r2, r3
 80054fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	e02a      	b.n	8005556 <USB_EPStartXfer+0x6a6>
 8005500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	785b      	ldrb	r3, [r3, #1]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d122      	bne.n	8005556 <USB_EPStartXfer+0x6a6>
 8005510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005514:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	653b      	str	r3, [r7, #80]	; 0x50
 800551c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800552a:	b29b      	uxth	r3, r3
 800552c:	461a      	mov	r2, r3
 800552e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005530:	4413      	add	r3, r2
 8005532:	653b      	str	r3, [r7, #80]	; 0x50
 8005534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	011a      	lsls	r2, r3, #4
 8005542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005544:	4413      	add	r3, r2
 8005546:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800554a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800554c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005550:	b29a      	uxth	r2, r3
 8005552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005554:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800555a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	891b      	ldrh	r3, [r3, #8]
 8005562:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005566:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800556a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6959      	ldr	r1, [r3, #20]
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005576:	b29b      	uxth	r3, r3
 8005578:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800557c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005580:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005584:	6800      	ldr	r0, [r0, #0]
 8005586:	f001 f982 	bl	800688e <USB_WritePMA>
            ep->xfer_buff += len;
 800558a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800558e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800559a:	441a      	add	r2, r3
 800559c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80055a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d90f      	bls.n	80055e4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80055c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a1a      	ldr	r2, [r3, #32]
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d4:	1ad2      	subs	r2, r2, r3
 80055d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	621a      	str	r2, [r3, #32]
 80055e2:	e00e      	b.n	8005602 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80055e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6a1b      	ldr	r3, [r3, #32]
 80055f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80055f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80055f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2200      	movs	r2, #0
 8005600:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	643b      	str	r3, [r7, #64]	; 0x40
 800560e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d177      	bne.n	800570e <USB_EPStartXfer+0x85e>
 800561e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005622:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	63bb      	str	r3, [r7, #56]	; 0x38
 800562a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800562e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563e:	4413      	add	r3, r2
 8005640:	63bb      	str	r3, [r7, #56]	; 0x38
 8005642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	011a      	lsls	r2, r3, #4
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	4413      	add	r3, r2
 8005654:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005658:	637b      	str	r3, [r7, #52]	; 0x34
 800565a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565c:	881b      	ldrh	r3, [r3, #0]
 800565e:	b29b      	uxth	r3, r3
 8005660:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005664:	b29a      	uxth	r2, r3
 8005666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005668:	801a      	strh	r2, [r3, #0]
 800566a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800566e:	2b3e      	cmp	r3, #62	; 0x3e
 8005670:	d921      	bls.n	80056b6 <USB_EPStartXfer+0x806>
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2b00      	cmp	r3, #0
 8005686:	d104      	bne.n	8005692 <USB_EPStartXfer+0x7e2>
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	3b01      	subs	r3, #1
 800568e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	881b      	ldrh	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	b29b      	uxth	r3, r3
 800569e:	029b      	lsls	r3, r3, #10
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4313      	orrs	r3, r2
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b2:	801a      	strh	r2, [r3, #0]
 80056b4:	e050      	b.n	8005758 <USB_EPStartXfer+0x8a8>
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <USB_EPStartXfer+0x824>
 80056be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d0:	801a      	strh	r2, [r3, #0]
 80056d2:	e041      	b.n	8005758 <USB_EPStartXfer+0x8a8>
 80056d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056d8:	085b      	lsrs	r3, r3, #1
 80056da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <USB_EPStartXfer+0x844>
 80056ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ee:	3301      	adds	r3, #1
 80056f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80056f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fe:	b29b      	uxth	r3, r3
 8005700:	029b      	lsls	r3, r3, #10
 8005702:	b29b      	uxth	r3, r3
 8005704:	4313      	orrs	r3, r2
 8005706:	b29a      	uxth	r2, r3
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	801a      	strh	r2, [r3, #0]
 800570c:	e024      	b.n	8005758 <USB_EPStartXfer+0x8a8>
 800570e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d11c      	bne.n	8005758 <USB_EPStartXfer+0x8a8>
 800571e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005722:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800572c:	b29b      	uxth	r3, r3
 800572e:	461a      	mov	r2, r3
 8005730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005732:	4413      	add	r3, r2
 8005734:	643b      	str	r3, [r7, #64]	; 0x40
 8005736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800573a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	011a      	lsls	r2, r3, #4
 8005744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005746:	4413      	add	r3, r2
 8005748:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800574e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005752:	b29a      	uxth	r2, r3
 8005754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005756:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005758:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800575c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	895b      	ldrh	r3, [r3, #10]
 8005764:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005768:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800576c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6959      	ldr	r1, [r3, #20]
 8005774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005778:	b29b      	uxth	r3, r3
 800577a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800577e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005782:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	f001 f881 	bl	800688e <USB_WritePMA>
 800578c:	e227      	b.n	8005bde <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800578e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005792:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6a1b      	ldr	r3, [r3, #32]
 800579a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800579e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	4413      	add	r3, r2
 80057b8:	881b      	ldrh	r3, [r3, #0]
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80057c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80057c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	441a      	add	r2, r3
 80057e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80057e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80057fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80057fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800580a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005814:	b29b      	uxth	r3, r3
 8005816:	461a      	mov	r2, r3
 8005818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800581a:	4413      	add	r3, r2
 800581c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800581e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005822:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	011a      	lsls	r2, r3, #4
 800582c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800582e:	4413      	add	r3, r2
 8005830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005834:	65bb      	str	r3, [r7, #88]	; 0x58
 8005836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800583a:	b29a      	uxth	r2, r3
 800583c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800583e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	891b      	ldrh	r3, [r3, #8]
 800584c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005850:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6959      	ldr	r1, [r3, #20]
 800585c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005860:	b29b      	uxth	r3, r3
 8005862:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005866:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800586a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800586e:	6800      	ldr	r0, [r0, #0]
 8005870:	f001 f80d 	bl	800688e <USB_WritePMA>
 8005874:	e1b3      	b.n	8005bde <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800587a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a1a      	ldr	r2, [r3, #32]
 8005882:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800588c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005898:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	881b      	ldrh	r3, [r3, #0]
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f000 80c6 	beq.w	8005a48 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	673b      	str	r3, [r7, #112]	; 0x70
 80058c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	785b      	ldrb	r3, [r3, #1]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d177      	bne.n	80059c8 <USB_EPStartXfer+0xb18>
 80058d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80058e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058f8:	4413      	add	r3, r2
 80058fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80058fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	011a      	lsls	r2, r3, #4
 800590a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800590c:	4413      	add	r3, r2
 800590e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005912:	667b      	str	r3, [r7, #100]	; 0x64
 8005914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	b29b      	uxth	r3, r3
 800591a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800591e:	b29a      	uxth	r2, r3
 8005920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005922:	801a      	strh	r2, [r3, #0]
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005928:	2b3e      	cmp	r3, #62	; 0x3e
 800592a:	d921      	bls.n	8005970 <USB_EPStartXfer+0xac0>
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005930:	095b      	lsrs	r3, r3, #5
 8005932:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005936:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <USB_EPStartXfer+0xa9c>
 8005942:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005946:	3b01      	subs	r3, #1
 8005948:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800594c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	b29a      	uxth	r2, r3
 8005952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005956:	b29b      	uxth	r3, r3
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	b29b      	uxth	r3, r3
 800595c:	4313      	orrs	r3, r2
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005968:	b29a      	uxth	r2, r3
 800596a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e050      	b.n	8005a12 <USB_EPStartXfer+0xb62>
 8005970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10a      	bne.n	800598e <USB_EPStartXfer+0xade>
 8005978:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005986:	b29a      	uxth	r2, r3
 8005988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598a:	801a      	strh	r2, [r3, #0]
 800598c:	e041      	b.n	8005a12 <USB_EPStartXfer+0xb62>
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <USB_EPStartXfer+0xafe>
 80059a4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059a8:	3301      	adds	r3, #1
 80059aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80059ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	029b      	lsls	r3, r3, #10
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059c4:	801a      	strh	r2, [r3, #0]
 80059c6:	e024      	b.n	8005a12 <USB_EPStartXfer+0xb62>
 80059c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	785b      	ldrb	r3, [r3, #1]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d11c      	bne.n	8005a12 <USB_EPStartXfer+0xb62>
 80059d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059ec:	4413      	add	r3, r2
 80059ee:	673b      	str	r3, [r7, #112]	; 0x70
 80059f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80059f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	011a      	lsls	r2, r3, #4
 80059fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a00:	4413      	add	r3, r2
 8005a02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a10:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	895b      	ldrh	r3, [r3, #10]
 8005a1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6959      	ldr	r1, [r3, #20]
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005a38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005a3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005a40:	6800      	ldr	r0, [r0, #0]
 8005a42:	f000 ff24 	bl	800688e <USB_WritePMA>
 8005a46:	e0ca      	b.n	8005bde <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	785b      	ldrb	r3, [r3, #1]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d177      	bne.n	8005b48 <USB_EPStartXfer+0xc98>
 8005a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a78:	4413      	add	r3, r2
 8005a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005a80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	011a      	lsls	r2, r3, #4
 8005a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a92:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a96:	881b      	ldrh	r3, [r3, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aa2:	801a      	strh	r2, [r3, #0]
 8005aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aa8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aaa:	d921      	bls.n	8005af0 <USB_EPStartXfer+0xc40>
 8005aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab0:	095b      	lsrs	r3, r3, #5
 8005ab2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aba:	f003 031f 	and.w	r3, r3, #31
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <USB_EPStartXfer+0xc1c>
 8005ac2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005acc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ace:	881b      	ldrh	r3, [r3, #0]
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	4313      	orrs	r3, r2
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e05c      	b.n	8005baa <USB_EPStartXfer+0xcfa>
 8005af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d10a      	bne.n	8005b0e <USB_EPStartXfer+0xc5e>
 8005af8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005afa:	881b      	ldrh	r3, [r3, #0]
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b06:	b29a      	uxth	r2, r3
 8005b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b0a:	801a      	strh	r2, [r3, #0]
 8005b0c:	e04d      	b.n	8005baa <USB_EPStartXfer+0xcfa>
 8005b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d004      	beq.n	8005b2e <USB_EPStartXfer+0xc7e>
 8005b24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b28:	3301      	adds	r3, #1
 8005b2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005b2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29a      	uxth	r2, r3
 8005b34:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	029b      	lsls	r3, r3, #10
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b29a      	uxth	r2, r3
 8005b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b44:	801a      	strh	r2, [r3, #0]
 8005b46:	e030      	b.n	8005baa <USB_EPStartXfer+0xcfa>
 8005b48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	785b      	ldrb	r3, [r3, #1]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d128      	bne.n	8005baa <USB_EPStartXfer+0xcfa>
 8005b58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	461a      	mov	r2, r3
 8005b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	011a      	lsls	r2, r3, #4
 8005b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b94:	4413      	add	r3, r2
 8005b96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ba8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	891b      	ldrh	r3, [r3, #8]
 8005bb6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6959      	ldr	r1, [r3, #20]
 8005bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005bd0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8005bd4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8005bd8:	6800      	ldr	r0, [r0, #0]
 8005bda:	f000 fe58 	bl	800688e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c04:	817b      	strh	r3, [r7, #10]
 8005c06:	897b      	ldrh	r3, [r7, #10]
 8005c08:	f083 0310 	eor.w	r3, r3, #16
 8005c0c:	817b      	strh	r3, [r7, #10]
 8005c0e:	897b      	ldrh	r3, [r7, #10]
 8005c10:	f083 0320 	eor.w	r3, r3, #32
 8005c14:	817b      	strh	r3, [r7, #10]
 8005c16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	441a      	add	r2, r3
 8005c30:	897b      	ldrh	r3, [r7, #10]
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
 8005c46:	f000 bcde 	b.w	8006606 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	7b1b      	ldrb	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f040 80bb 	bne.w	8005dd2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005c5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	699a      	ldr	r2, [r3, #24]
 8005c68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d917      	bls.n	8005ca8 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005c78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8005c88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	699a      	ldr	r2, [r3, #24]
 8005c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c98:	1ad2      	subs	r2, r2, r3
 8005c9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	619a      	str	r2, [r3, #24]
 8005ca6:	e00e      	b.n	8005cc6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8005cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005cea:	4413      	add	r3, r2
 8005cec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005cf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005cf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	781b      	ldrb	r3, [r3, #0]
 8005cfc:	011a      	lsls	r2, r3, #4
 8005cfe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d24:	2b3e      	cmp	r3, #62	; 0x3e
 8005d26:	d924      	bls.n	8005d72 <USB_EPStartXfer+0xec2>
 8005d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d36:	f003 031f 	and.w	r3, r3, #31
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USB_EPStartXfer+0xe98>
 8005d3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d42:	3b01      	subs	r3, #1
 8005d44:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d4c:	881b      	ldrh	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	029b      	lsls	r3, r3, #10
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d6c:	801a      	strh	r2, [r3, #0]
 8005d6e:	f000 bc10 	b.w	8006592 <USB_EPStartXfer+0x16e2>
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <USB_EPStartXfer+0xee4>
 8005d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e3fe      	b.n	8006592 <USB_EPStartXfer+0x16e2>
 8005d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d98:	085b      	lsrs	r3, r3, #1
 8005d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <USB_EPStartXfer+0xf04>
 8005daa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dae:	3301      	adds	r3, #1
 8005db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	029b      	lsls	r3, r3, #10
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dce:	801a      	strh	r2, [r3, #0]
 8005dd0:	e3df      	b.n	8006592 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	f040 8218 	bne.w	8006214 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005de4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005de8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f040 809d 	bne.w	8005f30 <USB_EPStartXfer+0x1080>
 8005df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005dfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e32:	4413      	add	r3, r2
 8005e34:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e48:	b29a      	uxth	r2, r3
 8005e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e4e:	801a      	strh	r2, [r3, #0]
 8005e50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5e:	d92b      	bls.n	8005eb8 <USB_EPStartXfer+0x1008>
 8005e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005e76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 031f 	and.w	r3, r3, #31
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d104      	bne.n	8005e90 <USB_EPStartXfer+0xfe0>
 8005e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005e94:	881b      	ldrh	r3, [r3, #0]
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	029b      	lsls	r3, r3, #10
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005eb4:	801a      	strh	r2, [r3, #0]
 8005eb6:	e070      	b.n	8005f9a <USB_EPStartXfer+0x10ea>
 8005eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10c      	bne.n	8005ee2 <USB_EPStartXfer+0x1032>
 8005ec8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005ede:	801a      	strh	r2, [r3, #0]
 8005ee0:	e05b      	b.n	8005f9a <USB_EPStartXfer+0x10ea>
 8005ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d004      	beq.n	8005f12 <USB_EPStartXfer+0x1062>
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	029b      	lsls	r3, r3, #10
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	4313      	orrs	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f2c:	801a      	strh	r2, [r3, #0]
 8005f2e:	e034      	b.n	8005f9a <USB_EPStartXfer+0x10ea>
 8005f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	785b      	ldrb	r3, [r3, #1]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d12c      	bne.n	8005f9a <USB_EPStartXfer+0x10ea>
 8005f40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f64:	4413      	add	r3, r2
 8005f66:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	011a      	lsls	r2, r3, #4
 8005f78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f98:	801a      	strh	r2, [r3, #0]
 8005f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005f9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005fa8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	785b      	ldrb	r3, [r3, #1]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f040 809d 	bne.w	80060f4 <USB_EPStartXfer+0x1244>
 8005fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	461a      	mov	r2, r3
 8005fda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fde:	4413      	add	r3, r2
 8005fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005fe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	011a      	lsls	r2, r3, #4
 8005ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ffc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006000:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800600c:	b29a      	uxth	r2, r3
 800600e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006012:	801a      	strh	r2, [r3, #0]
 8006014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	2b3e      	cmp	r3, #62	; 0x3e
 8006022:	d92b      	bls.n	800607c <USB_EPStartXfer+0x11cc>
 8006024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	095b      	lsrs	r3, r3, #5
 8006032:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800603a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <USB_EPStartXfer+0x11a4>
 800604a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604e:	3b01      	subs	r3, #1
 8006050:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006054:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006058:	881b      	ldrh	r3, [r3, #0]
 800605a:	b29a      	uxth	r2, r3
 800605c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006060:	b29b      	uxth	r3, r3
 8006062:	029b      	lsls	r3, r3, #10
 8006064:	b29b      	uxth	r3, r3
 8006066:	4313      	orrs	r3, r2
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006078:	801a      	strh	r2, [r3, #0]
 800607a:	e069      	b.n	8006150 <USB_EPStartXfer+0x12a0>
 800607c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d10c      	bne.n	80060a6 <USB_EPStartXfer+0x11f6>
 800608c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006090:	881b      	ldrh	r3, [r3, #0]
 8006092:	b29b      	uxth	r3, r3
 8006094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a2:	801a      	strh	r2, [r3, #0]
 80060a4:	e054      	b.n	8006150 <USB_EPStartXfer+0x12a0>
 80060a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	085b      	lsrs	r3, r3, #1
 80060b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <USB_EPStartXfer+0x1226>
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	3301      	adds	r3, #1
 80060d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80060d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	029b      	lsls	r3, r3, #10
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	4313      	orrs	r3, r2
 80060ea:	b29a      	uxth	r2, r3
 80060ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060f0:	801a      	strh	r2, [r3, #0]
 80060f2:	e02d      	b.n	8006150 <USB_EPStartXfer+0x12a0>
 80060f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80060f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	785b      	ldrb	r3, [r3, #1]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d125      	bne.n	8006150 <USB_EPStartXfer+0x12a0>
 8006104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006112:	b29b      	uxth	r3, r3
 8006114:	461a      	mov	r2, r3
 8006116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800611a:	4413      	add	r3, r2
 800611c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006124:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	011a      	lsls	r2, r3, #4
 800612e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006132:	4413      	add	r3, r2
 8006134:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800613c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	b29a      	uxth	r2, r3
 800614a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800614e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69db      	ldr	r3, [r3, #28]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8218 	beq.w	8006592 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006166:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006182:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006186:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <USB_EPStartXfer+0x12ea>
 800618e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8006192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10d      	bne.n	80061b6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800619a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800619e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 81f5 	bne.w	8006592 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80061a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80061ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 81ee 	bne.w	8006592 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80061b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061dc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80061e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80061ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	441a      	add	r2, r3
 80061fa:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80061fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800620a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800620e:	b29b      	uxth	r3, r3
 8006210:	8013      	strh	r3, [r2, #0]
 8006212:	e1be      	b.n	8006592 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	78db      	ldrb	r3, [r3, #3]
 8006220:	2b01      	cmp	r3, #1
 8006222:	f040 81b4 	bne.w	800658e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006226:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800622a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	d917      	bls.n	8006272 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8006242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8006252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	619a      	str	r2, [r3, #24]
 8006270:	e00e      	b.n	8006290 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8006272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8006282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2200      	movs	r2, #0
 800628e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006294:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 8085 	bne.w	80063ac <USB_EPStartXfer+0x14fc>
 80062a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062be:	b29b      	uxth	r3, r3
 80062c0:	461a      	mov	r2, r3
 80062c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062c6:	4413      	add	r3, r2
 80062c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80062cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80062d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	011a      	lsls	r2, r3, #4
 80062da:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062de:	4413      	add	r3, r2
 80062e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80062e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062fa:	801a      	strh	r2, [r3, #0]
 80062fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006300:	2b3e      	cmp	r3, #62	; 0x3e
 8006302:	d923      	bls.n	800634c <USB_EPStartXfer+0x149c>
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800630e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <USB_EPStartXfer+0x1474>
 800631a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800631e:	3b01      	subs	r3, #1
 8006320:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006324:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	b29a      	uxth	r2, r3
 800632c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006330:	b29b      	uxth	r3, r3
 8006332:	029b      	lsls	r3, r3, #10
 8006334:	b29b      	uxth	r3, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	b29b      	uxth	r3, r3
 800633a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800633e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006342:	b29a      	uxth	r2, r3
 8006344:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006348:	801a      	strh	r2, [r3, #0]
 800634a:	e060      	b.n	800640e <USB_EPStartXfer+0x155e>
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10c      	bne.n	800636e <USB_EPStartXfer+0x14be>
 8006354:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	b29b      	uxth	r3, r3
 800635c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006364:	b29a      	uxth	r2, r3
 8006366:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800636a:	801a      	strh	r2, [r3, #0]
 800636c:	e04f      	b.n	800640e <USB_EPStartXfer+0x155e>
 800636e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006372:	085b      	lsrs	r3, r3, #1
 8006374:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d004      	beq.n	800638e <USB_EPStartXfer+0x14de>
 8006384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006388:	3301      	adds	r3, #1
 800638a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800638e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006392:	881b      	ldrh	r3, [r3, #0]
 8006394:	b29a      	uxth	r2, r3
 8006396:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800639a:	b29b      	uxth	r3, r3
 800639c:	029b      	lsls	r3, r3, #10
 800639e:	b29b      	uxth	r3, r3
 80063a0:	4313      	orrs	r3, r2
 80063a2:	b29a      	uxth	r2, r3
 80063a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e030      	b.n	800640e <USB_EPStartXfer+0x155e>
 80063ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d128      	bne.n	800640e <USB_EPStartXfer+0x155e>
 80063bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d8:	b29b      	uxth	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e0:	4413      	add	r3, r2
 80063e2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80063e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80063ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	011a      	lsls	r2, r3, #4
 80063f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f8:	4413      	add	r3, r2
 80063fa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006412:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800641c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b00      	cmp	r3, #0
 800642a:	f040 8085 	bne.w	8006538 <USB_EPStartXfer+0x1688>
 800642e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006432:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800643c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006452:	4413      	add	r3, r2
 8006454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	011a      	lsls	r2, r3, #4
 8006466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800646a:	4413      	add	r3, r2
 800646c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006470:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006480:	b29a      	uxth	r2, r3
 8006482:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648c:	2b3e      	cmp	r3, #62	; 0x3e
 800648e:	d923      	bls.n	80064d8 <USB_EPStartXfer+0x1628>
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <USB_EPStartXfer+0x1600>
 80064a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064aa:	3b01      	subs	r3, #1
 80064ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80064b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064b4:	881b      	ldrh	r3, [r3, #0]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064bc:	b29b      	uxth	r3, r3
 80064be:	029b      	lsls	r3, r3, #10
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	4313      	orrs	r3, r2
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064ce:	b29a      	uxth	r2, r3
 80064d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064d4:	801a      	strh	r2, [r3, #0]
 80064d6:	e05c      	b.n	8006592 <USB_EPStartXfer+0x16e2>
 80064d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10c      	bne.n	80064fa <USB_EPStartXfer+0x164a>
 80064e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f0:	b29a      	uxth	r2, r3
 80064f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80064f6:	801a      	strh	r2, [r3, #0]
 80064f8:	e04b      	b.n	8006592 <USB_EPStartXfer+0x16e2>
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d004      	beq.n	800651a <USB_EPStartXfer+0x166a>
 8006510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006514:	3301      	adds	r3, #1
 8006516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800651a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29a      	uxth	r2, r3
 8006522:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006526:	b29b      	uxth	r3, r3
 8006528:	029b      	lsls	r3, r3, #10
 800652a:	b29b      	uxth	r3, r3
 800652c:	4313      	orrs	r3, r2
 800652e:	b29a      	uxth	r2, r3
 8006530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006534:	801a      	strh	r2, [r3, #0]
 8006536:	e02c      	b.n	8006592 <USB_EPStartXfer+0x16e2>
 8006538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800653c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	785b      	ldrb	r3, [r3, #1]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d124      	bne.n	8006592 <USB_EPStartXfer+0x16e2>
 8006548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800654c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006556:	b29b      	uxth	r3, r3
 8006558:	461a      	mov	r2, r3
 800655a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800655e:	4413      	add	r3, r2
 8006560:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	011a      	lsls	r2, r3, #4
 8006572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006576:	4413      	add	r3, r2
 8006578:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800657c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006580:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006584:	b29a      	uxth	r2, r3
 8006586:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800658a:	801a      	strh	r2, [r3, #0]
 800658c:	e001      	b.n	8006592 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e03a      	b.n	8006608 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006592:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80065bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80065c4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80065c8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80065d0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80065d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80065e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	441a      	add	r2, r3
 80065ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006602:	b29b      	uxth	r3, r3
 8006604:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006606:	2300      	movs	r3, #0
}
 8006608:	4618      	mov	r0, r3
 800660a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006612:	b480      	push	{r7}
 8006614:	b085      	sub	sp, #20
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d020      	beq.n	8006666 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	b29b      	uxth	r3, r3
 8006632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	81bb      	strh	r3, [r7, #12]
 800663c:	89bb      	ldrh	r3, [r7, #12]
 800663e:	f083 0310 	eor.w	r3, r3, #16
 8006642:	81bb      	strh	r3, [r7, #12]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	441a      	add	r2, r3
 800664e:	89bb      	ldrh	r3, [r7, #12]
 8006650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800665c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006660:	b29b      	uxth	r3, r3
 8006662:	8013      	strh	r3, [r2, #0]
 8006664:	e01f      	b.n	80066a6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	81fb      	strh	r3, [r7, #14]
 800667e:	89fb      	ldrh	r3, [r7, #14]
 8006680:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006684:	81fb      	strh	r3, [r7, #14]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	441a      	add	r2, r3
 8006690:	89fb      	ldrh	r3, [r7, #14]
 8006692:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006696:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800669a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800669e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80066a6:	2300      	movs	r3, #0
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3714      	adds	r7, #20
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr

080066b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b087      	sub	sp, #28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	7b1b      	ldrb	r3, [r3, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f040 809d 	bne.w	8006800 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d04c      	beq.n	8006768 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	781b      	ldrb	r3, [r3, #0]
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	881b      	ldrh	r3, [r3, #0]
 80066da:	823b      	strh	r3, [r7, #16]
 80066dc:	8a3b      	ldrh	r3, [r7, #16]
 80066de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01b      	beq.n	800671e <USB_EPClearStall+0x6c>
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066fc:	81fb      	strh	r3, [r7, #14]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	441a      	add	r2, r3
 8006708:	89fb      	ldrh	r3, [r7, #14]
 800670a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800670e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006716:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800671a:	b29b      	uxth	r3, r3
 800671c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	78db      	ldrb	r3, [r3, #3]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d06c      	beq.n	8006800 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4413      	add	r3, r2
 8006730:	881b      	ldrh	r3, [r3, #0]
 8006732:	b29b      	uxth	r3, r3
 8006734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	81bb      	strh	r3, [r7, #12]
 800673e:	89bb      	ldrh	r3, [r7, #12]
 8006740:	f083 0320 	eor.w	r3, r3, #32
 8006744:	81bb      	strh	r3, [r7, #12]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	441a      	add	r2, r3
 8006750:	89bb      	ldrh	r3, [r7, #12]
 8006752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800675a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006762:	b29b      	uxth	r3, r3
 8006764:	8013      	strh	r3, [r2, #0]
 8006766:	e04b      	b.n	8006800 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	82fb      	strh	r3, [r7, #22]
 8006776:	8afb      	ldrh	r3, [r7, #22]
 8006778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01b      	beq.n	80067b8 <USB_EPClearStall+0x106>
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	82bb      	strh	r3, [r7, #20]
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	441a      	add	r2, r3
 80067a2:	8abb      	ldrh	r3, [r7, #20]
 80067a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	881b      	ldrh	r3, [r3, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ce:	827b      	strh	r3, [r7, #18]
 80067d0:	8a7b      	ldrh	r3, [r7, #18]
 80067d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80067d6:	827b      	strh	r3, [r7, #18]
 80067d8:	8a7b      	ldrh	r3, [r7, #18]
 80067da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80067de:	827b      	strh	r3, [r7, #18]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	441a      	add	r2, r3
 80067ea:	8a7b      	ldrh	r3, [r7, #18]
 80067ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	bc80      	pop	{r7}
 800680a:	4770      	bx	lr

0800680c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	370c      	adds	r7, #12
 800682c:	46bd      	mov	sp, r7
 800682e:	bc80      	pop	{r7}
 8006830:	4770      	bx	lr

08006832 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	bc80      	pop	{r7}
 8006844:	4770      	bx	lr

08006846 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	bc80      	pop	{r7}
 8006858:	4770      	bx	lr

0800685a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800685a:	b480      	push	{r7}
 800685c:	b085      	sub	sp, #20
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006868:	b29b      	uxth	r3, r3
 800686a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	bc80      	pop	{r7}
 800688c:	4770      	bx	lr

0800688e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800688e:	b480      	push	{r7}
 8006890:	b08b      	sub	sp, #44	; 0x2c
 8006892:	af00      	add	r7, sp, #0
 8006894:	60f8      	str	r0, [r7, #12]
 8006896:	60b9      	str	r1, [r7, #8]
 8006898:	4611      	mov	r1, r2
 800689a:	461a      	mov	r2, r3
 800689c:	460b      	mov	r3, r1
 800689e:	80fb      	strh	r3, [r7, #6]
 80068a0:	4613      	mov	r3, r2
 80068a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80068a4:	88bb      	ldrh	r3, [r7, #4]
 80068a6:	3301      	adds	r3, #1
 80068a8:	085b      	lsrs	r3, r3, #1
 80068aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80068b4:	88fb      	ldrh	r3, [r7, #6]
 80068b6:	005a      	lsls	r2, r3, #1
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068c0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	627b      	str	r3, [r7, #36]	; 0x24
 80068c6:	e01e      	b.n	8006906 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	3301      	adds	r3, #1
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	021b      	lsls	r3, r3, #8
 80068d6:	b21a      	sxth	r2, r3
 80068d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80068dc:	4313      	orrs	r3, r2
 80068de:	b21b      	sxth	r3, r3
 80068e0:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80068e2:	6a3b      	ldr	r3, [r7, #32]
 80068e4:	8a7a      	ldrh	r2, [r7, #18]
 80068e6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	3302      	adds	r3, #2
 80068ec:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	3302      	adds	r3, #2
 80068f2:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3301      	adds	r3, #1
 80068f8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	3301      	adds	r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006902:	3b01      	subs	r3, #1
 8006904:	627b      	str	r3, [r7, #36]	; 0x24
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1dd      	bne.n	80068c8 <USB_WritePMA+0x3a>
  }
}
 800690c:	bf00      	nop
 800690e:	bf00      	nop
 8006910:	372c      	adds	r7, #44	; 0x2c
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006918:	b480      	push	{r7}
 800691a:	b08b      	sub	sp, #44	; 0x2c
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	4611      	mov	r1, r2
 8006924:	461a      	mov	r2, r3
 8006926:	460b      	mov	r3, r1
 8006928:	80fb      	strh	r3, [r7, #6]
 800692a:	4613      	mov	r3, r2
 800692c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800692e:	88bb      	ldrh	r3, [r7, #4]
 8006930:	085b      	lsrs	r3, r3, #1
 8006932:	b29b      	uxth	r3, r3
 8006934:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800693e:	88fb      	ldrh	r3, [r7, #6]
 8006940:	005a      	lsls	r2, r3, #1
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800694a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	e01b      	b.n	800698a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	881b      	ldrh	r3, [r3, #0]
 8006956:	b29b      	uxth	r3, r3
 8006958:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	3302      	adds	r3, #2
 800695e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	b2da      	uxtb	r2, r3
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	3301      	adds	r3, #1
 800696c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	0a1b      	lsrs	r3, r3, #8
 8006972:	b2da      	uxtb	r2, r3
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	3301      	adds	r3, #1
 800697c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	3302      	adds	r3, #2
 8006982:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	3b01      	subs	r3, #1
 8006988:	627b      	str	r3, [r7, #36]	; 0x24
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1e0      	bne.n	8006952 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006990:	88bb      	ldrh	r3, [r7, #4]
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b29b      	uxth	r3, r3
 8006998:	2b00      	cmp	r3, #0
 800699a:	d007      	beq.n	80069ac <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	881b      	ldrh	r3, [r3, #0]
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	b2da      	uxtb	r2, r3
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	701a      	strb	r2, [r3, #0]
  }
}
 80069ac:	bf00      	nop
 80069ae:	372c      	adds	r7, #44	; 0x2c
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bc80      	pop	{r7}
 80069b4:	4770      	bx	lr

080069b6 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80069c2:	2304      	movs	r3, #4
 80069c4:	2203      	movs	r2, #3
 80069c6:	2181      	movs	r1, #129	; 0x81
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fc84 	bl	80082d6 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80069d4:	2010      	movs	r0, #16
 80069d6:	f001 fd93 	bl	8008500 <USBD_static_malloc>
 80069da:	4602      	mov	r2, r0
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 80069ec:	2302      	movs	r3, #2
 80069ee:	e005      	b.n	80069fc <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f6:	2200      	movs	r2, #0
 80069f8:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3708      	adds	r7, #8
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006a10:	2181      	movs	r1, #129	; 0x81
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fc85 	bl	8008322 <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d009      	beq.n	8006a3c <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fd72 	bl	8008518 <USBD_static_free>
    pdev->pClassData = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a58:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d045      	beq.n	8006b02 <USBD_HID_Setup+0xba>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f040 80d3 	bne.w	8006c22 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	785b      	ldrb	r3, [r3, #1]
 8006a80:	3b02      	subs	r3, #2
 8006a82:	2b09      	cmp	r3, #9
 8006a84:	d835      	bhi.n	8006af2 <USBD_HID_Setup+0xaa>
 8006a86:	a201      	add	r2, pc, #4	; (adr r2, 8006a8c <USBD_HID_Setup+0x44>)
 8006a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8c:	08006ae3 	.word	0x08006ae3
 8006a90:	08006ac3 	.word	0x08006ac3
 8006a94:	08006af3 	.word	0x08006af3
 8006a98:	08006af3 	.word	0x08006af3
 8006a9c:	08006af3 	.word	0x08006af3
 8006aa0:	08006af3 	.word	0x08006af3
 8006aa4:	08006af3 	.word	0x08006af3
 8006aa8:	08006af3 	.word	0x08006af3
 8006aac:	08006ad1 	.word	0x08006ad1
 8006ab0:	08006ab5 	.word	0x08006ab5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	885b      	ldrh	r3, [r3, #2]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	601a      	str	r2, [r3, #0]
          break;
 8006ac0:	e01e      	b.n	8006b00 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f001 f944 	bl	8007d56 <USBD_CtlSendData>
          break;
 8006ace:	e017      	b.n	8006b00 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	885b      	ldrh	r3, [r3, #2]
 8006ad4:	0a1b      	lsrs	r3, r3, #8
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	461a      	mov	r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	605a      	str	r2, [r3, #4]
          break;
 8006ae0:	e00e      	b.n	8006b00 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3304      	adds	r3, #4
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f001 f933 	bl	8007d56 <USBD_CtlSendData>
          break;
 8006af0:	e006      	b.n	8006b00 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006af2:	6839      	ldr	r1, [r7, #0]
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f001 f8c4 	bl	8007c82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006afa:	2302      	movs	r3, #2
 8006afc:	75fb      	strb	r3, [r7, #23]
          break;
 8006afe:	bf00      	nop
      }
      break;
 8006b00:	e096      	b.n	8006c30 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	f200 8083 	bhi.w	8006c12 <USBD_HID_Setup+0x1ca>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <USBD_HID_Setup+0xcc>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b45 	.word	0x08006b45
 8006b18:	08006c13 	.word	0x08006c13
 8006b1c:	08006c13 	.word	0x08006c13
 8006b20:	08006c13 	.word	0x08006c13
 8006b24:	08006c13 	.word	0x08006c13
 8006b28:	08006c13 	.word	0x08006c13
 8006b2c:	08006b6d 	.word	0x08006b6d
 8006b30:	08006c13 	.word	0x08006c13
 8006b34:	08006c13 	.word	0x08006c13
 8006b38:	08006c13 	.word	0x08006c13
 8006b3c:	08006bc5 	.word	0x08006bc5
 8006b40:	08006bed 	.word	0x08006bed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d107      	bne.n	8006b5e <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006b4e:	f107 030e 	add.w	r3, r7, #14
 8006b52:	2202      	movs	r2, #2
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f8fd 	bl	8007d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b5c:	e060      	b.n	8006c20 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f001 f88e 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b66:	2302      	movs	r3, #2
 8006b68:	75fb      	strb	r3, [r7, #23]
          break;
 8006b6a:	e059      	b.n	8006c20 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	885b      	ldrh	r3, [r3, #2]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b22      	cmp	r3, #34	; 0x22
 8006b76:	d108      	bne.n	8006b8a <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	88db      	ldrh	r3, [r3, #6]
 8006b7c:	2b3f      	cmp	r3, #63	; 0x3f
 8006b7e:	bf28      	it	cs
 8006b80:	233f      	movcs	r3, #63	; 0x3f
 8006b82:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8006b84:	4b2d      	ldr	r3, [pc, #180]	; (8006c3c <USBD_HID_Setup+0x1f4>)
 8006b86:	61bb      	str	r3, [r7, #24]
 8006b88:	e015      	b.n	8006bb6 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	0a1b      	lsrs	r3, r3, #8
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b21      	cmp	r3, #33	; 0x21
 8006b94:	d108      	bne.n	8006ba8 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8006b96:	4b2a      	ldr	r3, [pc, #168]	; (8006c40 <USBD_HID_Setup+0x1f8>)
 8006b98:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	88db      	ldrh	r3, [r3, #6]
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	bf28      	it	cs
 8006ba2:	2309      	movcs	r3, #9
 8006ba4:	83fb      	strh	r3, [r7, #30]
 8006ba6:	e006      	b.n	8006bb6 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f001 f869 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006bb0:	2302      	movs	r3, #2
 8006bb2:	75fb      	strb	r3, [r7, #23]
            break;
 8006bb4:	e034      	b.n	8006c20 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8006bb6:	8bfb      	ldrh	r3, [r7, #30]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	69b9      	ldr	r1, [r7, #24]
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 f8ca 	bl	8007d56 <USBD_CtlSendData>
          break;
 8006bc2:	e02d      	b.n	8006c20 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bca:	2b03      	cmp	r3, #3
 8006bcc:	d107      	bne.n	8006bde <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 f8bd 	bl	8007d56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bdc:	e020      	b.n	8006c20 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f001 f84e 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006be6:	2302      	movs	r3, #2
 8006be8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bea:	e019      	b.n	8006c20 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d106      	bne.n	8006c04 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	885b      	ldrh	r3, [r3, #2]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c02:	e00d      	b.n	8006c20 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006c04:	6839      	ldr	r1, [r7, #0]
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 f83b 	bl	8007c82 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	75fb      	strb	r3, [r7, #23]
          break;
 8006c10:	e006      	b.n	8006c20 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8006c12:	6839      	ldr	r1, [r7, #0]
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f001 f834 	bl	8007c82 <USBD_CtlError>
          ret = USBD_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c1e:	bf00      	nop
      }
      break;
 8006c20:	e006      	b.n	8006c30 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f82c 	bl	8007c82 <USBD_CtlError>
      ret = USBD_FAIL;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c2e:	bf00      	nop
  }

  return ret;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3720      	adds	r7, #32
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	200000c8 	.word	0x200000c8
 8006c40:	200000b0 	.word	0x200000b0

08006c44 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c58:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	d10c      	bne.n	8006c7e <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	7b1b      	ldrb	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d108      	bne.n	8006c7e <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	68ba      	ldr	r2, [r7, #8]
 8006c76:	2181      	movs	r1, #129	; 0x81
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f001 fbfa 	bl	8008472 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2222      	movs	r2, #34	; 0x22
 8006c94:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8006c96:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bc80      	pop	{r7}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	20000044 	.word	0x20000044

08006ca8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2222      	movs	r2, #34	; 0x22
 8006cb4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8006cb6:	4b03      	ldr	r3, [pc, #12]	; (8006cc4 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	20000068 	.word	0x20000068

08006cc8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2222      	movs	r2, #34	; 0x22
 8006cd4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8006cd6:	4b03      	ldr	r3, [pc, #12]	; (8006ce4 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	2000008c 	.word	0x2000008c

08006ce8 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bc80      	pop	{r7}
 8006d08:	4770      	bx	lr
	...

08006d0c <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	220a      	movs	r2, #10
 8006d18:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006d1a:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bc80      	pop	{r7}
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	200000bc 	.word	0x200000bc

08006d2c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d101      	bne.n	8006d44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006d40:	2302      	movs	r3, #2
 8006d42:	e01a      	b.n	8006d7a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d003      	beq.n	8006d56 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	79fa      	ldrb	r2, [r7, #7]
 8006d70:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f001 fa4c 	bl	8008210 <USBD_LL_Init>

  return USBD_OK;
 8006d78:	2300      	movs	r3, #0
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3710      	adds	r7, #16
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}

08006d82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b085      	sub	sp, #20
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]
 8006d8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d006      	beq.n	8006da4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	683a      	ldr	r2, [r7, #0]
 8006d9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
 8006da2:	e001      	b.n	8006da8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006da4:	2302      	movs	r3, #2
 8006da6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bc80      	pop	{r7}
 8006db2:	4770      	bx	lr

08006db4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f001 fa6f 	bl	80082a0 <USBD_LL_Start>

  return USBD_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bc80      	pop	{r7}
 8006dde:	4770      	bx	lr

08006de0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	460b      	mov	r3, r1
 8006dea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006dec:	2302      	movs	r3, #2
 8006dee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00c      	beq.n	8006e14 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	78fa      	ldrb	r2, [r7, #3]
 8006e04:	4611      	mov	r1, r2
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4798      	blx	r3
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d101      	bne.n	8006e14 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
 8006e26:	460b      	mov	r3, r1
 8006e28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	78fa      	ldrb	r2, [r7, #3]
 8006e34:	4611      	mov	r1, r2
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3

  return USBD_OK;
 8006e3a:	2300      	movs	r3, #0
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e54:	6839      	ldr	r1, [r7, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fed7 	bl	8007c0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006e78:	f003 031f 	and.w	r3, r3, #31
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d016      	beq.n	8006eae <USBD_LL_SetupStage+0x6a>
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d81c      	bhi.n	8006ebe <USBD_LL_SetupStage+0x7a>
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d002      	beq.n	8006e8e <USBD_LL_SetupStage+0x4a>
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d008      	beq.n	8006e9e <USBD_LL_SetupStage+0x5a>
 8006e8c:	e017      	b.n	8006ebe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f9ca 	bl	8007230 <USBD_StdDevReq>
      break;
 8006e9c:	e01a      	b.n	8006ed4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fa2c 	bl	8007304 <USBD_StdItfReq>
      break;
 8006eac:	e012      	b.n	8006ed4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006eb4:	4619      	mov	r1, r3
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fa6c 	bl	8007394 <USBD_StdEPReq>
      break;
 8006ebc:	e00a      	b.n	8006ed4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f001 fa47 	bl	8008360 <USBD_LL_StallEP>
      break;
 8006ed2:	bf00      	nop
  }

  return USBD_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b086      	sub	sp, #24
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	607a      	str	r2, [r7, #4]
 8006eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006eec:	7afb      	ldrb	r3, [r7, #11]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d14b      	bne.n	8006f8a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ef8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d134      	bne.n	8006f6e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	68da      	ldr	r2, [r3, #12]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d919      	bls.n	8006f44 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	1ad2      	subs	r2, r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	68da      	ldr	r2, [r3, #12]
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d203      	bcs.n	8006f32 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	e002      	b.n	8006f38 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 ff38 	bl	8007db2 <USBD_CtlContinueRx>
 8006f42:	e038      	b.n	8006fb6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	d105      	bne.n	8006f66 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 ff35 	bl	8007dd6 <USBD_CtlSendStatus>
 8006f6c:	e023      	b.n	8006fb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f74:	2b05      	cmp	r3, #5
 8006f76:	d11e      	bne.n	8006fb6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006f80:	2100      	movs	r1, #0
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f001 f9ec 	bl	8008360 <USBD_LL_StallEP>
 8006f88:	e015      	b.n	8006fb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00d      	beq.n	8006fb2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006f9c:	2b03      	cmp	r3, #3
 8006f9e:	d108      	bne.n	8006fb2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	7afa      	ldrb	r2, [r7, #11]
 8006faa:	4611      	mov	r1, r2
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	4798      	blx	r3
 8006fb0:	e001      	b.n	8006fb6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006fb2:	2302      	movs	r3, #2
 8006fb4:	e000      	b.n	8006fb8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006fce:	7afb      	ldrb	r3, [r7, #11]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d17f      	bne.n	80070d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	3314      	adds	r3, #20
 8006fd8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006fe0:	2b02      	cmp	r3, #2
 8006fe2:	d15c      	bne.n	800709e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	68da      	ldr	r2, [r3, #12]
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d915      	bls.n	800701c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	68da      	ldr	r2, [r3, #12]
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	1ad2      	subs	r2, r2, r3
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	b29b      	uxth	r3, r3
 8007004:	461a      	mov	r2, r3
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fec0 	bl	8007d8e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fa4f 	bl	80084b8 <USBD_LL_PrepareReceive>
 800701a:	e04e      	b.n	80070ba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	6912      	ldr	r2, [r2, #16]
 8007024:	fbb3 f1f2 	udiv	r1, r3, r2
 8007028:	fb01 f202 	mul.w	r2, r1, r2
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d11c      	bne.n	800706c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800703a:	429a      	cmp	r2, r3
 800703c:	d316      	bcc.n	800706c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	689a      	ldr	r2, [r3, #8]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007048:	429a      	cmp	r2, r3
 800704a:	d20f      	bcs.n	800706c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800704c:	2200      	movs	r2, #0
 800704e:	2100      	movs	r1, #0
 8007050:	68f8      	ldr	r0, [r7, #12]
 8007052:	f000 fe9c 	bl	8007d8e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800705e:	2300      	movs	r3, #0
 8007060:	2200      	movs	r2, #0
 8007062:	2100      	movs	r1, #0
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f001 fa27 	bl	80084b8 <USBD_LL_PrepareReceive>
 800706a:	e026      	b.n	80070ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00a      	beq.n	800708e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800707e:	2b03      	cmp	r3, #3
 8007080:	d105      	bne.n	800708e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800708e:	2180      	movs	r1, #128	; 0x80
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f001 f965 	bl	8008360 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 feb0 	bl	8007dfc <USBD_CtlReceiveStatus>
 800709c:	e00d      	b.n	80070ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d004      	beq.n	80070b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 f953 	bl	8008360 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d11d      	bne.n	8007100 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80070c4:	68f8      	ldr	r0, [r7, #12]
 80070c6:	f7ff fe81 	bl	8006dcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80070d2:	e015      	b.n	8007100 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d00d      	beq.n	80070fc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d108      	bne.n	80070fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	7afa      	ldrb	r2, [r7, #11]
 80070f4:	4611      	mov	r1, r2
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	4798      	blx	r3
 80070fa:	e001      	b.n	8007100 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070fc:	2302      	movs	r3, #2
 80070fe:	e000      	b.n	8007102 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007112:	2340      	movs	r3, #64	; 0x40
 8007114:	2200      	movs	r2, #0
 8007116:	2100      	movs	r1, #0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f001 f8dc 	bl	80082d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2201      	movs	r2, #1
 8007122:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2240      	movs	r2, #64	; 0x40
 800712a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800712e:	2340      	movs	r3, #64	; 0x40
 8007130:	2200      	movs	r2, #0
 8007132:	2180      	movs	r1, #128	; 0x80
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 f8ce 	bl	80082d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2240      	movs	r2, #64	; 0x40
 8007144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	6852      	ldr	r2, [r2, #4]
 800717a:	b2d2      	uxtb	r2, r2
 800717c:	4611      	mov	r1, r2
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	4798      	blx	r3
  }

  return USBD_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	460b      	mov	r3, r1
 8007196:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	78fa      	ldrb	r2, [r7, #3]
 800719c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr

080071aa <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2204      	movs	r2, #4
 80071c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr

080071d2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d105      	bne.n	80071f0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071f0:	2300      	movs	r3, #0
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	370c      	adds	r7, #12
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bc80      	pop	{r7}
 80071fa:	4770      	bx	lr

080071fc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800720a:	2b03      	cmp	r3, #3
 800720c:	d10b      	bne.n	8007226 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007214:	69db      	ldr	r3, [r3, #28]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d005      	beq.n	8007256 <USBD_StdDevReq+0x26>
 800724a:	2b40      	cmp	r3, #64	; 0x40
 800724c:	d84f      	bhi.n	80072ee <USBD_StdDevReq+0xbe>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d009      	beq.n	8007266 <USBD_StdDevReq+0x36>
 8007252:	2b20      	cmp	r3, #32
 8007254:	d14b      	bne.n	80072ee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	4798      	blx	r3
      break;
 8007264:	e048      	b.n	80072f8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	785b      	ldrb	r3, [r3, #1]
 800726a:	2b09      	cmp	r3, #9
 800726c:	d839      	bhi.n	80072e2 <USBD_StdDevReq+0xb2>
 800726e:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <USBD_StdDevReq+0x44>)
 8007270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007274:	080072c5 	.word	0x080072c5
 8007278:	080072d9 	.word	0x080072d9
 800727c:	080072e3 	.word	0x080072e3
 8007280:	080072cf 	.word	0x080072cf
 8007284:	080072e3 	.word	0x080072e3
 8007288:	080072a7 	.word	0x080072a7
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072e3 	.word	0x080072e3
 8007294:	080072bb 	.word	0x080072bb
 8007298:	080072b1 	.word	0x080072b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800729c:	6839      	ldr	r1, [r7, #0]
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f000 f9dc 	bl	800765c <USBD_GetDescriptor>
          break;
 80072a4:	e022      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fb3f 	bl	800792c <USBD_SetAddress>
          break;
 80072ae:	e01d      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80072b0:	6839      	ldr	r1, [r7, #0]
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 fb7e 	bl	80079b4 <USBD_SetConfig>
          break;
 80072b8:	e018      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc07 	bl	8007ad0 <USBD_GetConfig>
          break;
 80072c2:	e013      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fc37 	bl	8007b3a <USBD_GetStatus>
          break;
 80072cc:	e00e      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80072ce:	6839      	ldr	r1, [r7, #0]
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 fc65 	bl	8007ba0 <USBD_SetFeature>
          break;
 80072d6:	e009      	b.n	80072ec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80072d8:	6839      	ldr	r1, [r7, #0]
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fc74 	bl	8007bc8 <USBD_ClrFeature>
          break;
 80072e0:	e004      	b.n	80072ec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f000 fccc 	bl	8007c82 <USBD_CtlError>
          break;
 80072ea:	bf00      	nop
      }
      break;
 80072ec:	e004      	b.n	80072f8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fcc6 	bl	8007c82 <USBD_CtlError>
      break;
 80072f6:	bf00      	nop
  }

  return ret;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop

08007304 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800730e:	2300      	movs	r3, #0
 8007310:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800731a:	2b40      	cmp	r3, #64	; 0x40
 800731c:	d005      	beq.n	800732a <USBD_StdItfReq+0x26>
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d82e      	bhi.n	8007380 <USBD_StdItfReq+0x7c>
 8007322:	2b00      	cmp	r3, #0
 8007324:	d001      	beq.n	800732a <USBD_StdItfReq+0x26>
 8007326:	2b20      	cmp	r3, #32
 8007328:	d12a      	bne.n	8007380 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	3b01      	subs	r3, #1
 8007332:	2b02      	cmp	r3, #2
 8007334:	d81d      	bhi.n	8007372 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	889b      	ldrh	r3, [r3, #4]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d813      	bhi.n	8007368 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d110      	bne.n	800737c <USBD_StdItfReq+0x78>
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 fd38 	bl	8007dd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007366:	e009      	b.n	800737c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fc89 	bl	8007c82 <USBD_CtlError>
          break;
 8007370:	e004      	b.n	800737c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007372:	6839      	ldr	r1, [r7, #0]
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f000 fc84 	bl	8007c82 <USBD_CtlError>
          break;
 800737a:	e000      	b.n	800737e <USBD_StdItfReq+0x7a>
          break;
 800737c:	bf00      	nop
      }
      break;
 800737e:	e004      	b.n	800738a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007380:	6839      	ldr	r1, [r7, #0]
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 fc7d 	bl	8007c82 <USBD_CtlError>
      break;
 8007388:	bf00      	nop
  }

  return USBD_OK;
 800738a:	2300      	movs	r3, #0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	889b      	ldrh	r3, [r3, #4]
 80073a6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073b0:	2b40      	cmp	r3, #64	; 0x40
 80073b2:	d007      	beq.n	80073c4 <USBD_StdEPReq+0x30>
 80073b4:	2b40      	cmp	r3, #64	; 0x40
 80073b6:	f200 8146 	bhi.w	8007646 <USBD_StdEPReq+0x2b2>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00a      	beq.n	80073d4 <USBD_StdEPReq+0x40>
 80073be:	2b20      	cmp	r3, #32
 80073c0:	f040 8141 	bne.w	8007646 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	4798      	blx	r3
      break;
 80073d2:	e13d      	b.n	8007650 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d10a      	bne.n	80073f6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	4798      	blx	r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	e12d      	b.n	8007652 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	785b      	ldrb	r3, [r3, #1]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d007      	beq.n	800740e <USBD_StdEPReq+0x7a>
 80073fe:	2b03      	cmp	r3, #3
 8007400:	f300 811b 	bgt.w	800763a <USBD_StdEPReq+0x2a6>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d072      	beq.n	80074ee <USBD_StdEPReq+0x15a>
 8007408:	2b01      	cmp	r3, #1
 800740a:	d03a      	beq.n	8007482 <USBD_StdEPReq+0xee>
 800740c:	e115      	b.n	800763a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007414:	2b02      	cmp	r3, #2
 8007416:	d002      	beq.n	800741e <USBD_StdEPReq+0x8a>
 8007418:	2b03      	cmp	r3, #3
 800741a:	d015      	beq.n	8007448 <USBD_StdEPReq+0xb4>
 800741c:	e02b      	b.n	8007476 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <USBD_StdEPReq+0xaa>
 8007424:	7bbb      	ldrb	r3, [r7, #14]
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d009      	beq.n	800743e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 ff96 	bl	8008360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007434:	2180      	movs	r1, #128	; 0x80
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 ff92 	bl	8008360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800743c:	e020      	b.n	8007480 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fc1e 	bl	8007c82 <USBD_CtlError>
              break;
 8007446:	e01b      	b.n	8007480 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	885b      	ldrh	r3, [r3, #2]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10e      	bne.n	800746e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00b      	beq.n	800746e <USBD_StdEPReq+0xda>
 8007456:	7bbb      	ldrb	r3, [r7, #14]
 8007458:	2b80      	cmp	r3, #128	; 0x80
 800745a:	d008      	beq.n	800746e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	88db      	ldrh	r3, [r3, #6]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d104      	bne.n	800746e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007464:	7bbb      	ldrb	r3, [r7, #14]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 ff79 	bl	8008360 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fcb1 	bl	8007dd6 <USBD_CtlSendStatus>

              break;
 8007474:	e004      	b.n	8007480 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007476:	6839      	ldr	r1, [r7, #0]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fc02 	bl	8007c82 <USBD_CtlError>
              break;
 800747e:	bf00      	nop
          }
          break;
 8007480:	e0e0      	b.n	8007644 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007488:	2b02      	cmp	r3, #2
 800748a:	d002      	beq.n	8007492 <USBD_StdEPReq+0xfe>
 800748c:	2b03      	cmp	r3, #3
 800748e:	d015      	beq.n	80074bc <USBD_StdEPReq+0x128>
 8007490:	e026      	b.n	80074e0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <USBD_StdEPReq+0x11e>
 8007498:	7bbb      	ldrb	r3, [r7, #14]
 800749a:	2b80      	cmp	r3, #128	; 0x80
 800749c:	d009      	beq.n	80074b2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800749e:	7bbb      	ldrb	r3, [r7, #14]
 80074a0:	4619      	mov	r1, r3
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 ff5c 	bl	8008360 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074a8:	2180      	movs	r1, #128	; 0x80
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ff58 	bl	8008360 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074b0:	e01c      	b.n	80074ec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 fbe4 	bl	8007c82 <USBD_CtlError>
              break;
 80074ba:	e017      	b.n	80074ec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	885b      	ldrh	r3, [r3, #2]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d112      	bne.n	80074ea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
 80074c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 ff63 	bl	800839e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f000 fc7c 	bl	8007dd6 <USBD_CtlSendStatus>
              }
              break;
 80074de:	e004      	b.n	80074ea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80074e0:	6839      	ldr	r1, [r7, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fbcd 	bl	8007c82 <USBD_CtlError>
              break;
 80074e8:	e000      	b.n	80074ec <USBD_StdEPReq+0x158>
              break;
 80074ea:	bf00      	nop
          }
          break;
 80074ec:	e0aa      	b.n	8007644 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d002      	beq.n	80074fe <USBD_StdEPReq+0x16a>
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d032      	beq.n	8007562 <USBD_StdEPReq+0x1ce>
 80074fc:	e097      	b.n	800762e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074fe:	7bbb      	ldrb	r3, [r7, #14]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <USBD_StdEPReq+0x180>
 8007504:	7bbb      	ldrb	r3, [r7, #14]
 8007506:	2b80      	cmp	r3, #128	; 0x80
 8007508:	d004      	beq.n	8007514 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fbb8 	bl	8007c82 <USBD_CtlError>
                break;
 8007512:	e091      	b.n	8007638 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007514:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da0b      	bge.n	8007534 <USBD_StdEPReq+0x1a0>
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007522:	4613      	mov	r3, r2
 8007524:	009b      	lsls	r3, r3, #2
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	3310      	adds	r3, #16
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	e00b      	b.n	800754c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007534:	7bbb      	ldrb	r3, [r7, #14]
 8007536:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800753a:	4613      	mov	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	4413      	add	r3, r2
 800754a:	3304      	adds	r3, #4
 800754c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2202      	movs	r2, #2
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fbfb 	bl	8007d56 <USBD_CtlSendData>
              break;
 8007560:	e06a      	b.n	8007638 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007562:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da11      	bge.n	800758e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3318      	adds	r3, #24
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d117      	bne.n	80075b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fb7b 	bl	8007c82 <USBD_CtlError>
                  break;
 800758c:	e054      	b.n	8007638 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	6879      	ldr	r1, [r7, #4]
 8007596:	4613      	mov	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d104      	bne.n	80075b4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80075aa:	6839      	ldr	r1, [r7, #0]
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fb68 	bl	8007c82 <USBD_CtlError>
                  break;
 80075b2:	e041      	b.n	8007638 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	da0b      	bge.n	80075d4 <USBD_StdEPReq+0x240>
 80075bc:	7bbb      	ldrb	r3, [r7, #14]
 80075be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	3310      	adds	r3, #16
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	4413      	add	r3, r2
 80075d0:	3304      	adds	r3, #4
 80075d2:	e00b      	b.n	80075ec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075d4:	7bbb      	ldrb	r3, [r7, #14]
 80075d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80075ee:	7bbb      	ldrb	r3, [r7, #14]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d002      	beq.n	80075fa <USBD_StdEPReq+0x266>
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d103      	bne.n	8007602 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e00e      	b.n	8007620 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	4619      	mov	r1, r3
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fee8 	bl	80083dc <USBD_LL_IsStallEP>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d003      	beq.n	800761a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e002      	b.n	8007620 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	2202      	movs	r2, #2
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fb95 	bl	8007d56 <USBD_CtlSendData>
              break;
 800762c:	e004      	b.n	8007638 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 fb26 	bl	8007c82 <USBD_CtlError>
              break;
 8007636:	bf00      	nop
          }
          break;
 8007638:	e004      	b.n	8007644 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb20 	bl	8007c82 <USBD_CtlError>
          break;
 8007642:	bf00      	nop
      }
      break;
 8007644:	e004      	b.n	8007650 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb1a 	bl	8007c82 <USBD_CtlError>
      break;
 800764e:	bf00      	nop
  }

  return ret;
 8007650:	7bfb      	ldrb	r3, [r7, #15]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3710      	adds	r7, #16
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b084      	sub	sp, #16
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	885b      	ldrh	r3, [r3, #2]
 8007676:	0a1b      	lsrs	r3, r3, #8
 8007678:	b29b      	uxth	r3, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	2b06      	cmp	r3, #6
 800767e:	f200 8128 	bhi.w	80078d2 <USBD_GetDescriptor+0x276>
 8007682:	a201      	add	r2, pc, #4	; (adr r2, 8007688 <USBD_GetDescriptor+0x2c>)
 8007684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007688:	080076a5 	.word	0x080076a5
 800768c:	080076bd 	.word	0x080076bd
 8007690:	080076fd 	.word	0x080076fd
 8007694:	080078d3 	.word	0x080078d3
 8007698:	080078d3 	.word	0x080078d3
 800769c:	08007873 	.word	0x08007873
 80076a0:	0800789f 	.word	0x0800789f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	7c12      	ldrb	r2, [r2, #16]
 80076b0:	f107 0108 	add.w	r1, r7, #8
 80076b4:	4610      	mov	r0, r2
 80076b6:	4798      	blx	r3
 80076b8:	60f8      	str	r0, [r7, #12]
      break;
 80076ba:	e112      	b.n	80078e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7c1b      	ldrb	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10d      	bne.n	80076e0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076cc:	f107 0208 	add.w	r2, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	3301      	adds	r3, #1
 80076da:	2202      	movs	r2, #2
 80076dc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80076de:	e100      	b.n	80078e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	f107 0208 	add.w	r2, r7, #8
 80076ec:	4610      	mov	r0, r2
 80076ee:	4798      	blx	r3
 80076f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	2202      	movs	r2, #2
 80076f8:	701a      	strb	r2, [r3, #0]
      break;
 80076fa:	e0f2      	b.n	80078e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	885b      	ldrh	r3, [r3, #2]
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b05      	cmp	r3, #5
 8007704:	f200 80ac 	bhi.w	8007860 <USBD_GetDescriptor+0x204>
 8007708:	a201      	add	r2, pc, #4	; (adr r2, 8007710 <USBD_GetDescriptor+0xb4>)
 800770a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770e:	bf00      	nop
 8007710:	08007729 	.word	0x08007729
 8007714:	0800775d 	.word	0x0800775d
 8007718:	08007791 	.word	0x08007791
 800771c:	080077c5 	.word	0x080077c5
 8007720:	080077f9 	.word	0x080077f9
 8007724:	0800782d 	.word	0x0800782d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800774a:	e091      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800774c:	6839      	ldr	r1, [r7, #0]
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 fa97 	bl	8007c82 <USBD_CtlError>
            err++;
 8007754:	7afb      	ldrb	r3, [r7, #11]
 8007756:	3301      	adds	r3, #1
 8007758:	72fb      	strb	r3, [r7, #11]
          break;
 800775a:	e089      	b.n	8007870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00b      	beq.n	8007780 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	7c12      	ldrb	r2, [r2, #16]
 8007774:	f107 0108 	add.w	r1, r7, #8
 8007778:	4610      	mov	r0, r2
 800777a:	4798      	blx	r3
 800777c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800777e:	e077      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa7d 	bl	8007c82 <USBD_CtlError>
            err++;
 8007788:	7afb      	ldrb	r3, [r7, #11]
 800778a:	3301      	adds	r3, #1
 800778c:	72fb      	strb	r3, [r7, #11]
          break;
 800778e:	e06f      	b.n	8007870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007796:	68db      	ldr	r3, [r3, #12]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00b      	beq.n	80077b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7c12      	ldrb	r2, [r2, #16]
 80077a8:	f107 0108 	add.w	r1, r7, #8
 80077ac:	4610      	mov	r0, r2
 80077ae:	4798      	blx	r3
 80077b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077b2:	e05d      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077b4:	6839      	ldr	r1, [r7, #0]
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fa63 	bl	8007c82 <USBD_CtlError>
            err++;
 80077bc:	7afb      	ldrb	r3, [r7, #11]
 80077be:	3301      	adds	r3, #1
 80077c0:	72fb      	strb	r3, [r7, #11]
          break;
 80077c2:	e055      	b.n	8007870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077d6:	691b      	ldr	r3, [r3, #16]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	7c12      	ldrb	r2, [r2, #16]
 80077dc:	f107 0108 	add.w	r1, r7, #8
 80077e0:	4610      	mov	r0, r2
 80077e2:	4798      	blx	r3
 80077e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077e6:	e043      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e8:	6839      	ldr	r1, [r7, #0]
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fa49 	bl	8007c82 <USBD_CtlError>
            err++;
 80077f0:	7afb      	ldrb	r3, [r7, #11]
 80077f2:	3301      	adds	r3, #1
 80077f4:	72fb      	strb	r3, [r7, #11]
          break;
 80077f6:	e03b      	b.n	8007870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00b      	beq.n	800781c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	7c12      	ldrb	r2, [r2, #16]
 8007810:	f107 0108 	add.w	r1, r7, #8
 8007814:	4610      	mov	r0, r2
 8007816:	4798      	blx	r3
 8007818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800781a:	e029      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa2f 	bl	8007c82 <USBD_CtlError>
            err++;
 8007824:	7afb      	ldrb	r3, [r7, #11]
 8007826:	3301      	adds	r3, #1
 8007828:	72fb      	strb	r3, [r7, #11]
          break;
 800782a:	e021      	b.n	8007870 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00b      	beq.n	8007850 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	7c12      	ldrb	r2, [r2, #16]
 8007844:	f107 0108 	add.w	r1, r7, #8
 8007848:	4610      	mov	r0, r2
 800784a:	4798      	blx	r3
 800784c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800784e:	e00f      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007850:	6839      	ldr	r1, [r7, #0]
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 fa15 	bl	8007c82 <USBD_CtlError>
            err++;
 8007858:	7afb      	ldrb	r3, [r7, #11]
 800785a:	3301      	adds	r3, #1
 800785c:	72fb      	strb	r3, [r7, #11]
          break;
 800785e:	e007      	b.n	8007870 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fa0d 	bl	8007c82 <USBD_CtlError>
          err++;
 8007868:	7afb      	ldrb	r3, [r7, #11]
 800786a:	3301      	adds	r3, #1
 800786c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800786e:	e038      	b.n	80078e2 <USBD_GetDescriptor+0x286>
 8007870:	e037      	b.n	80078e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	7c1b      	ldrb	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	f107 0208 	add.w	r2, r7, #8
 8007886:	4610      	mov	r0, r2
 8007888:	4798      	blx	r3
 800788a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800788c:	e029      	b.n	80078e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800788e:	6839      	ldr	r1, [r7, #0]
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f9f6 	bl	8007c82 <USBD_CtlError>
        err++;
 8007896:	7afb      	ldrb	r3, [r7, #11]
 8007898:	3301      	adds	r3, #1
 800789a:	72fb      	strb	r3, [r7, #11]
      break;
 800789c:	e021      	b.n	80078e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	7c1b      	ldrb	r3, [r3, #16]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10d      	bne.n	80078c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f107 0208 	add.w	r2, r7, #8
 80078b2:	4610      	mov	r0, r2
 80078b4:	4798      	blx	r3
 80078b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	2207      	movs	r2, #7
 80078be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078c0:	e00f      	b.n	80078e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078c2:	6839      	ldr	r1, [r7, #0]
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f9dc 	bl	8007c82 <USBD_CtlError>
        err++;
 80078ca:	7afb      	ldrb	r3, [r7, #11]
 80078cc:	3301      	adds	r3, #1
 80078ce:	72fb      	strb	r3, [r7, #11]
      break;
 80078d0:	e007      	b.n	80078e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 f9d4 	bl	8007c82 <USBD_CtlError>
      err++;
 80078da:	7afb      	ldrb	r3, [r7, #11]
 80078dc:	3301      	adds	r3, #1
 80078de:	72fb      	strb	r3, [r7, #11]
      break;
 80078e0:	bf00      	nop
  }

  if (err != 0U)
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d11c      	bne.n	8007922 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80078e8:	893b      	ldrh	r3, [r7, #8]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d011      	beq.n	8007912 <USBD_GetDescriptor+0x2b6>
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	88db      	ldrh	r3, [r3, #6]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00d      	beq.n	8007912 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	88da      	ldrh	r2, [r3, #6]
 80078fa:	893b      	ldrh	r3, [r7, #8]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	bf28      	it	cs
 8007900:	4613      	movcs	r3, r2
 8007902:	b29b      	uxth	r3, r3
 8007904:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007906:	893b      	ldrh	r3, [r7, #8]
 8007908:	461a      	mov	r2, r3
 800790a:	68f9      	ldr	r1, [r7, #12]
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa22 	bl	8007d56 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	88db      	ldrh	r3, [r3, #6]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d104      	bne.n	8007924 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fa5b 	bl	8007dd6 <USBD_CtlSendStatus>
 8007920:	e000      	b.n	8007924 <USBD_GetDescriptor+0x2c8>
    return;
 8007922:	bf00      	nop
    }
  }
}
 8007924:	3710      	adds	r7, #16
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
 800792a:	bf00      	nop

0800792c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	889b      	ldrh	r3, [r3, #4]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d130      	bne.n	80079a0 <USBD_SetAddress+0x74>
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	88db      	ldrh	r3, [r3, #6]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d12c      	bne.n	80079a0 <USBD_SetAddress+0x74>
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	885b      	ldrh	r3, [r3, #2]
 800794a:	2b7f      	cmp	r3, #127	; 0x7f
 800794c:	d828      	bhi.n	80079a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	885b      	ldrh	r3, [r3, #2]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007958:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	2b03      	cmp	r3, #3
 8007962:	d104      	bne.n	800796e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f98b 	bl	8007c82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800796c:	e01d      	b.n	80079aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7bfa      	ldrb	r2, [r7, #15]
 8007972:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fd5a 	bl	8008434 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa28 	bl	8007dd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d004      	beq.n	8007996 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007994:	e009      	b.n	80079aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799e:	e004      	b.n	80079aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f96d 	bl	8007c82 <USBD_CtlError>
  }
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3710      	adds	r7, #16
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	885b      	ldrh	r3, [r3, #2]
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	4b41      	ldr	r3, [pc, #260]	; (8007acc <USBD_SetConfig+0x118>)
 80079c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80079c8:	4b40      	ldr	r3, [pc, #256]	; (8007acc <USBD_SetConfig+0x118>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d904      	bls.n	80079da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f955 	bl	8007c82 <USBD_CtlError>
 80079d8:	e075      	b.n	8007ac6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d002      	beq.n	80079ea <USBD_SetConfig+0x36>
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d023      	beq.n	8007a30 <USBD_SetConfig+0x7c>
 80079e8:	e062      	b.n	8007ab0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80079ea:	4b38      	ldr	r3, [pc, #224]	; (8007acc <USBD_SetConfig+0x118>)
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d01a      	beq.n	8007a28 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80079f2:	4b36      	ldr	r3, [pc, #216]	; (8007acc <USBD_SetConfig+0x118>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	461a      	mov	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2203      	movs	r2, #3
 8007a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a04:	4b31      	ldr	r3, [pc, #196]	; (8007acc <USBD_SetConfig+0x118>)
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff f9e8 	bl	8006de0 <USBD_SetClassConfig>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d104      	bne.n	8007a20 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 f932 	bl	8007c82 <USBD_CtlError>
            return;
 8007a1e:	e052      	b.n	8007ac6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f9d8 	bl	8007dd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a26:	e04e      	b.n	8007ac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f9d4 	bl	8007dd6 <USBD_CtlSendStatus>
        break;
 8007a2e:	e04a      	b.n	8007ac6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007a30:	4b26      	ldr	r3, [pc, #152]	; (8007acc <USBD_SetConfig+0x118>)
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d112      	bne.n	8007a5e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007a40:	4b22      	ldr	r3, [pc, #136]	; (8007acc <USBD_SetConfig+0x118>)
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007a4a:	4b20      	ldr	r3, [pc, #128]	; (8007acc <USBD_SetConfig+0x118>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff f9e4 	bl	8006e1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f9bd 	bl	8007dd6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007a5c:	e033      	b.n	8007ac6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007a5e:	4b1b      	ldr	r3, [pc, #108]	; (8007acc <USBD_SetConfig+0x118>)
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d01d      	beq.n	8007aa8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff f9d2 	bl	8006e1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007a7a:	4b14      	ldr	r3, [pc, #80]	; (8007acc <USBD_SetConfig+0x118>)
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <USBD_SetConfig+0x118>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff f9a8 	bl	8006de0 <USBD_SetClassConfig>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d104      	bne.n	8007aa0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007a96:	6839      	ldr	r1, [r7, #0]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 f8f2 	bl	8007c82 <USBD_CtlError>
            return;
 8007a9e:	e012      	b.n	8007ac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 f998 	bl	8007dd6 <USBD_CtlSendStatus>
        break;
 8007aa6:	e00e      	b.n	8007ac6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 f994 	bl	8007dd6 <USBD_CtlSendStatus>
        break;
 8007aae:	e00a      	b.n	8007ac6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f8e5 	bl	8007c82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ab8:	4b04      	ldr	r3, [pc, #16]	; (8007acc <USBD_SetConfig+0x118>)
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff f9ad 	bl	8006e1e <USBD_ClrClassConfig>
        break;
 8007ac4:	bf00      	nop
    }
  }
}
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000180 	.word	0x20000180

08007ad0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	88db      	ldrh	r3, [r3, #6]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d004      	beq.n	8007aec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007ae2:	6839      	ldr	r1, [r7, #0]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f8cc 	bl	8007c82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007aea:	e022      	b.n	8007b32 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	dc02      	bgt.n	8007afc <USBD_GetConfig+0x2c>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	dc03      	bgt.n	8007b02 <USBD_GetConfig+0x32>
 8007afa:	e015      	b.n	8007b28 <USBD_GetConfig+0x58>
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d00b      	beq.n	8007b18 <USBD_GetConfig+0x48>
 8007b00:	e012      	b.n	8007b28 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	3308      	adds	r3, #8
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f920 	bl	8007d56 <USBD_CtlSendData>
        break;
 8007b16:	e00c      	b.n	8007b32 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f918 	bl	8007d56 <USBD_CtlSendData>
        break;
 8007b26:	e004      	b.n	8007b32 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f8a9 	bl	8007c82 <USBD_CtlError>
        break;
 8007b30:	bf00      	nop
}
 8007b32:	bf00      	nop
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
 8007b42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d81e      	bhi.n	8007b8e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	88db      	ldrh	r3, [r3, #6]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d004      	beq.n	8007b62 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f891 	bl	8007c82 <USBD_CtlError>
        break;
 8007b60:	e01a      	b.n	8007b98 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2201      	movs	r2, #1
 8007b66:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d005      	beq.n	8007b7e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	f043 0202 	orr.w	r2, r3, #2
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	330c      	adds	r3, #12
 8007b82:	2202      	movs	r2, #2
 8007b84:	4619      	mov	r1, r3
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8e5 	bl	8007d56 <USBD_CtlSendData>
      break;
 8007b8c:	e004      	b.n	8007b98 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007b8e:	6839      	ldr	r1, [r7, #0]
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 f876 	bl	8007c82 <USBD_CtlError>
      break;
 8007b96:	bf00      	nop
  }
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	885b      	ldrh	r3, [r3, #2]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d106      	bne.n	8007bc0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 f90b 	bl	8007dd6 <USBD_CtlSendStatus>
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d80b      	bhi.n	8007bf6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	885b      	ldrh	r3, [r3, #2]
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d10c      	bne.n	8007c00 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8f1 	bl	8007dd6 <USBD_CtlSendStatus>
      }
      break;
 8007bf4:	e004      	b.n	8007c00 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f842 	bl	8007c82 <USBD_CtlError>
      break;
 8007bfe:	e000      	b.n	8007c02 <USBD_ClrFeature+0x3a>
      break;
 8007c00:	bf00      	nop
  }
}
 8007c02:	bf00      	nop
 8007c04:	3708      	adds	r7, #8
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
 8007c12:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	785a      	ldrb	r2, [r3, #1]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	3302      	adds	r3, #2
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	b29a      	uxth	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	3303      	adds	r3, #3
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	4413      	add	r3, r2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3304      	adds	r3, #4
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	b29a      	uxth	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	3305      	adds	r3, #5
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	021b      	lsls	r3, r3, #8
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	3306      	adds	r3, #6
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	3307      	adds	r3, #7
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	021b      	lsls	r3, r3, #8
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	4413      	add	r3, r2
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	80da      	strh	r2, [r3, #6]

}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bc80      	pop	{r7}
 8007c80:	4770      	bx	lr

08007c82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b082      	sub	sp, #8
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007c8c:	2180      	movs	r1, #128	; 0x80
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fb66 	bl	8008360 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007c94:	2100      	movs	r1, #0
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb62 	bl	8008360 <USBD_LL_StallEP>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d032      	beq.n	8007d20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f834 	bl	8007d28 <USBD_GetLen>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	b29a      	uxth	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	75fa      	strb	r2, [r7, #23]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	4413      	add	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	7812      	ldrb	r2, [r2, #0]
 8007cde:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	75fa      	strb	r2, [r7, #23]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	4413      	add	r3, r2
 8007cec:	2203      	movs	r2, #3
 8007cee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007cf0:	e012      	b.n	8007d18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	1c5a      	adds	r2, r3, #1
 8007cf6:	60fa      	str	r2, [r7, #12]
 8007cf8:	7dfa      	ldrb	r2, [r7, #23]
 8007cfa:	1c51      	adds	r1, r2, #1
 8007cfc:	75f9      	strb	r1, [r7, #23]
 8007cfe:	4611      	mov	r1, r2
 8007d00:	68ba      	ldr	r2, [r7, #8]
 8007d02:	440a      	add	r2, r1
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	1c5a      	adds	r2, r3, #1
 8007d0c:	75fa      	strb	r2, [r7, #23]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	4413      	add	r3, r2
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e8      	bne.n	8007cf2 <USBD_GetString+0x4e>
    }
  }
}
 8007d20:	bf00      	nop
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007d30:	2300      	movs	r3, #0
 8007d32:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007d34:	e005      	b.n	8007d42 <USBD_GetLen+0x1a>
  {
    len++;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1f5      	bne.n	8007d36 <USBD_GetLen+0xe>
  }

  return len;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3714      	adds	r7, #20
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bc80      	pop	{r7}
 8007d54:	4770      	bx	lr

08007d56 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	4613      	mov	r3, r2
 8007d62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2202      	movs	r2, #2
 8007d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007d6c:	88fa      	ldrh	r2, [r7, #6]
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d78:	88fb      	ldrh	r3, [r7, #6]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	f000 fb77 	bl	8008472 <USBD_LL_Transmit>

  return USBD_OK;
 8007d84:	2300      	movs	r3, #0
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	4613      	mov	r3, r2
 8007d9a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007d9c:	88fb      	ldrh	r3, [r7, #6]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	2100      	movs	r1, #0
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fb65 	bl	8008472 <USBD_LL_Transmit>

  return USBD_OK;
 8007da8:	2300      	movs	r3, #0
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b084      	sub	sp, #16
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	4613      	mov	r3, r2
 8007dbe:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007dc0:	88fb      	ldrh	r3, [r7, #6]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	68f8      	ldr	r0, [r7, #12]
 8007dc8:	f000 fb76 	bl	80084b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b082      	sub	sp, #8
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2204      	movs	r2, #4
 8007de2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007de6:	2300      	movs	r3, #0
 8007de8:	2200      	movs	r2, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fb40 	bl	8008472 <USBD_LL_Transmit>

  return USBD_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2205      	movs	r2, #5
 8007e08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fb50 	bl	80084b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
	...

08007e24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	490e      	ldr	r1, [pc, #56]	; (8007e64 <MX_USB_DEVICE_Init+0x40>)
 8007e2c:	480e      	ldr	r0, [pc, #56]	; (8007e68 <MX_USB_DEVICE_Init+0x44>)
 8007e2e:	f7fe ff7d 	bl	8006d2c <USBD_Init>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d001      	beq.n	8007e3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007e38:	f7f9 fc70 	bl	800171c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007e3c:	490b      	ldr	r1, [pc, #44]	; (8007e6c <MX_USB_DEVICE_Init+0x48>)
 8007e3e:	480a      	ldr	r0, [pc, #40]	; (8007e68 <MX_USB_DEVICE_Init+0x44>)
 8007e40:	f7fe ff9f 	bl	8006d82 <USBD_RegisterClass>
 8007e44:	4603      	mov	r3, r0
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007e4a:	f7f9 fc67 	bl	800171c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007e4e:	4806      	ldr	r0, [pc, #24]	; (8007e68 <MX_USB_DEVICE_Init+0x44>)
 8007e50:	f7fe ffb0 	bl	8006db4 <USBD_Start>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007e5a:	f7f9 fc5f 	bl	800171c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007e5e:	bf00      	nop
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	20000108 	.word	0x20000108
 8007e68:	20000184 	.word	0x20000184
 8007e6c:	2000000c 	.word	0x2000000c

08007e70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	2212      	movs	r2, #18
 8007e80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e82:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	20000124 	.word	0x20000124

08007e94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	6039      	str	r1, [r7, #0]
 8007e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	2204      	movs	r2, #4
 8007ea4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ea6:	4b03      	ldr	r3, [pc, #12]	; (8007eb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bc80      	pop	{r7}
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	20000138 	.word	0x20000138

08007eb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6039      	str	r1, [r7, #0]
 8007ec2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d105      	bne.n	8007ed6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	4907      	ldr	r1, [pc, #28]	; (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
 8007ece:	4808      	ldr	r0, [pc, #32]	; (8007ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ed0:	f7ff fee8 	bl	8007ca4 <USBD_GetString>
 8007ed4:	e004      	b.n	8007ee0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	4904      	ldr	r1, [pc, #16]	; (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
 8007eda:	4805      	ldr	r0, [pc, #20]	; (8007ef0 <USBD_FS_ProductStrDescriptor+0x38>)
 8007edc:	f7ff fee2 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee0:	4b02      	ldr	r3, [pc, #8]	; (8007eec <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20000448 	.word	0x20000448
 8007ef0:	08008608 	.word	0x08008608

08007ef4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	4603      	mov	r3, r0
 8007efc:	6039      	str	r1, [r7, #0]
 8007efe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	4904      	ldr	r1, [pc, #16]	; (8007f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f04:	4804      	ldr	r0, [pc, #16]	; (8007f18 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f06:	f7ff fecd 	bl	8007ca4 <USBD_GetString>
  return USBD_StrDesc;
 8007f0a:	4b02      	ldr	r3, [pc, #8]	; (8007f14 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3708      	adds	r7, #8
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	20000448 	.word	0x20000448
 8007f18:	08008618 	.word	0x08008618

08007f1c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	4603      	mov	r3, r0
 8007f24:	6039      	str	r1, [r7, #0]
 8007f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	221a      	movs	r2, #26
 8007f2c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f2e:	f000 f843 	bl	8007fb8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f32:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	2000013c 	.word	0x2000013c

08007f40 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	4603      	mov	r3, r0
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f4c:	79fb      	ldrb	r3, [r7, #7]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d105      	bne.n	8007f5e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f52:	683a      	ldr	r2, [r7, #0]
 8007f54:	4907      	ldr	r1, [pc, #28]	; (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f56:	4808      	ldr	r0, [pc, #32]	; (8007f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f58:	f7ff fea4 	bl	8007ca4 <USBD_GetString>
 8007f5c:	e004      	b.n	8007f68 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f5e:	683a      	ldr	r2, [r7, #0]
 8007f60:	4904      	ldr	r1, [pc, #16]	; (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f62:	4805      	ldr	r0, [pc, #20]	; (8007f78 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f64:	f7ff fe9e 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3708      	adds	r7, #8
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	20000448 	.word	0x20000448
 8007f78:	0800862c 	.word	0x0800862c

08007f7c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	4603      	mov	r3, r0
 8007f84:	6039      	str	r1, [r7, #0]
 8007f86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f88:	79fb      	ldrb	r3, [r7, #7]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	4907      	ldr	r1, [pc, #28]	; (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f92:	4808      	ldr	r0, [pc, #32]	; (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f94:	f7ff fe86 	bl	8007ca4 <USBD_GetString>
 8007f98:	e004      	b.n	8007fa4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4904      	ldr	r1, [pc, #16]	; (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f9e:	4805      	ldr	r0, [pc, #20]	; (8007fb4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fa0:	f7ff fe80 	bl	8007ca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fa4:	4b02      	ldr	r3, [pc, #8]	; (8007fb0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20000448 	.word	0x20000448
 8007fb4:	08008638 	.word	0x08008638

08007fb8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fbe:	4b0f      	ldr	r3, [pc, #60]	; (8007ffc <Get_SerialNum+0x44>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007fc4:	4b0e      	ldr	r3, [pc, #56]	; (8008000 <Get_SerialNum+0x48>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007fca:	4b0e      	ldr	r3, [pc, #56]	; (8008004 <Get_SerialNum+0x4c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d009      	beq.n	8007ff2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007fde:	2208      	movs	r2, #8
 8007fe0:	4909      	ldr	r1, [pc, #36]	; (8008008 <Get_SerialNum+0x50>)
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f814 	bl	8008010 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007fe8:	2204      	movs	r2, #4
 8007fea:	4908      	ldr	r1, [pc, #32]	; (800800c <Get_SerialNum+0x54>)
 8007fec:	68b8      	ldr	r0, [r7, #8]
 8007fee:	f000 f80f 	bl	8008010 <IntToUnicode>
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	1ffff7e8 	.word	0x1ffff7e8
 8008000:	1ffff7ec 	.word	0x1ffff7ec
 8008004:	1ffff7f0 	.word	0x1ffff7f0
 8008008:	2000013e 	.word	0x2000013e
 800800c:	2000014e 	.word	0x2000014e

08008010 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008010:	b480      	push	{r7}
 8008012:	b087      	sub	sp, #28
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4613      	mov	r3, r2
 800801c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008022:	2300      	movs	r3, #0
 8008024:	75fb      	strb	r3, [r7, #23]
 8008026:	e027      	b.n	8008078 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	0f1b      	lsrs	r3, r3, #28
 800802c:	2b09      	cmp	r3, #9
 800802e:	d80b      	bhi.n	8008048 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	0f1b      	lsrs	r3, r3, #28
 8008034:	b2da      	uxtb	r2, r3
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	4619      	mov	r1, r3
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	440b      	add	r3, r1
 8008040:	3230      	adds	r2, #48	; 0x30
 8008042:	b2d2      	uxtb	r2, r2
 8008044:	701a      	strb	r2, [r3, #0]
 8008046:	e00a      	b.n	800805e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	0f1b      	lsrs	r3, r3, #28
 800804c:	b2da      	uxtb	r2, r3
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4619      	mov	r1, r3
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	440b      	add	r3, r1
 8008058:	3237      	adds	r2, #55	; 0x37
 800805a:	b2d2      	uxtb	r2, r2
 800805c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	005b      	lsls	r3, r3, #1
 8008068:	3301      	adds	r3, #1
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	4413      	add	r3, r2
 800806e:	2200      	movs	r2, #0
 8008070:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	3301      	adds	r3, #1
 8008076:	75fb      	strb	r3, [r7, #23]
 8008078:	7dfa      	ldrb	r2, [r7, #23]
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	429a      	cmp	r2, r3
 800807e:	d3d3      	bcc.n	8008028 <IntToUnicode+0x18>
  }
}
 8008080:	bf00      	nop
 8008082:	bf00      	nop
 8008084:	371c      	adds	r7, #28
 8008086:	46bd      	mov	sp, r7
 8008088:	bc80      	pop	{r7}
 800808a:	4770      	bx	lr

0800808c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <HAL_PCD_MspInit+0x44>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d113      	bne.n	80080c6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800809e:	4b0d      	ldr	r3, [pc, #52]	; (80080d4 <HAL_PCD_MspInit+0x48>)
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	4a0c      	ldr	r2, [pc, #48]	; (80080d4 <HAL_PCD_MspInit+0x48>)
 80080a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080a8:	61d3      	str	r3, [r2, #28]
 80080aa:	4b0a      	ldr	r3, [pc, #40]	; (80080d4 <HAL_PCD_MspInit+0x48>)
 80080ac:	69db      	ldr	r3, [r3, #28]
 80080ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80080b6:	2200      	movs	r2, #0
 80080b8:	2100      	movs	r1, #0
 80080ba:	2014      	movs	r0, #20
 80080bc:	f7f9 fd21 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80080c0:	2014      	movs	r0, #20
 80080c2:	f7f9 fd3a 	bl	8001b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40005c00 	.word	0x40005c00
 80080d4:	40021000 	.word	0x40021000

080080d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 22ec 	ldr.w	r2, [r3, #748]	; 0x2ec
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fea8 	bl	8006e44 <USBD_LL_SetupStage>
}
 80080f4:	bf00      	nop
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	6879      	ldr	r1, [r7, #4]
 8008112:	4613      	mov	r3, r2
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	4413      	add	r3, r2
 8008118:	00db      	lsls	r3, r3, #3
 800811a:	440b      	add	r3, r1
 800811c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008120:	681a      	ldr	r2, [r3, #0]
 8008122:	78fb      	ldrb	r3, [r7, #3]
 8008124:	4619      	mov	r1, r3
 8008126:	f7fe feda 	bl	8006ede <USBD_LL_DataOutStage>
}
 800812a:	bf00      	nop
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b082      	sub	sp, #8
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
 800813a:	460b      	mov	r3, r1
 800813c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8d3 02ec 	ldr.w	r0, [r3, #748]	; 0x2ec
 8008144:	78fa      	ldrb	r2, [r7, #3]
 8008146:	6879      	ldr	r1, [r7, #4]
 8008148:	4613      	mov	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	440b      	add	r3, r1
 8008152:	333c      	adds	r3, #60	; 0x3c
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	78fb      	ldrb	r3, [r7, #3]
 8008158:	4619      	mov	r1, r3
 800815a:	f7fe ff31 	bl	8006fc0 <USBD_LL_DataInStage>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b082      	sub	sp, #8
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff f841 	bl	80071fc <USBD_LL_SOF>
}
 800817a:	bf00      	nop
 800817c:	3708      	adds	r7, #8
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b02      	cmp	r3, #2
 8008194:	d001      	beq.n	800819a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008196:	f7f9 fac1 	bl	800171c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80081a0:	7bfa      	ldrb	r2, [r7, #15]
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7fe fff1 	bl	800718c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fe ffaa 	bl	800710a <USBD_LL_Reset>
}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b082      	sub	sp, #8
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80081ce:	4618      	mov	r0, r3
 80081d0:	f7fe ffeb 	bl	80071aa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d005      	beq.n	80081e8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081dc:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <HAL_PCD_SuspendCallback+0x30>)
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	4a03      	ldr	r2, [pc, #12]	; (80081f0 <HAL_PCD_SuspendCallback+0x30>)
 80081e2:	f043 0306 	orr.w	r3, r3, #6
 80081e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80081e8:	bf00      	nop
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	e000ed00 	.word	0xe000ed00

080081f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008202:	4618      	mov	r0, r3
 8008204:	f7fe ffe5 	bl	80071d2 <USBD_LL_Resume>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008218:	4a1f      	ldr	r2, [pc, #124]	; (8008298 <USBD_LL_Init+0x88>)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  pdev->pData = &hpcd_USB_FS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a1d      	ldr	r2, [pc, #116]	; (8008298 <USBD_LL_Init+0x88>)
 8008224:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008228:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <USBD_LL_Init+0x88>)
 800822a:	4a1c      	ldr	r2, [pc, #112]	; (800829c <USBD_LL_Init+0x8c>)
 800822c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800822e:	4b1a      	ldr	r3, [pc, #104]	; (8008298 <USBD_LL_Init+0x88>)
 8008230:	2208      	movs	r2, #8
 8008232:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008234:	4b18      	ldr	r3, [pc, #96]	; (8008298 <USBD_LL_Init+0x88>)
 8008236:	2202      	movs	r2, #2
 8008238:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800823a:	4b17      	ldr	r3, [pc, #92]	; (8008298 <USBD_LL_Init+0x88>)
 800823c:	2200      	movs	r2, #0
 800823e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008240:	4b15      	ldr	r3, [pc, #84]	; (8008298 <USBD_LL_Init+0x88>)
 8008242:	2200      	movs	r2, #0
 8008244:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <USBD_LL_Init+0x88>)
 8008248:	2200      	movs	r2, #0
 800824a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800824c:	4812      	ldr	r0, [pc, #72]	; (8008298 <USBD_LL_Init+0x88>)
 800824e:	f7f9 fe2b 	bl	8001ea8 <HAL_PCD_Init>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d001      	beq.n	800825c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008258:	f7f9 fa60 	bl	800171c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008262:	2318      	movs	r3, #24
 8008264:	2200      	movs	r2, #0
 8008266:	2100      	movs	r1, #0
 8008268:	f7fb fb33 	bl	80038d2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008272:	2358      	movs	r3, #88	; 0x58
 8008274:	2200      	movs	r2, #0
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	f7fb fb2b 	bl	80038d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008286:	2200      	movs	r2, #0
 8008288:	2181      	movs	r1, #129	; 0x81
 800828a:	f7fb fb22 	bl	80038d2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000648 	.word	0x20000648
 800829c:	40005c00 	.word	0x40005c00

080082a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7f9 fef5 	bl	80020a6 <HAL_PCD_Start>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f93c 	bl	8008540 <USBD_Get_USB_Status>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	4608      	mov	r0, r1
 80082e0:	4611      	mov	r1, r2
 80082e2:	461a      	mov	r2, r3
 80082e4:	4603      	mov	r3, r0
 80082e6:	70fb      	strb	r3, [r7, #3]
 80082e8:	460b      	mov	r3, r1
 80082ea:	70bb      	strb	r3, [r7, #2]
 80082ec:	4613      	mov	r3, r2
 80082ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80082fe:	78bb      	ldrb	r3, [r7, #2]
 8008300:	883a      	ldrh	r2, [r7, #0]
 8008302:	78f9      	ldrb	r1, [r7, #3]
 8008304:	f7fa f84a 	bl	800239c <HAL_PCD_EP_Open>
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800830c:	7bfb      	ldrb	r3, [r7, #15]
 800830e:	4618      	mov	r0, r3
 8008310:	f000 f916 	bl	8008540 <USBD_Get_USB_Status>
 8008314:	4603      	mov	r3, r0
 8008316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008318:	7bbb      	ldrb	r3, [r7, #14]
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}

08008322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008322:	b580      	push	{r7, lr}
 8008324:	b084      	sub	sp, #16
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
 800832a:	460b      	mov	r3, r1
 800832c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f7fa f888 	bl	8002456 <HAL_PCD_EP_Close>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f8f7 	bl	8008540 <USBD_Get_USB_Status>
 8008352:	4603      	mov	r3, r0
 8008354:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008356:	7bbb      	ldrb	r3, [r7, #14]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836c:	2300      	movs	r3, #0
 800836e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800837a:	78fa      	ldrb	r2, [r7, #3]
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fa f919 	bl	80025b6 <HAL_PCD_EP_SetStall>
 8008384:	4603      	mov	r3, r0
 8008386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008388:	7bfb      	ldrb	r3, [r7, #15]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 f8d8 	bl	8008540 <USBD_Get_USB_Status>
 8008390:	4603      	mov	r3, r0
 8008392:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008394:	7bbb      	ldrb	r3, [r7, #14]
}
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b084      	sub	sp, #16
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083b8:	78fa      	ldrb	r2, [r7, #3]
 80083ba:	4611      	mov	r1, r2
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fa f95a 	bl	8002676 <HAL_PCD_EP_ClrStall>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 f8b9 	bl	8008540 <USBD_Get_USB_Status>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	da0c      	bge.n	8008412 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083fe:	68f9      	ldr	r1, [r7, #12]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	00db      	lsls	r3, r3, #3
 800840a:	440b      	add	r3, r1
 800840c:	3302      	adds	r3, #2
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	e00b      	b.n	800842a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008418:	68f9      	ldr	r1, [r7, #12]
 800841a:	4613      	mov	r3, r2
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	4413      	add	r3, r2
 8008420:	00db      	lsls	r3, r3, #3
 8008422:	440b      	add	r3, r1
 8008424:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008428:	781b      	ldrb	r3, [r3, #0]
  }
}
 800842a:	4618      	mov	r0, r3
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	bc80      	pop	{r7}
 8008432:	4770      	bx	lr

08008434 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	460b      	mov	r3, r1
 800843e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800844e:	78fa      	ldrb	r2, [r7, #3]
 8008450:	4611      	mov	r1, r2
 8008452:	4618      	mov	r0, r3
 8008454:	f7f9 ff7d 	bl	8002352 <HAL_PCD_SetAddress>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f86e 	bl	8008540 <USBD_Get_USB_Status>
 8008464:	4603      	mov	r3, r0
 8008466:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008468:	7bbb      	ldrb	r3, [r7, #14]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008472:	b580      	push	{r7, lr}
 8008474:	b086      	sub	sp, #24
 8008476:	af00      	add	r7, sp, #0
 8008478:	60f8      	str	r0, [r7, #12]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	461a      	mov	r2, r3
 800847e:	460b      	mov	r3, r1
 8008480:	72fb      	strb	r3, [r7, #11]
 8008482:	4613      	mov	r3, r2
 8008484:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800848a:	2300      	movs	r3, #0
 800848c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008494:	893b      	ldrh	r3, [r7, #8]
 8008496:	7af9      	ldrb	r1, [r7, #11]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	f7fa f855 	bl	8002548 <HAL_PCD_EP_Transmit>
 800849e:	4603      	mov	r3, r0
 80084a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 f84b 	bl	8008540 <USBD_Get_USB_Status>
 80084aa:	4603      	mov	r3, r0
 80084ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	607a      	str	r2, [r7, #4]
 80084c2:	461a      	mov	r2, r3
 80084c4:	460b      	mov	r3, r1
 80084c6:	72fb      	strb	r3, [r7, #11]
 80084c8:	4613      	mov	r3, r2
 80084ca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084cc:	2300      	movs	r3, #0
 80084ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084d0:	2300      	movs	r3, #0
 80084d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084da:	893b      	ldrh	r3, [r7, #8]
 80084dc:	7af9      	ldrb	r1, [r7, #11]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	f7fa f801 	bl	80024e6 <HAL_PCD_EP_Receive>
 80084e4:	4603      	mov	r3, r0
 80084e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	4618      	mov	r0, r3
 80084ec:	f000 f828 	bl	8008540 <USBD_Get_USB_Status>
 80084f0:	4603      	mov	r3, r0
 80084f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
	...

08008500 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <USBD_static_malloc+0x14>)
}
 800850a:	4618      	mov	r0, r3
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	bc80      	pop	{r7}
 8008512:	4770      	bx	lr
 8008514:	20000938 	.word	0x20000938

08008518 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	460b      	mov	r3, r1
 8008534:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008536:	bf00      	nop
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	bc80      	pop	{r7}
 800853e:	4770      	bx	lr

08008540 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	4603      	mov	r3, r0
 8008548:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b03      	cmp	r3, #3
 8008552:	d817      	bhi.n	8008584 <USBD_Get_USB_Status+0x44>
 8008554:	a201      	add	r2, pc, #4	; (adr r2, 800855c <USBD_Get_USB_Status+0x1c>)
 8008556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800855a:	bf00      	nop
 800855c:	0800856d 	.word	0x0800856d
 8008560:	08008573 	.word	0x08008573
 8008564:	08008579 	.word	0x08008579
 8008568:	0800857f 	.word	0x0800857f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
    break;
 8008570:	e00b      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008572:	2302      	movs	r3, #2
 8008574:	73fb      	strb	r3, [r7, #15]
    break;
 8008576:	e008      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
    break;
 800857c:	e005      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800857e:	2302      	movs	r3, #2
 8008580:	73fb      	strb	r3, [r7, #15]
    break;
 8008582:	e002      	b.n	800858a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008584:	2302      	movs	r3, #2
 8008586:	73fb      	strb	r3, [r7, #15]
    break;
 8008588:	bf00      	nop
  }
  return usb_status;
 800858a:	7bfb      	ldrb	r3, [r7, #15]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <__libc_init_array>:
 8008598:	b570      	push	{r4, r5, r6, lr}
 800859a:	2600      	movs	r6, #0
 800859c:	4d0c      	ldr	r5, [pc, #48]	; (80085d0 <__libc_init_array+0x38>)
 800859e:	4c0d      	ldr	r4, [pc, #52]	; (80085d4 <__libc_init_array+0x3c>)
 80085a0:	1b64      	subs	r4, r4, r5
 80085a2:	10a4      	asrs	r4, r4, #2
 80085a4:	42a6      	cmp	r6, r4
 80085a6:	d109      	bne.n	80085bc <__libc_init_array+0x24>
 80085a8:	f000 f822 	bl	80085f0 <_init>
 80085ac:	2600      	movs	r6, #0
 80085ae:	4d0a      	ldr	r5, [pc, #40]	; (80085d8 <__libc_init_array+0x40>)
 80085b0:	4c0a      	ldr	r4, [pc, #40]	; (80085dc <__libc_init_array+0x44>)
 80085b2:	1b64      	subs	r4, r4, r5
 80085b4:	10a4      	asrs	r4, r4, #2
 80085b6:	42a6      	cmp	r6, r4
 80085b8:	d105      	bne.n	80085c6 <__libc_init_array+0x2e>
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c0:	4798      	blx	r3
 80085c2:	3601      	adds	r6, #1
 80085c4:	e7ee      	b.n	80085a4 <__libc_init_array+0xc>
 80085c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80085ca:	4798      	blx	r3
 80085cc:	3601      	adds	r6, #1
 80085ce:	e7f2      	b.n	80085b6 <__libc_init_array+0x1e>
 80085d0:	0800866c 	.word	0x0800866c
 80085d4:	0800866c 	.word	0x0800866c
 80085d8:	0800866c 	.word	0x0800866c
 80085dc:	08008670 	.word	0x08008670

080085e0 <memset>:
 80085e0:	4603      	mov	r3, r0
 80085e2:	4402      	add	r2, r0
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d100      	bne.n	80085ea <memset+0xa>
 80085e8:	4770      	bx	lr
 80085ea:	f803 1b01 	strb.w	r1, [r3], #1
 80085ee:	e7f9      	b.n	80085e4 <memset+0x4>

080085f0 <_init>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr

080085fc <_fini>:
 80085fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fe:	bf00      	nop
 8008600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008602:	bc08      	pop	{r3}
 8008604:	469e      	mov	lr, r3
 8008606:	4770      	bx	lr
